* Declaration of global variables and utility functions
** Check if given file is older than any of the other given files
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-is-file-stale (orig-file &rest files)
       (if (file-exists-p orig-file)
           (reduce (lambda (is-stale-yet? file)
                     (or is-stale-yet?
                         (file-newer-than-file-p file orig-file)))
                   files
                   :initial-value nil)
         t))
   #+END_SRC

** Given a url, resolve any redirects and get the original url
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-resolve-redirects-url (url)
       (let ((url-request-method "HEAD")
             (url-show-status nil))
         (with-current-buffer (url-retrieve-synchronously url)
           (url-recreate-url url-http-target-url))))

     (defun iqbal-resolve-redirects-curl (url)
       (let ((curl-command (format "curl -L -I -s -o /dev/null %s -w '%%{url_effective}'"
                                   (shell-quote-argument url))))
         (with-temp-buffer
           (when (shell-command curl-command (current-buffer))
             (buffer-string)))))

     (defun iqbal-resolve-redirects (url)
       (if (executable-find "curl")
           (iqbal-resolve-redirects-curl url)
         (iqbal-resolve-redirects-url url)))
   #+END_SRC

** Helper functions to read/write from/to file
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-read-file (path)
       (with-temp-buffer
         (insert-file-contents-literally path)
         (buffer-substring-no-properties (point-min) (point-max))))

     (defun iqbal-write-to-file (file data)
       (with-temp-file file
         (erase-buffer)
         (insert data)))
   #+END_SRC

** Function to declare one-shot keybindings
    These bindings active only after a particular command and are
    deactivated as soon as some other key is pressed (as in 'C-x e'
    and 'e'). Borrowed from [[https://github.com/magnars/.emacs.d][Magnar Sveen's .emacs.d]]
    #+BEGIN_SRC emacs-lisp
      (defun one-shot-keybinding (key command)
        (set-temporary-overlay-map
         (let ((map (make-sparse-keymap)))
           (define-key map (kbd key) command)
           map) t))
    #+END_SRC

** Interacting with REPL
   #+BEGIN_SRC emacs-lisp
     (defmacro iqbal-evaluate-line-in-repl (name send-region-func)
       `(defun ,name ()
          (interactive)
          (,send-region-func (line-beginning-position)
                             (line-end-position))))
     
     (defmacro iqbal-evaluate-file-in-repl (name send-region-func)
       `(defun ,name (file)
          (interactive (list (ido-read-file-name "File to evaluate: ")))
          (with-temp-buffer
            (insert-file-contents file)
            (,send-region-func (point-min)
                               (point-max)))))
     
     (defmacro iqbal-evaluate-buffer-in-repl (name send-region-func)
       `(defun ,name ()
          (interactive)
          (,send-region-func (point-min)
                             (point-max))))
     
     (defmacro iqbal-evaluate-defun-in-repl (name send-region-func)
       `(defun ,name ()
          (interactive)
          (let ((start (save-excursion (beginning-of-defun) (point)))
                (end   (save-excursion (end-of-defun) (point))))
            (,send-region-func  start
                                end))))
   #+END_SRC

** Highlighting the line to reorient the user
   #+BEGIN_SRC emacs-lisp
     (autoload #'pulse-momentary-highlight-one-line "pulse")

     (defun iqbal-highlight-line ()
       (pulse-momentary-highlight-one-line (point)))

     (defmacro iqbal-highlight-line-after-func (func)
       `(progn (defadvice ,func (after highlight-current-line
                                       (&rest args))
                 "Flash the current line after jump"
                 (run-at-time 0.1 nil #'iqbal-highlight-line))
               (ad-activate ',func)))
   #+END_SRC

** Prefer utf-8 encoding
   #+BEGIN_SRC emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+END_SRC

** Increase gc threshhold
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold (* 100 1024 1024))
   #+END_SRC


* Location of data directory
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-data-directory (locate-user-emacs-file "data/") "Directory to store personal data")

    (defun iqbal-get-file-in-data-directory (filename &optional directory-p)
      (unless (file-exists-p iqbal-data-directory)
        (make-directory iqbal-data-directory))

      (unless (file-directory-p iqbal-data-directory)
        (user-error "The specified data-directory %s, is a file. Please delete it or custom `iqbal-data-directory'"))

      (let ((file (expand-file-name filename
                                    (file-truename iqbal-data-directory))))
        (when directory-p
          (make-directory file t))

        file))
  #+END_SRC


* Initialize package management
** Add some more repositories
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
     (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
   #+END_SRC

** Refresh package contents if needed
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-package-refresh-needed (reduce (lambda (need-refresh repo)
                                                 (or (not (file-exists-p (concat package-user-dir "/archives/"
                                                                                 (car repo)
                                                                                 "/archive-contents")))
                                                     need-refresh))
                                               package-archives :initial-value nil))

     (when iqbal-package-refresh-needed
       (package-refresh-contents))
   #+END_SRC

** Path to custom El-Get recipies
   Use recipies from this directory
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-local-recipes (locate-user-emacs-file "recipies/"))
     (eval-after-load "el-get"
       '(add-to-list 'el-get-recipe-path iqbal-local-recipes))
   #+END_SRC

** Helper functions to install package if not already installed 
   #+BEGIN_SRC emacs-lisp
     (defun iqbal--install-package (package &optional after-install)
       (unless (package-installed-p package)
         (condition-case err
             (package-install package)
           
           ;; File error most probably means, the contents are old
           ;; refresh content and try again (emacs-version >= 24.4)
           (file-error (progn (package-refresh-contents)
                              (package-install package)))

           ;; Older emacs
           (error (if (or (string-match-p "Error during download request.*Not Found"
                                          (error-message-string err))
                          (string-match-p "Package `.*' is unavailable"
                                          (error-message-string err)))
                      (progn (package-refresh-contents)
                             (package-install package))
                    (signal (car err) (cdr err)))))

         (when after-install
           (funcall after-install))))

     (defun iqbal-install-package (package &optional after-install)
       "Install package if not already installed, use el-get if 'local' recipe exists
          for the package. Otherwise install it using package"
       (if (file-exists-p (concat iqbal-local-recipes 
                                  (symbol-name package)
                                  ".rcp"))
           (el-get 'sync package)
         (iqbal--install-package package after-install)))

     (defun iqbal-install-packages (packages)
       (dolist (package packages)
         (iqbal-install-package package)))
   #+END_SRC

** Install el-get for installing packages that have external dependencies
   #+BEGIN_SRC emacs-lisp
     (iqbal-install-package 'el-get)
   #+END_SRC

** Create directory for el-get
   #+BEGIN_SRC emacs-lisp
     (unless (file-exists-p (locate-user-emacs-file "el-get"))
       (make-directory (locate-user-emacs-file "el-get")))
   #+END_SRC

** Use shallow clones for git repositories
   #+BEGIN_SRC emacs-lisp
     (setq el-get-git-shallow-clone t)
   #+END_SRC

** Path to packages not in a package manager
   Packages not currently installable package manager reside in this directory
   #+BEGIN_SRC emacs-lisp
     (defvar otherpackages (locate-user-emacs-file "otherpackages/"))

     (let ((default-directory otherpackages))
       (normal-top-level-add-subdirs-to-load-path))
   #+END_SRC

** Byte compile installed packages in a clean environment
*** Install emacs-async
    #+BEGIN_SRC emacs-lisp
      (iqbal-install-package 'async)
    #+END_SRC

*** Enable async byte compilation for all packages
    #+BEGIN_SRC emacs-lisp
      (setq async-bytecomp-allowed-packages '(all))
      (async-bytecomp-package-mode)
    #+END_SRC


* Setup the PATH and exec-path from shell
  This is needed if emacs not started from a shell
** The variables to copy from shell
   #+BEGIN_SRC emacs-lisp
     (setq exec-path-from-shell-variables (list "PATH" "MANPATH" "PKG_CONFIG_PATH" "LD_LIBRARY_PATH" "ACLOCAL_PATH"))
   #+END_SRC

** Initialize the environment from shell
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-package 'exec-path-from-shell)

    (when (and (display-graphic-p)
               (not (equal system-type 'windows-nt)))
      (add-hook 'after-init-hook #'exec-path-from-shell-initialize))
  #+END_SRC

 
* Declare common keybindings
  These don't actually bind any command rather they define the keys that will
  be used for common actions across multiple modes for commands
  like jumping-to-definition etc. These keys will be bound to actual
  functions by the respective major modes.

** Jumping to definitions
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-jump-to-definition (kbd "M-."))
     (defvar iqbal-pop-jump-to-definition-marker (kbd "M-,"))
   #+END_SRC

** Finding references
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-find-references (kbd "C-c <"))
   #+END_SRC

** Displaying doc
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-show-doc (kbd "C-c d"))
   #+END_SRC

** Refactoring
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-refactor-rename (kbd "C-c r"))
     (defvar iqbal-refactor-auto-import (kbd "C-c i"))
     (defvar iqbal-refactor-organize-imports (kbd "C-c o"))
   #+END_SRC

** Interacting with REPL
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-run-shell (kbd "C-c C-z"))
     (defvar iqbal-send-region (kbd "C-c C-r"))
     (defvar iqbal-send-buffer (kbd "C-c C-b"))
     (defvar iqbal-send-line (kbd "C-c C-l"))
     (defvar iqbal-send-file (kbd "C-c C-f"))
     (defvar iqbal-send-function (kbd "C-M-x"))
     (defvar iqbal-send-phrase/sexp/block (kbd "C-x C-e"))
   #+END_SRC

** Expanding macro
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-expand-macro (kbd "C-c x"))
   #+END_SRC

** Expanding snippet
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-expand-snippet (kbd "<C-return>"))
   #+END_SRC

** Opening links
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-open-link (kbd "C-c RET"))
   #+END_SRC
   

* Load common libraries
   These are general purpose libraries that can are used
   by different modes

   The libaries are loaded by the file 'config/init.org'
   #+BEGIN_SRC emacs-lisp
     (unless (file-exists-p (locate-user-emacs-file "config/.compiled/"))
       (make-directory (locate-user-emacs-file "config/.compiled/")))

     (when (file-newer-than-file-p (locate-user-emacs-file "config/init.org")
                                   (locate-user-emacs-file "config/.compiled/init.el"))
       (org-babel-tangle-file (locate-user-emacs-file "config/init.org")
                              (locate-user-emacs-file "config/.compiled/init.el")
                              "emacs-lisp"))

     (load-file (locate-user-emacs-file "config/.compiled/init.el"))
   #+END_SRC


* Setup language configurations
** Path to language specific configurations
   Lang contain the configuration related to one specific type of file.
   They reside in the following directory
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-langs-dir (locate-user-emacs-file "lang/"))
   #+END_SRC

** Function to load language configuration
   A simple helper function to load a particular language configuration.
   Instead of loading the org files one by one it combines all the code in
   them in one compiled file and loads that file, the compiled file is regenerated
   if any of the org files change
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-initialized-langs nil)

     (defun iqbal-initialize-lang (lang)
       (let* ((lang-path (concat iqbal-langs-dir lang "/"))
              (init-file (concat lang-path "init.org"))
              (compiled-file-dest (concat lang-path ".compiled/"))
              (compiled-file (concat compiled-file-dest "init.el")))
         (when (and (file-exists-p init-file)
                    (or (not (member lang iqbal-initialized-langs))
                        (iqbal-is-file-stale compiled-file init-file)))

           (unless (file-exists-p compiled-file-dest)
             (make-directory compiled-file-dest))

           (when (iqbal-is-file-stale compiled-file init-file)
             (org-babel-tangle-file init-file compiled-file "emacs-lisp"))

           (load (file-name-sans-extension compiled-file)))

         (add-to-list 'iqbal-initialized-langs lang)))

     (defun iqbal-compile-lang-config (lang)
       "Compile a languages configuration file, it simply tangles all the related
     org files and combines them into one elisp file"
       (interactive
        (list (ido-completing-read "Language: "
                                   (directory-files iqbal-langs-dir nil "[^.]+"))))
       (let* ((files '("install" "setup" "keybindings"))
              (lang-path (concat iqbal-langs-dir lang "/"))
              (compiled-file-dest (concat lang-path ".compiled/"))
              (compiled-file (concat compiled-file-dest ".combined.el")))

         (when (file-exists-p lang-path)
           (unless (file-exists-p compiled-file-dest)
             (make-directory compiled-file-dest))

           (iqbal-write-to-file compiled-file
                             (loop for file in files
                                   when (file-exists-p (concat lang-path file ".org"))
                                   concat (iqbal-read-file (car (org-babel-tangle-file
                                                              (concat lang-path file ".org")
                                                              (concat compiled-file-dest file ".el")
                                                              "emacs-lisp")))))
           (byte-compile-file compiled-file))))

     (defun iqbal-load-lang-config (language)
       (let* ((files '("install" "setup" "keybindings"))
              (lang-path (concat iqbal-langs-dir language "/"))
              (compiled-file-dest (concat lang-path ".compiled/"))
              (compiled-file (concat compiled-file-dest ".combined.el")))

         (when (file-exists-p lang-path)
           (iqbal-initialize-lang language)
           
           (when (apply #'iqbal-is-file-stale compiled-file
                        (loop for file in files
                              when (file-exists-p (concat lang-path file ".org"))
                              collect (concat lang-path file ".org")))
             (iqbal-compile-lang-config language))

           (load (file-name-sans-extension compiled-file)))))

     (defun iqbal-load-lang-config-for-buffer (language)
       "Load a languages configuration, it compiles the config files
          first (if needed)"
       (interactive
        (list (ido-completing-read "Language: "
                                   (directory-files iqbal-langs-dir nil "[^.]+"))))
       (unless (or (and (string-prefix-p "*" (buffer-name))
                        (not (numberp (string-match-p "*scratch [\\[a-z0-9A-Z]+\\]"
                                                      (buffer-name)))))
                   (string-prefix-p " " (buffer-name)))
         (iqbal-load-lang-config language)))

     (defun iqbal-compile-all-lang-config ()
       "Compile all language configurations"
       (interactive)
       (dolist (lang (directory-files iqbal-langs-dir nil "[^.]+"))
         (iqbal-compile-lang-config lang)))

     ;; Taken from prelude
     (defmacro iqbal-auto-install (extension package mode)
       "When file with EXTENSION is opened triggers auto-install of PACKAGE.
     PACKAGE is installed only if not already present. The file is opened in MODE."
       `(add-to-list 'auto-mode-alist
                     `(,extension . (lambda ()
                                      (iqbal-install-package ',package)
                                      (,mode)))))

     (defun iqbal-auto-install-lang (extension package mode)
       "Setup installation of PACKAGE, if the package is not installed,
     when a file with extension EXTENSION is opened, the files with the
     EXTENSION are open in MODE"
       (add-to-list 'auto-mode-alist (cons extension mode))
       (unless (package-installed-p package)
         (iqbal-auto-install extension package mode)))

     (defun iqbal-setup-lang (hook language &optional extension)
       (add-hook hook (lexical-let ((language language)
                                    (extension extension))
                        (lambda ()
                          (when (or (not extension)
                                    (string-match-p extension (or (file-name-extension (buffer-name)) "")))
                            (iqbal-load-lang-config-for-buffer language))))))
   #+END_SRC

** Emacs lisp is needs to be configured specially
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-elisp-packages '(elisp-slime-nav 
                                 macrostep
                                 cl-lib-highlight))

     (iqbal-install-packages iqbal-elisp-packages)

     ;; ielm replaces the current window, stop it from doing so
     (defadvice ielm (before do-not-replace-this-window (&rest args))
       (select-window (split-window)))

     (defun iqbal-emacs-lisp-config ()
       ;; Setup
       (elisp-slime-nav-mode +1)
       (eldoc-mode +1)

       (cl-lib-highlight-initialize)

       (setq flycheck-emacs-lisp-load-path load-path)
       
       (unless (string= (buffer-name) "*scratch*")
         (flycheck-mode))

       (add-hook 'ielm-mode-hook 'company-mode)
       (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

       ;; Keybindings
       (local-set-key iqbal-show-doc #'elisp-slime-nav-describe-elisp-thing-at-point)
       (local-set-key iqbal-run-shell #'ielm)
       (local-set-key iqbal-send-buffer #'eval-buffer)
       (local-set-key iqbal-send-file #'load-file)
       (local-set-key iqbal-send-region #'eval-region)
       (local-set-key iqbal-expand-macro 'macrostep-expand))

     (add-hook 'emacs-lisp-mode-hook #'iqbal-emacs-lisp-config)
   #+END_SRC

** Setup installation of external language modes
  #+BEGIN_SRC emacs-lisp
    (iqbal-auto-install-lang (rx ".js" string-end) 'js2-mode 'js2-mode)
    (iqbal-auto-install-lang (rx ".php" string-end) 'php-mode 'php-mode)
    (iqbal-auto-install-lang (rx ".lua" string-end) 'lua-mode 'lua-mode)
    (iqbal-auto-install-lang (rx "." (or "scala" "sbt") string-end) 'scala-mode2 'scala-mode)
    (iqbal-auto-install-lang (rx ".ml" (zero-or-one ?i ?y ?l ?p) string-end) 'tuareg 'tuareg-mode)
    (iqbal-auto-install-lang (rx ".hs" string-end) 'haskell-mode 'haskell-mode)
    (iqbal-auto-install-lang (rx "." (or (seq "clj" (zero-or-one ?s ?x)) "dtm" "edn") string-end) 'clojure-mode 'clojure-mode)
    (iqbal-auto-install-lang (rx ".erl" string-end) 'erlang 'erlang-mode)
    (iqbal-auto-install-lang (rx "." (or "ex" "exs")) 'elixir-mode 'elixir-mode)
    (iqbal-auto-install-lang (rx "." (or "sml" "sig")) 'sml-mode 'sml-mode)
    (iqbal-auto-install-lang (rx "." (or "html" "ejs" "twig") string-end) 'web-mode 'web-mode)
    (iqbal-auto-install-lang (rx ".go" string-end) 'go-mode 'go-mode)
    (iqbal-auto-install-lang (rx ".rs" string-end) 'rust-mode 'rust-mode)
    (iqbal-auto-install-lang (rx ".jade" string-end) 'jade-mode 'jade-mode)
    (iqbal-auto-install-lang (rx ".factor" string-end) 'fuel 'factor-mode)
    (iqbal-auto-install-lang (rx ".json" string-end) 'json-mode 'json-mode)
    (iqbal-auto-install-lang (rx ".csv" string-end) 'csv-mode 'csv-mode)
    (iqbal-auto-install-lang (rx (or (seq "." (or "md" "markdown" "mkdn")) "README") string-end) 'markdown-mode 'markdown-mode)
    (iqbal-auto-install-lang (rx (or (regexp ".y[a]?ml") (regexp ".y[a]?ml.dist")) string-end) 'yaml-mode 'yaml-mode)
    (iqbal-auto-install-lang (rx ".toml" string-end) 'toml-mode 'toml-mode)
    (iqbal-auto-install-lang (rx (or "http.conf" "srm.conf" "access.conf" (seq "sites-" (or "available" "enabled")) ".htaccess") string-end)
                          'apache-mode 
                          'apache-mode)
    (iqbal-auto-install-lang (rx (or ".pip" (seq "requirements" (zero-or-more nonl)  ".txt")) string-end) 'pip-requirements 'pip-requirements-mode)
    (iqbal-auto-install-lang (rx ".dot" string-end) 'graphviz-dot-mode 'graphviz-dot-mode)
    (iqbal-auto-install-lang (rx ".ps1" string-end) 'powershell 'powershell-mode)
    (iqbal-auto-install-lang (rx "rfc" (one-or-more digit) ".txt" string-end) 'irfc 'irfc-mode)
    (iqbal-auto-install-lang (rx "CMakeLists.txt" string-end) 'cmake-mode 'cmake-mode)
    (iqbal-auto-install-lang (rx ".cmake" string-end) 'cmake-mode 'cmake-mode)
    (iqbal-auto-install-lang (rx word-start "ledger" string-end) 'ledger-mode 'ledger-mode)
    (iqbal-auto-install-lang (rx ".ledger" string-end) 'ledger-mode 'ledger-mode)
    (iqbal-auto-install-lang (rx "Dockerfile" string-end) 'dockerfile-mode 'dockerfile-mode)
  #+END_SRC

** Some extra auto-mode-alist entries
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist (cons (rx ".rkt" string-end) 'scheme-mode))
     (add-to-list 'auto-mode-alist (cons (rx (or ".irbrc" ".pryrc" "Gemfile") string-end) 'ruby-mode))
     (add-to-list 'auto-mode-alist (cons (rx word-start "composer.lock" string-end) 'json-mode))
     (add-to-list 'auto-mode-alist (cons (rx word-start "diary" string-end) 'diary-mode))
     (add-to-list 'auto-mode-alist (cons (rx ".zsh" string-end) 'sh-mode))
   #+END_SRC

** Distinguishing between objc-headers and c-headers
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-file-objective-c-header-p ()
       (and buffer-file-name
            (string= (file-name-extension buffer-file-name) "h")
            (or (> (length (file-expand-wildcards "*.m"))
                   (length (file-expand-wildcards "*.c")))
                (re-search-forward "@\\<interface\\>" 
                                   magic-mode-regexp-match-limit t))))

     (add-to-list 'magic-mode-alist
                  (cons #'iqbal-file-objective-c-header-p #'objc-mode))
   #+END_SRC

** Setup loading of language configuration when the language mode loads
   #+BEGIN_SRC emacs-lisp
     (iqbal-setup-lang 'python-mode-hook "python")
     (iqbal-setup-lang 'js2-mode-hook "javascript")
     (iqbal-setup-lang 'php-mode-hook "php")
     (iqbal-setup-lang 'lua-mode-hook "lua")
     (iqbal-setup-lang 'lisp-mode-hook "common-lisp")
     (iqbal-setup-lang 'scheme-mode-hook "scheme")
     (iqbal-setup-lang 'c-mode-hook "c" "c")
     (iqbal-setup-lang 'c++-mode-hook "c" "\\(CC?\\|HH?\\)")
     (iqbal-setup-lang 'css-mode-hook "css")
     (iqbal-setup-lang 'scala-mode-hook "scala" "scala")
     (iqbal-setup-lang 'tuareg-mode-hook "ocaml")
     (iqbal-setup-lang 'go-mode-hook "go")
     (iqbal-setup-lang 'rust-mode-hook "rust")
     (iqbal-setup-lang 'erlang-mode-hook "erlang")
     (iqbal-setup-lang 'elixir-mode-hook "elixir")
     (iqbal-setup-lang 'factor-mode-hook "factor")
     (iqbal-setup-lang 'json-mode-hook "json")
     (iqbal-setup-lang 'markdown-mode-hook "markdown")
     (iqbal-setup-lang 'sml-mode-hook "sml")
     (iqbal-setup-lang 'clojure-mode-hook "clojure")
     (iqbal-setup-lang 'web-mode-hook "html" "html")
     (iqbal-setup-lang 'haskell-mode-hook "haskell")
     (iqbal-setup-lang 'ruby-mode-hook "ruby" "rb")
     (iqbal-setup-lang 'ledger-mode-hook "ledger")
     (iqbal-setup-lang 'yaml-mode-hook "yaml")
     (iqbal-setup-lang 'cmake-mode-hook "cmake")
   #+END_SRC
