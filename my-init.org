* Declaration of global variables and utility functions
  Set global variables to be used in the rest of the intialization
** 1. Path to packages not in a package manager
   Packages not currently installable package manager reside in this directory
   #+begin_src emacs-lisp
     (defvar otherpackages (locate-user-emacs-file "otherpackages/"))
     (add-to-list 'load-path otherpackages)
   #+end_src

** 2. Path to 'lang'uage specific configurations
   Lang contain the configuration related to one specific type of file.
   They reside in the following directory
   #+begin_src emacs-lisp
     (defvar my-langs-dir (locate-user-emacs-file "lang/"))
   #+end_src

** 3. Check if given file is older than any of the other given files
   #+begin_src emacs-lisp
     (defun my-is-file-stale (orig-file &rest files)
       (if (file-exists-p orig-file)
           (reduce (lambda (is-stale-yet? file)
                     (or is-stale-yet?
                         (file-newer-than-file-p file orig-file)))
                   files
                   :initial-value nil)
         t))
   #+end_src

** 4. Helper functions to read/write from/to file
   #+begin_src emacs-lisp
     (defun my-read-file (path)
       (with-temp-buffer
         (insert-file-contents-literally path)
         (buffer-substring-no-properties (point-min) (point-max))))

     (defun my-write-to-file (file data)
       (with-temp-file file
         (erase-buffer)
         (insert data)))
   #+end_src

** 5. Function to load language configuration
   A simple helper function to load a particular language configuration.
   Instead of loading the org files one by one it combines all the code in
   them in one compiled file and loads that file, the compiled file is regenerated
   if any of the org files change
   #+begin_src emacs-lisp
     (defun my-compile-lang-config (lang)
       "Compile a languages configuration file, it simply tangles all the related
     org files and combines them into one elisp file"
       (interactive
        (list (ido-completing-read "Language: "
                                   (directory-files my-langs-dir nil "[^.]+"))))
       (let* ((files '("install" "setup" "keybindings"))
              (lang-path (concat my-langs-dir lang "/"))
              (compiled-file-dest (concat lang-path ".compiled/"))
              (compiled-file (concat compiled-file-dest ".combined.el")))

         (when (file-exists-p lang-path)
           (unless (file-exists-p compiled-file-dest)
             (make-directory compiled-file-dest))

           (my-write-to-file compiled-file
                             (loop for file in files
                                   when (file-exists-p (concat lang-path file ".org"))
                                   concat (my-read-file (car (org-babel-tangle-file
                                                              (concat lang-path file ".org")
                                                              (concat compiled-file-dest file ".el")
                                                              "emacs-lisp")))))
           (byte-compile-file compiled-file))))

     (defun my-load-lang-config (language)
       "Load a languages configuration, it compiles the config files
     first (if needed)"
       (interactive
        (list (ido-completing-read "Language: "
                                   (directory-files my-langs-dir nil "[^.]+"))))
       (unless (string-match-p "org-src-fontification:" (buffer-name))
         (let* ((files '("install" "setup" "keybindings"))
                (lang-path (concat my-langs-dir language "/"))
                (compiled-file-dest (concat lang-path ".compiled/"))
                (compiled-file (concat compiled-file-dest ".combined.el")))

           (when (file-exists-p lang-path)
             (when (apply #'my-is-file-stale compiled-file
                          (loop for file in files
                                when (file-exists-p (concat lang-path file ".org"))
                                collect (concat lang-path file ".org")))
               (my-compile-lang-config language))

             (load-file compiled-file)))))

     (defun my-compile-all-lang-config ()
       "Compile all language configurations"
       (interactive)
       (dolist (lang (directory-files my-langs-dir nil "[^.]+"))
         (my-compile-lang-config lang)))

     ;; Taken from prelude
     (defmacro my-auto-install (extension package mode)
       "When file with EXTENSION is opened triggers auto-install of PACKAGE.
     PACKAGE is installed only if not already present. The file is opened in MODE."
       `(add-to-list 'auto-mode-alist
                     `(,extension . (lambda ()
                                      (my-install-package ',package)
                                      (,mode)))))

     (defun my-auto-install-lang (extension package mode)
       "Setup installation of PACKAGE, if the package is not installed,
     when a file with extension EXTENSION is opened, the files with the
     EXTENSION are open in MODE"
       (add-to-list 'auto-mode-alist (cons extension mode))
       (unless (package-installed-p package)
         (my-auto-install extension package mode)))

     (defun my-setup-lang (hook language &rest extensions)
       (add-hook hook (lexical-let ((language language)
                                    (extensions extensions))
                        (lambda ()
                          (when (or (not extensions)
                                    (and (member (file-name-extension (buffer-name))
                                                 extensions)))
                            (my-load-lang-config language))))))
   #+end_src

** 6. Function to declare one-shot keybindings
    These bindings active only after a particular command and are
    deactivated as soon as some other key is pressed (as in 'C-x e'
    and 'e'). Borrowed from [[https://github.com/magnars/.emacs.d][Magnar Sveen's .emacs.d]]
    #+begin_src emacs-lisp
      (defun one-shot-keybinding (key command)
        (set-temporary-overlay-map
         (let ((map (make-sparse-keymap)))
           (define-key map (kbd key) command)
           map) t))
    #+end_src

** 7. Interacting with REPL
   #+begin_src emacs-lisp
     (defmacro my-evaluate-line-in-repl (name send-region-func)
       `(defun ,name ()
          (interactive)
          (,send-region-func (line-beginning-position)
                             (line-end-position))))
     
     (defmacro my-evaluate-file-in-repl (name send-region-func)
       `(defun ,name (file)
          (interactive (list (ido-read-file-name "File to evaluate: ")))
          (with-temp-buffer
            (insert-file-contents file)
            (,send-region-func (point-min)
                               (point-max)))))
     
     (defmacro my-evaluate-buffer-in-repl (name send-region-func)
       `(defun ,name ()
          (interactive)
          (,send-region-func (point-min)
                             (point-max))))
     
     (defmacro my-evaluate-defun-in-repl (name send-region-func)
       `(defun ,name ()
          (interactive)
          (let ((start (save-excursion (beginning-of-defun) (point)))
                (end   (save-excursion (end-of-defun) (point))))
            (,send-region-func  start
                                end))))
   #+end_src

** 8. Highlighting the line to reorient the user
   #+begin_src emacs-lisp
     (load "pulse")
     (defun my-highlight-line ()
       (pulse-momentary-highlight-one-line (point)))

     (defmacro my-highlight-line-after-func (func)
       `(progn (defadvice ,func (after highlight-current-line
                                       (&rest args))
                 "Flash the current line after jump"
                 (run-at-time 0.1 nil #'my-highlight-line))
               (ad-activate ',func)))
   #+end_src

** 9. Load cl, it defines a lot of useful functions
   #+begin_src emacs-lisp
     (load "cl")
   #+end_src

** 10. Select an application for spellchecking
   #+begin_src emacs-lisp
     (defvar ispell-program-name (or (executable-find "ispell")
                                     (executable-find "aspell")
                                     (executable-find "hunspell")))

     (when (equal system-type 'windows-nt)
       (setenv "LANG" "en_US"))
   #+end_src


* Increase gc threshhold
  #+begin_src emacs-lisp
    (setq gc-cons-threshold (* 100 1024 1024))
  #+end_src


* Initialize package management
** Add some more repositories
   #+begin_src emacs-lisp
     (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
     (add-to-list 'package-archives '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/"))
     (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
     (package-initialize)
   #+end_src

** Refresh package contents if needed
   #+begin_src emacs-lisp
     (defvar my-package-refresh-needed (reduce (lambda (need-refresh repo)
                                                 (or (not (file-exists-p (concat package-user-dir "/archives/"
                                                                                 (car repo)
                                                                                 "/archive-contents")))
                                                     need-refresh))
                                               package-archives :initial-value nil))

     (when my-package-refresh-needed
       (package-refresh-contents))
   #+end_src

** Path to El-Get recipies
   Use recipies from this directory
   #+begin_src emacs-lisp
     (defvar my-local-recipes (locate-user-emacs-file "recipies/"))
   #+end_src

** Helper functions to install package if not already installed 
   #+begin_src emacs-lisp
     (defun my--install-package (package &optional after-install)
       (unless (package-installed-p package)
         (condition-case err
             (package-install package)
           
           ;; File error most probably means, the contents are old
           ;; refresh content and try again (emacs-version <= 24.4)
           (file-error (progn (package-refresh-contents)
                              (package-install package)))

           ;; Older emacs
           (error (if (string-match-p "Error during download request.*Not Found"
                                      (error-message-string err))
                      (progn (package-refresh-contents)
                             (package-install package))
                    (signal (car err) (cdr err)))))

         (when after-install
           (funcall after-install))))

     (defun my-install-package (package &optional after-install)
       "Install package if not already installed, use el-get if 'local' recipe exists
          for the package. Otherwise install it using package"
       (if (file-exists-p (concat my-local-recipes 
                                  (symbol-name package)
                                  ".rcp"))
           (el-get 'sync package)
         (my--install-package package after-install)))

     (defun my-install-packages (packages)
       (dolist (package packages)
         (my-install-package package)))
   #+end_src

** Install el-get for installing packages that have external dependencies
   #+begin_src emacs-lisp
     (my-install-package 'el-get)
     (load "el-get")
     (add-to-list 'el-get-recipe-path (locate-user-emacs-file "recipies/"))
   #+end_src

** Create directory for el-get
   #+begin_src emacs-lisp
     (unless (file-exists-p (locate-user-emacs-file "el-get"))
       (make-directory (locate-user-emacs-file "el-get")))
   #+end_src


* Unset C-z, I don't find it useful
   #+begin_src emacs-lisp
     (global-unset-key "\C-z")
   #+end_src


* Confirm before killing emacs
  #+begin_src emacs-lisp
    (setq confirm-kill-emacs 'y-or-n-p)
  #+end_src


* Enable some disabled commands
  #+begin_src emacs-lisp
    (put 'narrow-to-region 'disabled nil)
    (put 'scroll-left 'disabled nil)
  #+end_src


* Integration with system clipboard
** Use system clipboard, these are helpful only when running GUI emacs
  #+begin_src emacs-lisp
    (setq x-select-enable-clipboard t)
    (setq save-interprogram-paste-before-kill t)
  #+end_src

** Use 'xsel' for kill and yank on emacs run in terminal
   #+begin_src emacs-lisp
     (unless window-system
       (when (getenv "DISPLAY")
         (if (executable-find "xsel")
             (progn
               ;; Callback for when user cuts
               (defun xsel-cut-function (text &optional push)
                 ;; Insert text to temp-buffer, and "send" content to xsel stdin
                 (with-temp-buffer
                   (insert text)
                   ;; I prefer using the "clipboard" selection (the one the
                   ;; typically is used by c-c/c-v) before the primary selection
                   ;; (that uses mouse-select/middle-button-click)
                   (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
               ;; Call back for when user pastes
               (defun xsel-paste-function()
                 ;; Find out what is current selection by xsel. If it is different
                 ;; from the top of the kill-ring (car kill-ring), then return
                 ;; it. Else, nil is returned, so whatever is in the top of the
                 ;; kill-ring will be used.
                 (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
                   (unless (string= (car kill-ring) xsel-output)
                     xsel-output )))
               ;; Attach callbacks to hooks
               (setq interprogram-cut-function 'xsel-cut-function)
               (setq interprogram-paste-function 'xsel-paste-function))
           (message "Install `xsel' for integrating copy-paste between emacs run in terminal and other programs"))))
   #+end_src


* Setup the PATH and exec-path from shell
  This is needed if emacs not started from a shell
  #+begin_src emacs-lisp
    (my-install-package 'exec-path-from-shell)

    (when (not (equal system-type 'windows-nt))
      (exec-path-from-shell-initialize))
  #+end_src


* Replace yes-no questions with y-n questions
  #+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src


* Create auto-save directory if it does not already exist
  #+begin_src emacs-lisp
    (unless (file-exists-p (locate-user-emacs-file "auto-save/"))
      (make-directory (locate-user-emacs-file "auto-save/")))
  #+end_src


* Declare common keybindings
  These don't actually bind any command rather they define the keys that will
  be used for common actions across multiple modes for commands
  like jumping-to-definition etc. These keys will be bound to actual
  functions by the respective major modes.

** Jumping to definitions
   #+begin_src emacs-lisp
     (defvar my-jump-to-definition (kbd "M-."))
     (defvar my-pop-jump-to-definition-marker (kbd "M-,"))
   #+end_src

** Finding references
   #+begin_src emacs-lisp
     (defvar my-find-references (kbd "C-c <"))
   #+end_src

** Displaying doc
   #+begin_src emacs-lisp
     (defvar my-show-doc (kbd "C-c d"))
   #+end_src

** Refactoring
   #+begin_src emacs-lisp
     (defvar my-refactor-rename (kbd "C-c r"))
     (defvar my-refactor-auto-import (kbd "C-c i"))
     (defvar my-refactor-organize-imports (kbd "C-c o"))
   #+end_src

** Interacting with REPL
   #+begin_src emacs-lisp
     (defvar my-run-shell (kbd "C-c C-z"))
     (defvar my-send-region (kbd "C-c C-r"))
     (defvar my-send-buffer (kbd "C-c C-b"))
     (defvar my-send-line (kbd "C-c C-f"))
     (defvar my-send-file (kbd "C-c C-l"))
     (defvar my-send-function (kbd "C-M-x"))
     (defvar my-send-phrase/sexp/block (kbd "C-x C-e"))
   #+end_src

** Expanding macro
   #+begin_src emacs-lisp
     (defvar my-expand-macro (kbd "C-c RET"))
   #+end_src


* Load common libraries
   These are general purpose libraries that can are used
   by different modes

   The libaries are loaded by the file 'modules/init-modules.org'
   #+begin_src emacs-lisp
     (when (file-newer-than-file-p (locate-user-emacs-file "modules/init-modules.org")
                                   (locate-user-emacs-file "modules/.compiled/init-modules.el"))
       (org-babel-tangle-file (locate-user-emacs-file "modules/init-modules.org")
                              (locate-user-emacs-file "modules/.compiled/init-modules.el")
                              "emacs-lisp"))
     
     (load-file (locate-user-emacs-file "modules/.compiled/init-modules.el"))
   #+end_src


* Setup language configurations
** Emacs lisp is needs to be configured specially
   #+begin_src emacs-lisp
     (defvar my-elisp-packages '(elisp-slime-nav 
                                 macrostep))       

     (my-install-packages my-elisp-packages)

     ;; ielm replaces the current window, stop it from doing so
     (defadvice ielm (before do-not-replace-this-window (&rest args))
       (select-window (split-window)))

     (defun my-emacs-lisp-config ()
       ;; Setup
       (elisp-slime-nav-mode +1)
       (eldoc-mode +1)

       (setq flycheck-emacs-lisp-load-path load-path)
       
       (when (not (string= (buffer-name) "*scratch*"))
         (flycheck-mode))

       (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
       (add-hook 'ielm-mode-hook 'ac-emacs-lisp-mode-setup)
       (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

       ;; Keybindings
       (local-set-key my-show-doc #'elisp-slime-nav-describe-elisp-thing-at-point)
       (local-set-key my-run-shell #'ielm)
       (local-set-key my-send-buffer #'eval-buffer)
       (local-set-key my-send-file #'load-file)
       (local-set-key my-send-region #'eval-region)
       (local-set-key my-expand-macro 'macrostep-expand))

     (add-hook 'emacs-lisp-mode-hook #'my-emacs-lisp-config)
   #+end_src

** Setup installation of external language modes
  #+begin_src emacs-lisp
    (my-auto-install-lang "\\.js\\'" 'js2-mode #'js2-mode)
    (my-auto-install-lang "\\.php\\'" 'php-mode #'php-mode)
    (my-auto-install-lang "\\.\\(scala\\|sbt\\)\\'" 'scala-mode2 #'scala-mode)
    (my-auto-install-lang "\\.ml[iylp]?" 'tuareg #'tuareg-mode)
    (my-auto-install-lang "\\.hs\\'" 'haskell-mode #'haskell-mode)
    (my-auto-install-lang "\\.\\(clj[sx]?\\|dtm\\|edn\\)\\'" 'clojure-mode #'clojure-mode)
    (my-auto-install-lang "\\.erl$" 'erlang #'erlang-mode)
    (my-auto-install-lang "\\.\\(sml\\|sig\\)\\'" 'sml-mode #'sml-mode)
    (unless (equal system-type 'windows-nt)
      (my-auto-install-lang "\\.jl\\'" 'ess (lambda ()
                                              (require 'ess-site)
                                              (julia-mode))))
    (my-auto-install-lang "\\.html\\'" 'web-mode #'web-mode)
    (my-auto-install-lang "\\.go\\'" 'go-mode #'go-mode)
    (my-auto-install-lang "\\.factor$" 'fuel #'factor-mode)
    (my-auto-install-lang "\\.json\\'" 'json-mode #'json-mode)
    (my-auto-install-lang "\\.\\(markdown\\|md\\)\\'" 'markdown-mode #'markdown-mode)
    (my-auto-install-lang "README\\'" 'markdown-mode #'markdown-mode)
    (my-auto-install-lang "\\.yaml\\'" 'yaml-mode #'yaml-mode)
    (my-auto-install-lang "httpd\\.conf\\'\\|srm\\.conf\\'\\|access\\.conf\\'\\|sites-\\(available\\|enabled\\)/\\|\\.htaccess\\'"
                   'apache-mode #'apache-mode)
    (my-auto-install-lang "\\.pip\\|requirements\\.txt\\'" 'pip-requirements #'pip-requirements-mode)
    (my-auto-install-lang "\\.dot\\'" 'graphviz-dot-mode #'graphviz-dot-mode)
  #+end_src

** Some extra auto-mode-alist entries
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.rkt\\'" . scheme-mode))
     (add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
   #+end_src

** Setup loading of language configuration when the language mode loads
   #+begin_src emacs-lisp
     (my-setup-lang 'python-mode-hook "python")
     (my-setup-lang 'js2-mode-hook "javascript")
     (my-setup-lang 'php-mode-hook "php")
     (my-setup-lang 'lisp-mode-hook "common-lisp")
     (my-setup-lang 'scheme-mode-hook "scheme")
     (my-setup-lang 'c-mode-hook "c" "c" "h")
     (my-setup-lang 'c++-mode-hook "c" "cpp" "hpp")
     (my-setup-lang 'css-mode-hook "css")
     (my-setup-lang 'scala-mode-hook "scala")
     (my-setup-lang 'tuareg-mode-hook "ocaml")
     (my-setup-lang 'go-mode-hook "go")
     (my-setup-lang 'erlang-mode-hook "erlang")
     (my-setup-lang 'factor-mode-hook "factor")
     (my-setup-lang 'json-mode-hook "json")
     (my-setup-lang 'markdown-mode-hook "markdown")
     (my-setup-lang 'sml-mode-hook "sml")
     (my-setup-lang 'clojure-mode-hook "clojure")
     (my-setup-lang 'web-mode-hook "html" "html")
     (my-setup-lang 'haskell-mode-hook "haskell")
     (my-setup-lang 'ruby-mode-hook "ruby")
     (my-setup-lang 'pip-requirements-mode-hook "pip")
   #+end_src

