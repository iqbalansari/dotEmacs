* Install required packages
  #+begin_src emacs-lisp
    (my-install-package 'elfeed)
  #+end_src


* Open current article in w3m in elfeed-search-mode
  Fallback to eww, if available or fallback to system browser
  #+begin_src emacs-lisp
    (defun my-elfeed-search-open-article-in-w3m ()
      (interactive)
      (let ((browse-url-browser-function (cond ((locate-library "w3m") #'w3m-browse-url)
                                               ((locate-library "eww") #'eww-browse-url)
                                               (t (progn (message "`w3m' not installed, falling back to system browser")
                                                         #'browse-url-default-browser)))))
        (elfeed-search-untag-all 'unread)
        (save-excursion
          (forward-line -1)
          (elfeed-search-browse-url))))
  #+end_src


* Open current article in w3m in elfeed-show mode
  Fallback to eww, if available or fallback to system browser
  #+begin_src emacs-lisp
    (defun my-elfeed-show-open-article-in-w3m ()
      (interactive)
      (if (elfeed-entry-link elfeed-show-entry)
          (cond ((locate-library "w3m") (w3m-browse-url (elfeed-entry-link elfeed-show-entry)))
                ((locate-library "eww") (eww-browse-url (elfeed-entry-link elfeed-show-entry)))
                (t (progn (message "`w3m' not installed, falling back to system browser")
                          (elfeed-show-visit))))
        (message "Not visiting an article!")))
  #+end_src


* Load the feeds from elfeed.org file
** Path to elfeed feeds file
   #+begin_src emacs-lisp
     (setq my-elfeed-file (locate-user-emacs-file "org/elfeed.org"))
   #+end_src

** Function to extract all links from an org file
   #+begin_src emacs-lisp
     (defun my-org-get-all-feeds (file)
       (with-temp-buffer
         (erase-buffer)
         (insert-file-contents file)
         (goto-char (point-min))

         (let (feeds)

           (while (re-search-forward org-plain-link-re nil t)
             (let ((link (match-string 0))
                   (tags (my-org-get-parents-tags)))

               (add-to-list 'feeds (if tags (append (list link) tags) link))))
           (nreverse feeds))))
   #+end_src

** Function to extract all tags for given org-element
   This returns the tags from all ancestors of given element
   #+begin_src emacs-lisp
     (defun my-org-get-parents-tags ()
       (mapcar #'intern
               (save-excursion
                 (let (tags)
                   (while (not (equal (org-back-to-heading t) t))
                     (setq tags (append tags (org-get-tags))))
                   tags))))
   #+end_src

** Function to import feeds from elfeed.org
   #+begin_src emacs-lisp 
     (defun my-import-elfeed-feeds ()
       (interactive)
       (let ((feeds (when (file-exists-p my-elfeed-file)
                      (my-org-get-all-feeds my-elfeed-file))))
         (setq elfeed-feeds feeds)
         (message (format "Imported %d feeds" (length feeds)))))
   #+end_src

** Import all feeds after init
   #+begin_src emacs-lisp
     (add-hook 'after-init-hook #'my-import-elfeed-feeds)
   #+end_src

** Re-import feeds on saving feeds file
   #+begin_src emacs-lisp
     (defun my-import-elfeed-feeds-maybe ()
       (when (and (eq major-mode 'org-mode)
                  buffer-file-name
                  (string= (file-truename my-elfeed-file)
                           (file-truename buffer-file-name)))
         (my-import-elfeed-feeds)))

     (add-hook 'after-save-hook #'my-import-elfeed-feeds-maybe)
   #+end_src

** Org capture template adding new feed sources
   #+begin_src emacs-lisp
     (add-to-list 'org-capture-templates (list "f"
                                               "Elfeed feed"
                                               'entry
                                               (list 'file my-elfeed-file)
                                               "* %? %^g\n  %(my-get-url-at-point-or-from-clipboard) - Added on %U\n\n"
                                               :empty-lines-after 2))
   #+end_src


* Store the database in org directory
   So that it is synced with rest of the files
   #+begin_src emacs-lisp
     (setq elfeed-db-directory (locate-user-emacs-file "org/elfeed"))
   #+end_src


* Keybinding
** Launch elfeed
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c N") #'elfeed)
  #+end_src

** Keybindings for elfeed-search mode
   #+begin_src emacs-lisp
     (eval-after-load "elfeed-search"
       '(progn (define-key elfeed-search-mode-map (kbd "l") #'my-elfeed-search-open-article-in-w3m)
               (define-key elfeed-search-mode-map (kbd "/") #'elfeed-search-live-filter)))
   #+end_src

** Keybindings for elfeed-show mode
   #+begin_src emacs-lisp
     (eval-after-load "elfeed-show"
       '(progn (define-key elfeed-show-mode-map (kbd "l") #'my-elfeed-show-open-article-in-w3m)
               (define-key elfeed-show-mode-map (kbd "/") #'elfeed-show-new-live-search)))
   #+end_src
