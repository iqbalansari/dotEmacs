* Install backup each save
  #+begin_src emacs-lisp
    (my-install-package 'backup-each-save)
  #+end_src


* Take a backup on each save
  #+begin_src emacs-lisp
    (add-hook 'after-save-hook 'backup-each-save)
  #+end_src


* Write backup files to own directory
  #+begin_src emacs-lisp
    (setq backup-directory-alist
          `(("." . ,(expand-file-name
                     (concat user-emacs-directory "backups")))))

    (setq auto-save-file-name-transforms
          `((".*" ,(concat user-emacs-directory "auto-save/") t)))
  #+end_src


* Make backups of files, even when they're in version control
  #+begin_src emacs-lisp
    (setq vc-make-backup-files t)
  #+end_src


* Always use copying to create backup files (don't clobber symlinks)
  #+begin_src emacs-lisp
    (setq backup-by-copying t)
  #+end_src


* Make numeric backup versions
  #+begin_src emacs-lisp
    (setq version-control t)
  #+end_src


* Number of oldest versions to keep when a new numbered backup is made
  #+begin_src emacs-lisp
    (setq kept-old-versions 0)
  #+end_src


* Number of newest versions to keep when a new numbered backup is made
  #+begin_src emacs-lisp
    (setq kept-new-versions 20)
  #+end_src


* Don't backup certain files
   #+begin_src emacs-lisp
     (defun starts-with-p (string1 string2)
       (string= (substring string1 0 (min (length string1) (length string2)))
                string2))

     (defun dont-backup-files-p (filename)
       (let ((filename-part (file-name-nondirectory filename)))
         (if (or (starts-with-p filename-part ".emacs_workgroups")
                 (starts-with-p filename-part "COMMIT_EDITMSG"))
             nil
           (normal-backup-enable-predicate filename))))

     (setq backup-enable-predicate 'dont-backup-files-p)
   #+end_src


* Delete excess backup files without asking
  #+begin_src emacs-lisp
    (setq delete-old-versions t)
  #+end_src
