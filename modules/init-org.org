* Install org-bullets
  #+begin_src emacs-lisp
    (my-install-packages '(org-bullets company-math))
  #+end_src


* Enable org bullets in org mode
  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook #'org-bullets-mode)
  #+end_src


* Custom TODO keywords and priority levels
  Copied from [[http://doc.norang.ca/org-mode.html#TodoKeywords]]
** Define some extra keywords
  #+begin_src emacs-lisp
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")
                  (sequence "UNREAD(u!)" "READING(r!)" "COMPLETED(f!)"))))
  #+end_src

** Colors for TODO keywords
   #+begin_src emacs-lisp
     (setq org-todo-keyword-faces
           (quote (("TODO" :foreground "red" :weight bold)
                   ("NEXT" :foreground "blue" :weight bold)
                   ("DONE" :foreground "forest green" :weight bold)
                   ("WAITING" :foreground "orange" :weight bold)
                   ("HOLD" :foreground "magenta" :weight bold)
                   ("CANCELLED" :foreground "forest green" :weight bold)
                   ("UNREAD" :foreground "red" :weight bold)
                   ("READING" :foreground "blue" :weight bold)
                   ("COMPLETED" :foreground "forest green" :weight bold))))
   #+end_src

** Custom task priorities
   #+begin_src emacs-lisp
     (setq org-default-priority ?E)
     (setq org-lowest-priority ?E)
   #+end_src


* Directory for org files
  #+begin_src emacs-lisp
    (setq org-directory (locate-user-emacs-file "org/"))
    (when (not (file-exists-p org-directory))
      (make-directory org-directory))
  #+end_src


* Fontify code blocks in org-src
   #+begin_src emacs-lisp
     (setq org-src-fontify-natively t)
   #+end_src


* Start flyspell in org mode buffers
  The value of ispell-program name is set in my-init.org
  #+begin_src emacs-lisp
    (when ispell-program-name
      (add-to-list 'org-mode-hook 'flyspell-mode))
  #+end_src


* Enable special behavior for Ctrl-a/e/k in headlines
  #+begin_src emacs-lisp
    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
  #+end_src


* Do not allow a parent to be marked DONE, if children are marked TODO
  #+begin_src emacs-lisp
    (setq org-enforce-todo-dependencies t)
  #+end_src


* Enable org-ditaa if ditaa is installed
  #+begin_src emacs-lisp
    (setq org-ditaa-jar-path (executable-find "ditaa"))

    (when org-ditaa-jar-path
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((ditaa . t))))
  #+end_src


* Org mode integration for graphviz
** Install graphviz-dot-mode
   #+begin_src emacs-lisp
     (when (executable-find "dot")
       (my-install-package 'graphviz-dot-mode))
   #+end_src

** Associate 'dot' extension with graphviz-dot-mode
  #+begin_src emacs-lisp
    (when (locate-library "graphviz-dot-mode") 
      (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot)))
  #+end_src

** Enable org-babel for graphviz
  #+begin_src emacs-lisp
    (when (executable-find "dot") 
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((dot . t))))
  #+end_src


* Enable company mode and company-math in org-mode files
  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook (lambda ()
                               (company-mode +1)
                               (make-variable-buffer-local 'company-backends)
                               (add-to-list 'company-backends 'company-math-symbols-unicode)))
  #+end_src


* Export backends that should always be available
  #+begin_src emacs-lisp
    (eval-after-load "org"
      '(progn (add-to-list 'org-export-backends 'md)
              (add-to-list 'org-export-backends 'odt)))
  #+end_src


* Keybinding to save edits in org-src mode
  #+begin_src emacs-lisp
    (eval-after-load 'org-src
      '(define-key org-src-mode-map "\C-c\C-c" #'org-edit-src-exit))
  #+end_src
