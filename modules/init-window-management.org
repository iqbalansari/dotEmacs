* Use switch-window for switching between windows
  #+begin_src emacs-lisp
    (el-get 'sync 'switch-window)
    (global-set-key (kbd "C-x o") 'switch-window)
  #+end_src


* Use qwerty shortcuts to switch windows
  #+begin_src emacs-lisp
    (setq switch-window-shortcut-style 'qwerty)
  #+end_src


* Switch to bar cursor type before invoking switch-window
  Box cursor doesn't look good in switch-window
  #+begin_src emacs-lisp
    (defadvice switch-window (around switch-to-bar-cursor)
      (let ((cursor-type nil))
        ad-do-it))
    
    (ad-activate 'switch-window)
  #+end_src


* Use default windmove bindings
  #+begin_src emacs-lisp
    (windmove-default-keybindings 'super)
  #+end_src


* Keybindings to resize the windows
  #+begin_src emacs-lisp
    (global-set-key
     (kbd "<C-S-up>") 'enlarge-window)
    (global-set-key
     (kbd "<C-S-down>") 'shrink-window)
    (global-set-key
     (kbd "<C-S-left>") 'enlarge-window-horizontally)
    (global-set-key
     (kbd "<C-S-right>") 'shrink-window-horizontally)
  #+end_src


* Keybinding to balance the windows
  #+begin_src emacs-lisp
    (global-set-key (kbd "<C-f10>") 'balance-windows)
  #+end_src


* Open current buffer in new frame
  #+begin_src emacs-lisp
    (defun detach-window ()
      "Close current window and re-open it in new frame."
      (interactive)
      (let ((current-buffer (window-buffer)))
        (delete-window)
        (select-frame (make-frame))
        (set-window-buffer (selected-window) current-buffer)))
  #+end_src


* Use desktop mode
** Restore just one buffer immediately
   #+begin_src emacs-lisp
     (setq desktop-restore-eager 1)
   #+end_src

** Do not save temporary buffers
   #+begin_src emacs-lisp
     (setq desktop-buffers-not-to-save  "\\(\\` \\|^\\*\\)")
   #+end_src

** Enable desktop mode
  #+begin_src emacs-lisp
    (desktop-save-mode 1)
  #+end_src

** Avoid stale locks on desktop file taken from [[http://www.emacswiki.org/emacs/DeskTop#toc4][emacswiki]]
   #+begin_src emacs-lisp
     (defun emacs-process-p (pid)
       "If pid is the process ID of an emacs process, return t, else nil.
     Also returns nil if pid is nil."
       (when pid
         (let ((attributes (process-attributes pid)) (cmd))
           (dolist (attr attributes)
             (if (string= "comm" (car attr))
                 (setq cmd (cdr attr))))
           (if (and cmd (or (string= "emacs" cmd) (string= "emacs.exe" cmd))) t))))
     
     (defadvice desktop-owner (after pry-from-cold-dead-hands activate)
       "Don't allow dead emacsen to own the desktop file."
       (when (not (emacs-process-p ad-return-value))
         (setq ad-return-value nil)))
   #+end_src


* Enable winner mode
  #+begin_src emacs-lisp
    (winner-mode 1)
  #+end_src
