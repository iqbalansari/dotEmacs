* Install readline-complete to get auto-complete working in term
  #+begin_src emacs-lisp
    (el-get 'sync 'readline-complete)
  #+end_src
  

* Several settings needed to make readline-complete work
  #+begin_src emacs-lisp
    (setq explicit-shell-file-name "bash")
    (setq explicit-bash-args '("-c" "export EMACS=; stty echo; bash"))
    (setq comint-process-echoes t)
  #+end_src
  

* Setup readline-complete
  #+begin_src emacs-lisp
    (require 'readline-complete)
    
    (add-to-list 'ac-modes 'shell-mode)
    (add-hook 'shell-mode-hook 'ac-rlc-setup-sources)
  #+end_src


* Set C-x as the prefix command rather than C-c also set keybindings to copy and yank in the term
  #+begin_src emacs-lisp
    (add-hook 'term-mode-hook
              (lambda ()
                ;; C-x is the prefix command, rather than C-c
                (term-set-escape-char ?\C-x)
                (define-key term-raw-map "\M-y" 'yank-pop)
                (define-key term-raw-map "\M-w" 'kill-ring-save)))
  #+end_src


* Various customizations picked up from [[http://snarfed.org/why_i_run_shells_inside_emacs][snarfed.org]]
** Always insert at the bottom
   #+begin_src emacs-lisp
     (setq comint-scroll-to-bottom-on-input t)
   #+end_src
** Always add output at the bottom
   #+begin_src emacs-lisp
     (setq comint-scroll-to-bottom-on-output nil)
   #+end_src

** Scroll to show max possible output
   #+begin_src emacs-lisp
     (setq comint-scroll-show-maximum-output t)
   #+end_src

** No duplicates in command history
   #+begin_src emacs-lisp
     (setq comint-input-ignoredups t)
   #+end_src

** Truncate buffers continuously
   #+begin_src emacs-lisp
     (add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
   #+end_src

** Make shell outputs read-only
   #+begin_src emacs-lisp
     (defun make-my-shell-output-read-only (text)
       "Add to comint-output-filter-functions to make stdout read only in my shells."
       (let ((inhibit-read-only t)
             (output-end (process-mark (get-buffer-process (current-buffer)))))
         (put-text-property comint-last-output-start output-end 'read-only t)))
     
     (add-hook 'comint-output-filter-functions 'make-my-shell-output-read-only)
   #+end_src

** Set pager to 'cat'
   #+begin_src emacs-lisp
     (setenv "PAGER" "cat")
   #+end_src

** Scroll conservatively in shells
   #+begin_src emacs-lisp
     (defun set-scroll-conservatively ()
       "Add to shell-mode-hook to prevent jump-scrolling on newlines in shell buffers."
       (set (make-local-variable 'scroll-conservatively) 10))
     
     (add-hook 'shell-mode-hook 'set-scroll-conservatively)
   #+end_src
