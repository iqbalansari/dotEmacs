* Utility function to display popup messages
  #+begin_src emacs-lisp
    (defvar iqbal-singleton-popup-displaying? nil)
    
    (defun iqbal-singleton-popup (popup-string)
      (unless iqbal-singleton-popup-displaying?
        (setq iqbal-singleton-popup-displaying? t)
        (condition-case nil
            (let* ((string (substring-no-properties popup-string))
                   (filled-string (popup-fill-string string nil popup-tip-max-width))
                   (width (car filled-string))
                   (lines (cdr filled-string))
                   (popup-instance (popup-create (point) width 100
                                                 :around t
                                                 :scroll-bar t
                                                 :face 'popup-tip-face)))
              (unwind-protect
                  (when (> (popup-width popup-instance) 0)                   ; not to be corrupted
                    (popup-set-list popup-instance lines)
                    (popup-draw popup-instance)
                    (setq iqbal-singleton-popup-instance popup-instance)
                    (clear-this-command-keys)
                    (push (read-event nil) unread-command-events))
                (popup-delete popup-instance)
                (setq iqbal-singleton-popup-displaying? nil)))
          (error (setq iqbal-singleton-popup-displaying? nil)))))
    
  #+end_src


* Code to speed up the loading of modules
  Loading all of the config files at the startup is expensive since 
  each file first converted from .org to .el files and then loaded 
  separately to overcome this we do the following 
  1) Convert the org mode files to el files 
  2) Combine their code in one file and load it
  
  Now at subsequent emacs startups we first check if any org
  file is newer then the compiled file, if so repeat step 1) and 2)
  This way the startup will be slow only when any of the org files
  are modified or there is some new org file, otherwise it will be
  faster since we load a single file
  #+begin_src emacs-lisp    
    (defvar iqbal-modules-dir "~/.emacs.d/modules/")
    (defvar iqbal-modules-compiled-dir (concat iqbal-modules-dir ".compiled/"))
    
    (defvar iqbal-tangled-modules (concat iqbal-modules-compiled-dir ".combined.el"))
    (defvar iqbal-previous-modules-file (concat iqbal-modules-compiled-dir ".previous-modules"))
    
    (defvar iqbal-previous-modules (when (file-exists-p iqbal-previous-modules-file)
                                     (read (iqbal-read-file iqbal-previous-modules-file))))
    
    (defun iqbal-get-module-org-file (module)
      (concat iqbal-modules-dir "init-" (symbol-name module) ".org"))
    
    (defun iqbal-get-module-el-file (module)
      (concat iqbal-modules-compiled-dir "init-" (symbol-name module) ".el"))
    
    (defun iqbal-get-changed-module-files (modules)
      (if (file-exists-p iqbal-tangled-modules)
          (remove-if-not (lambda (module)
                       (file-newer-than-file-p (iqbal-get-module-org-file module)
                                               (iqbal-get-module-el-file module)))
                     modules)
        modules))
    
    (defun iqbal-combine-modules (modules target)
      (iqbal-write-to-file target
                           (reduce (lambda (code module)
                                     (concat code
                                             (iqbal-read-file (iqbal-get-module-el-file module))))
                                     modules :initial-value ""))
      (byte-compile-file target))
    
    (defun iqbal-compile-modules (modules)
      (dolist (module modules)
        (org-babel-tangle-file (iqbal-get-module-org-file module)
                               (iqbal-get-module-el-file module)
                               "emacs-lisp")))
    
    (defun iqbal-regenerate-compiled-file-maybe (current-modules previous-modules target)
      (let ((stale-modules (iqbal-get-changed-module-files current-modules))
            (module-list-changed? (set-exclusive-or previous-modules current-modules)))
        (when (or stale-modules module-list-changed?)
          (iqbal-compile-modules stale-modules)
          (iqbal-combine-modules current-modules target))))
    
    (defun iqbal--compile-and-load-modules (current-modules)
      (iqbal-regenerate-compiled-file-maybe current-modules iqbal-previous-modules iqbal-tangled-modules)
      (iqbal-write-to-file iqbal-previous-modules-file
                           (prin1-to-string current-modules))
      (load-file iqbal-tangled-modules))
    
    (defun iqbal-remove-generated-files ()
      (interactive)
      (let* ((language-folders (remove-if-not #'file-directory-p
                                              (directory-files iqbal-langs-dir t "[^.]+"))))
        (delete-directory (concat iqbal-modules-dir "/.compiled/") t nil)
    
        (dolist (folder language-folders)
          (dolist (gen-file (directory-files folder t ".*\.el[c]?"))
            (delete-file gen-file)))))
    
    (defun iqbal-compile-and-load-modules ()
      (interactive)
      (unless (file-exists-p iqbal-modules-compiled-dir)
        (make-directory iqbal-modules-compiled-dir))
    
      (iqbal--compile-and-load-modules iqbal-modules-list))
  #+end_src


* List of modules to be loaded
  #+begin_src emacs-lisp
    (defvar iqbal-modules-list '(display auto-complete backup files buffers dired editing
                                         navigation search-replace ido parenthesis syntax-check 
                                         shell org utilities version-control yasnippet project
                                         window-management mail))
  #+end_src

  
* Load the modules
  #+begin_src emacs-lisp
    (iqbal-compile-and-load-modules)
  #+end_src
  
