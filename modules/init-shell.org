* Install projectile if not installed yet
  #+begin_src emacs-lisp
    (my-install-package 'projectile)
  #+end_src


* Install powershell mode on windows
  #+begin_src emacs-lisp
    (when (and (equal system-type 'windows-nt)
               (executable-find "powershell"))
      (my-install-package 'powershell))
  #+end_src


* Use shift-enter to accumulate output in comint mode
  #+begin_src emacs-lisp
    (eval-after-load "comint"
      '(progn (define-key comint-mode-map (kbd "C-c SPC") nil)
             (define-key comint-mode-map (kbd "<S-return>") #'comint-accumulate)))
  #+end_src


* Use C-S-w to quickly kill comint/compilation mode buffers
  #+begin_src emacs-lisp
    (defun my-kill-buffer-delete-window ()
      (interactive)
      (let ((kill-buffer-query-functions nil))
        (kill-buffer)
        (ignore-errors (delete-window))))

    (eval-after-load "comint"
      '(define-key comint-mode-map (kbd "C-S-w") #'my-kill-buffer-delete-window))

    (eval-after-load "compile"
      '(progn (define-key compilation-mode-map (kbd "C-S-w") #'my-kill-buffer-delete-window)
              (define-key compilation-minor-mode-map (kbd "C-S-w") #'my-kill-buffer-delete-window)))
  #+end_src


* Faster keybinding to switch between line and character mode in term
  #+begin_src emacs-lisp
    (defun my-toggle-term-mode ()
      (interactive)
      (if (term-in-line-mode)
          (progn (term-char-mode)
                 (message "Switched to char mode"))
        (term-line-mode)
        (message "Switched to line mode")))

    (eval-after-load "term"
      '(progn (define-key term-raw-map (kbd "C-`") 'my-toggle-term-mode)
              (define-key term-mode-map (kbd "C-`") 'my-toggle-term-mode)))
  #+end_src


* Set C-x as the prefix command rather than C-c
  #+begin_src emacs-lisp
    (eval-after-load 'term
      '(term-set-escape-char ?\C-x))
  #+end_src


* Set keybindings for undo in the term
  #+begin_src emacs-lisp
    (eval-after-load 'term
      '(progn (define-key term-raw-map (kbd "C-/") (lambda () (interactive) (term-send-raw-string (kbd "C-_"))))))
  #+end_src


* Remap ctrl-arrow keys in term mode to move buffer if buffer-move is installed
  #+begin_src emacs-lisp
    (defun my-enable-buf-move-term ()
      (define-key term-raw-map (kbd "C-<left>") #'buf-move-left)
      (define-key term-raw-map (kbd "C-<right>") #'buf-move-right)
      (define-key term-raw-map (kbd "C-<up>") #'buf-move-up)
      (define-key term-raw-map (kbd "C-<down>") #'buf-move-down))

    (eval-after-load "buffer-move"
      '(add-hook 'term-mode-hook #'my-enable-buf-move-term))
  #+end_src


* Remap shift-arrow keys in term mode to select window if windmove is being used
  #+begin_src emacs-lisp
    (defun my-enable-windmove-term ()
      (define-key term-raw-map (kbd "<S-left>") #'windmove-left)
      (define-key term-raw-map (kbd "<S-right>") #'windmove-right)
      (define-key term-raw-map (kbd "<S-up>") #'windmove-up)
      (define-key term-raw-map (kbd "<S-down>") #'windmove-down))

    (eval-after-load "windmove"
      '(add-hook 'term-mode-hook #'my-enable-windmove-term))
  #+end_src


* Keybinding to facilitate copying region in term-mode
** A simple function that executes the command bound to
   the key in global-map if region is active otherwise
   sends the last keys to the terminal emulator
  #+begin_src emacs-lisp
    (defun my-execute-command-if-region-or-send-raw (&optional meta?)
      (interactive)
      (let* ((keys (this-single-command-keys))
             (command (lookup-key global-map keys)))
        (cond ((and (region-active-p) command)
               (call-interactively command))
              (meta?  (term-send-raw-meta))
              (t (term-send-raw)))))

    (defun my-execute-command-if-region-or-send-raw-meta ()
      (interactive)
      (my-execute-command-if-region-or-send-raw t))
  #+end_src

** Capture C-n, C-p, C-a, C-e, M-< and M-> is region is active or send
   raw keys to the terminal
   #+begin_src emacs-lisp
     (eval-after-load 'term
       '(progn (define-key term-raw-map "\C-n" 'my-execute-command-if-region-or-send-raw)
               (define-key term-raw-map "\C-p" 'my-execute-command-if-region-or-send-raw)
               (define-key term-raw-map "\C-a" 'my-execute-command-if-region-or-send-raw)
               (define-key term-raw-map "\C-e" 'my-execute-command-if-region-or-send-raw)
               (define-key term-raw-map "\C-w" 'my-execute-command-if-region-or-send-raw)
               (define-key term-raw-map "\M-w" 'my-execute-command-if-region-or-send-raw-meta)
               (define-key term-raw-map "\M-<" 'my-execute-command-if-region-or-send-raw-meta)
               (define-key term-raw-map "\M->" 'my-execute-command-if-region-or-send-raw-meta)))
   #+end_src


* Delete the window when shell is killed
  #+begin_src emacs-lisp
    (defadvice term-handle-exit (after term-kill-buffer-on-exit activate)
      (my-kill-term-delete-window))
  #+end_src


* Making shift-tab work with term-mode
  #+begin_src emacs-lisp
    (defun my-term-send-backtab ()
      "Send backtab to the term process"
      (interactive)
      (term-send-raw-string (kbd "\033[Z")))

    (eval-after-load 'term
      '(define-key term-raw-map (kbd "<backtab>") 'my-term-send-backtab))
  #+end_src


* Yasnippet breaks tab completion in term-mode disable it
  #+begin_src emacs-lisp
    (add-hook 'term-mode-hook (lambda ()
                                (yas-minor-mode -1)
                                (toggle-truncate-lines 1)))
  #+end_src


* Disable hl-line-mode in term buffer
  Need to set hl-line-range-function function since (hl-line-mode -1)
  isn't working
  #+begin_src emacs-lisp
    (defun my-hide-hl-line ()
      (make-local-variable 'hl-line-range-function)
      (setq hl-line-range-function (lambda () nil)))

    (add-hook 'term-mode-hook #'my-hide-hl-line)
  #+end_src


* Better colors for term mode
  #+begin_src emacs-lisp
    (eval-after-load 'term
      '(progn (set-face-attribute 'term-color-blue nil :foreground "#1e90ff")
             (set-face-attribute 'term-color-red nil :foreground "#ee5c42")
             (set-face-attribute 'term-color-cyan nil :foreground "#8cd0d3")
             (set-face-attribute 'term-color-green nil :foreground "#00ff00")))
  #+end_src


* Convenience functions to start term buffers
** Use zsh or bash if available else fallback to eshell
   On windows use powershell if available
   #+begin_src emacs-lisp
     (defvar my-preferred-shell (or (executable-find "zsh")
                                    (executable-find "bash")
                                    #'eshell))

     (when (equal system-type 'windows-nt)
       (setq my-preferred-shell (if (locate-library "powershell") #'powershell #'eshell)))

     (defun my-is-shell-mode (mode)
       (or (eq mode 'term-mode)
           (eq mode 'eshell-mode)
           (eq mode 'shell-mode)))
   #+end_src

** Mapping shells to project folders
   Try to find root of project using projectile, if projectile fails to find
   project root use 'global' project which is common for all non-project
   buffers. 

   A hashmap is used to store the mapping between projects and corresponding
   shells. If a project root is found try switching to a shell in from the list
   of shells associated with project (found by looking up the hashmap) else if a
   shell does not already exist for it, create a shell for the project and store
   it in the hashmap.

   #+begin_src emacs-lisp
     (defvar my-shell-to-project-map (make-hash-table :test 'equal))

     (defun my-get-project-root ()
       (or (ignore-errors (projectile-project-root)) "global"))

     (defun my-get-live-shell-for-project (project-root)
       "Return the first live shell for a project"
       ;; Clean up any killed shells
       (puthash project-root
                (remove-if-not (lambda (buffer)
                                 (buffer-live-p buffer))
                               (gethash project-root my-shell-to-project-map))
                my-shell-to-project-map)

       ;; Return the first live shell
       (car (gethash project-root my-shell-to-project-map)))    

     (defun my-create-new-shell-and-store (project-root)
       "Create a new shell for the project and store it in the global hash"
       (puthash project-root
                (cons (my-create-shell-buffer project-root)
                      (gethash project-root my-shell-to-project-map))
                my-shell-to-project-map))
   #+end_src

** Functions for starting shells
  #+begin_src emacs-lisp
    (defun my-start-non-term-shell (launcher shell-name)
      (funcall launcher)
      (rename-buffer shell-name t)
      (current-buffer))

    (defun my-create-shell-buffer (&optional name)
      "Create a new shell, if my prefered shell is set
      start that shell otherwise start eshell, rename
      the shell using login name, system name and name
      if given"
      (let ((shell-name (concat (user-real-login-name) "@" (system-name)
                                (when name
                                  (concat " - " name)))))

        ;; If it is a string then it should point to the shell to start using ansi-term
        (if (stringp my-preferred-shell)
            (ansi-term my-preferred-shell shell-name)
          (my-start-non-term-shell my-preferred-shell shell-name))))

    (defun my-open-shell-for-project (project-root &optional force?)
      "Open a shell for the project, switches to existing shell if
       there already exists a shell for the project and force? is nil
       otherwise create a new shell"
      (let ((shell (my-get-live-shell-for-project project-root)))
        (cond ((and shell (not force?))
               (message "Switching to existing shell")

               ;; Delete window in current frame containing the shell
               (when (get-buffer-window shell)
                 (delete-window (get-buffer-window shell)))
               
               (switch-to-buffer shell))
              (force? (message "Creating new shell")
                      (my-create-new-shell-and-store project-root))
              (t (message "No associated shell found! Creating new shell")
                 (my-create-new-shell-and-store project-root)))))

    (defun my-start-shell (&optional direction)
      (interactive)
      (let ((existing-window (when direction (window-in-direction direction))))
        (if (and existing-window
                 (member (window-buffer existing-window)
                         (gethash (my-get-project-root) my-shell-to-project-map))
                 (my-is-shell-mode (with-current-buffer (window-buffer existing-window)
                                     major-mode)))
            (select-window existing-window)
          (when direction (select-window (split-window nil nil direction)))
          (my-open-shell-for-project (my-get-project-root)
                                     (my-is-shell-mode major-mode)))))

    (defun my-split-window-below-start-terminal ()
      (interactive)
      (my-start-shell 'below))

    (defun my-split-window-right-start-terminal ()
      (interactive)
      (my-start-shell 'right))
  #+end_src

** Functions for killing shell buffers
   These functions kill the shell buffer as well as delete the window containing
   it
   #+begin_src emacs-lisp
     (defun my-kill-term-buffer ()
       (let ((kill-buffer-query-functions nil)
             (buffer-windows (get-buffer-window-list (current-buffer) nil t)))

         ;; Delete all windows with current buffer
         (dolist (window buffer-windows)
           (unless (equal window (selected-window))
             (delete-window window)))

         ;; Cleanup current window
         (kill-buffer)
         (unless (= 1 (length (window-list)))
           (delete-window))))    

     (defun my-kill-term-delete-window ()
       (interactive)
       (if (my-is-shell-mode major-mode)
           (my-kill-term-buffer)
         (message "Not in a shell")))
   #+end_src

** Keybindings
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-\\") #'my-split-window-below-start-terminal)
     (global-set-key (kbd "C-|") #'my-split-window-right-start-terminal)
     (global-set-key (kbd "C-S-t") #'my-start-shell)
     (global-set-key (kbd "C-S-w") #'my-kill-term-delete-window)
     (eval-after-load "term"
       '(progn (define-key term-raw-map (kbd "C-|") #'my-split-window-right-start-terminal)
               (define-key term-raw-map (kbd "C-\\") #'my-split-window-below-start-terminal)))
   #+end_src


* Various customizations picked up from [[http://snarfed.org/why_i_run_shells_inside_emacs][snarfed.org]]
** Always add output at the bottom
   #+begin_src emacs-lisp
     (setq comint-scroll-to-bottom-on-output nil)
   #+end_src

** No duplicates in command history
   #+begin_src emacs-lisp
     (setq comint-input-ignoredups t)
   #+end_src

** Truncate buffers continuously
   #+begin_src emacs-lisp
     (add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
   #+end_src

** Set pager to 'cat'
   #+begin_src emacs-lisp
     (setenv "PAGER" "cat")
   #+end_src

** Scroll conservatively in shells
   #+begin_src emacs-lisp
     (defun set-scroll-conservatively ()
       "Add to shell-mode-hook to prevent jump-scrolling on newlines in shell buffers."
       (set (make-local-variable 'scroll-conservatively) 10))

     (add-hook 'shell-mode-hook 'set-scroll-conservatively)
   #+end_src


* Few useful tips from wikiemacs
** Make URLs clickable
   #+begin_src emacs-lisp
     (add-hook 'shell-mode-hook 'goto-address-mode)
     (add-hook 'term-mode-hook 'goto-address-mode)
   #+end_src
