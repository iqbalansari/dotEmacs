* Faster keybinding to switch between line and character mode in term
  #+begin_src emacs-lisp
    (defun iqbal-toggle-term-mode ()
      (interactive)
      (if (term-in-line-mode)
          (progn (term-char-mode)
                 (message "Switched to char mode"))
        (term-line-mode)
        (message "Switched to line mode")))
    
    (eval-after-load "term"
      '(progn (define-key term-raw-map (kbd "C-`") 'iqbal-toggle-term-mode)
              (define-key term-mode-map (kbd "C-`") 'iqbal-toggle-term-mode)))
  #+end_src


* Set C-x as the prefix command rather than C-c
  #+begin_src emacs-lisp
    (eval-after-load 'term
      '(term-set-escape-char ?\C-x))
  #+end_src


* Set keybindings to copy, yank and undo in the term
  #+begin_src emacs-lisp
    (eval-after-load 'term
      '(progn (define-key term-raw-map "\C-y" 'term-paste)
              (define-key term-raw-map "\M-w" 'copy-line-or-region)
              (define-key term-raw-map "\C-w" 'cut-line-or-region)
              (define-key term-raw-map (kbd "C-/") (lambda () (interactive) (term-send-raw-string (kbd "C-_"))))))
  #+end_src


* Disable C-<right>, C-<left> in term
  #+begin_src emacs-lisp
    (eval-after-load 'term
      '(progn (define-key term-raw-map (kbd "C-<left>") (lambda () (interactive)))
              (define-key term-raw-map (kbd "C-<right>") (lambda () (interactive)))))
  #+end_src


* Keybinding to facilitate copying region in term-mode
** A simple function that executes the command bound to
   the key in global-map if region is active otherwise
   sends the last keys to the terminal emulator
  #+begin_src emacs-lisp
    (defun iqbal-execute-command-or-send-raw (&optional meta?)
      (interactive)
      (let* ((keys (this-single-command-keys))
             (command (lookup-key global-map keys)))
        (cond ((and (region-active-p) command)
               (call-interactively command))
              (meta?  (term-send-raw-meta))
              (t (term-send-raw)))))
    
    (defun iqbal-execute-command-or-send-raw-meta ()
      (interactive)
      (iqbal-execute-command-or-send-raw t))
  #+end_src

** Capture C-n, C-p, C-a, C-e, M-< and M-> is region is active or send
   raw keys to the terminal
   #+begin_src emacs-lisp
     (eval-after-load 'term
       '(progn (define-key term-raw-map "\C-n" 'iqbal-execute-command-or-send-raw)
               (define-key term-raw-map "\C-p" 'iqbal-execute-command-or-send-raw)
               (define-key term-raw-map "\C-a" 'iqbal-execute-command-or-send-raw)
               (define-key term-raw-map "\C-e" 'iqbal-execute-command-or-send-raw)
               (define-key term-raw-map "\M-<" 'iqbal-execute-command-or-send-raw-meta)
               (define-key term-raw-map "\M->" 'iqbal-execute-command-or-send-raw-meta)))
   #+end_src


* Making shift-tab work with term-mode
  #+begin_src emacs-lisp
    (defun iqbal-term-send-backtab ()
      "Send backtab to the term process"
      (interactive)
      (term-send-raw-string (kbd "\033[Z")))
    
    (eval-after-load 'term
      '(define-key term-raw-map (kbd "<backtab>") 'iqbal-term-send-backtab))
  #+end_src


* Yasnippet breaks tab completion in term-mode disable it, also disable hl-line-mode
  #+begin_src emacs-lisp
    (add-hook 'term-mode-hook (lambda () 
                                (yas-minor-mode -1)
                                (toggle-truncate-lines 1)
                                (hl-line-mode -1)))
  #+end_src


* Better colors for term mode
  #+begin_src emacs-lisp
    (eval-after-load 'term
      '(progn (set-face-attribute 'term-color-blue nil :foreground "#1e90ff")
             (set-face-attribute 'term-color-red nil :foreground "#ee5c42")
             (set-face-attribute 'term-color-cyan nil :foreground "#8cd0d3")
             (set-face-attribute 'term-color-green nil :foreground "#00ff00")))
  #+end_src


* Convenience functions to start term buffers
** Declaration of functions
  #+begin_src emacs-lisp
    (defvar iqbal-preferred-shell (or (executable-find "zsh")
                                   (executable-find "bash")))
    
    (defun iqbal-start-preferred-shell (&optional eshell?)
      (if (and iqbal-preferred-shell
               (not eshell?))
          (ansi-term iqbal-preferred-shell)
        (eshell)
        (rename-buffer (concat (user-real-login-name) "@" (system-name)) t)))
    
    (defun iqbal-split-window-below-start-terminal ()
      (interactive)
      (select-window (split-window-below))
      (iqbal-start-preferred-shell current-prefix-arg))
    
    (defun iqbal-split-window-right-start-terminal ()
      (interactive)
      (select-window (split-window-right))
      (iqbal-start-preferred-shell current-prefix-arg))
    
    (defun iqbal-start-terminal ()
      (interactive)
      (iqbal-start-preferred-shell current-prefix-arg))
    
    (defun iqbal-kill-term-buffer ()
      (let ((kill-buffer-query-functions nil)
            (number-of-windows (length (window-list))))
        (kill-buffer)
        (unless (equal number-of-windows 1)
          (delete-window))))
    
    (defun iqbal-kill-term-delete-window ()
      (interactive)
      (if (or (eq major-mode 'term-mode)
              (eq major-mode 'eshell-mode))
          (iqbal-kill-term-buffer)
        (message "Not in a shell")))
  #+end_src

** Keybindings 
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-\\") 'iqbal-split-window-below-start-terminal)
     (global-set-key (kbd "C-|") 'iqbal-split-window-right-start-terminal)
     (global-set-key (kbd "C-S-w") 'iqbal-kill-term-delete-window)
     (global-set-key (kbd "C-S-t") 'iqbal-start-terminal)
     (eval-after-load "term"
       '(define-key term-raw-map (kbd "C-\\") 'iqbal-split-window-below-start-terminal))
   #+end_src


* Various customizations picked up from [[http://snarfed.org/why_i_run_shells_inside_emacs][snarfed.org]]
** Always add output at the bottom
   #+begin_src emacs-lisp
     (setq comint-scroll-to-bottom-on-output nil)
   #+end_src

** No duplicates in command history
   #+begin_src emacs-lisp
     (setq comint-input-ignoredups t)
   #+end_src

** Truncate buffers continuously
   #+begin_src emacs-lisp
     (add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
   #+end_src

** Set pager to 'cat'
   #+begin_src emacs-lisp
     (setenv "PAGER" "cat")
   #+end_src

** Scroll conservatively in shells
   #+begin_src emacs-lisp
     (defun set-scroll-conservatively ()
       "Add to shell-mode-hook to prevent jump-scrolling on newlines in shell buffers."
       (set (make-local-variable 'scroll-conservatively) 10))

     (add-hook 'shell-mode-hook 'set-scroll-conservatively)
   #+end_src


* Few useful tips from wikiemacs
** Make URLs clickable
   #+begin_src emacs-lisp
     (add-hook 'shell-mode-hook 'goto-address-mode)
     (add-hook 'term-mode-hook 'goto-address-mode)
   #+end_src

