* Open a file using sudo
  These were taken from [[https://github.com/fniessen/emacs-leuven][emacs-leuven]]
  #+begin_src emacs-lisp
    (defun iqbal-find-file-sudo-header-warning ()
      "*Display a warning in header line of the current buffer."
      (let* ((warning "WARNING: EDITING FILE WITH ROOT PRIVILEGES!")
             (space (+ 6 (- (frame-width) (length warning))))
             (bracket (make-string (/ space 2) ?-))
             (warning (concat bracket warning bracket)))
        (setq header-line-format
              (propertize warning 'face 'header-line))))
    
    (defun iqbal-find-file-sudo (filename)
      "Open FILENAME with root privileges."
      (interactive "F")
      (set-buffer (find-file (concat "/sudo::" filename)))
      (iqbal-find-file-sudo-header-warning))
  #+end_src


* Open current file in sudo
  #+begin_src emacs-lisp
    (defun iqbal-sudo-open-this-file ()
      (interactive)
      (if (buffer-file-name)
          (iqbal-find-file-sudo (buffer-file-name))
        (message "Current buffer is not visiting a file")))
  #+end_src


* Keybinding to save current file's name to kill-ring
  #+begin_src emacs-lisp 
    (defun iqbal-copy-file-path (arg)
      "With prefix argument copy the name of current buffer
    Else if we are in dired mode copy the path to directory,
    Otherwise copy the path to the file the current buffer is
    visiting"
      (interactive "P")
      (let (kill-text what)
        (cond 
         (current-prefix-arg (setq kill-text (buffer-name))
                             (setq what " buffer's name"))
         ((eq major-mode 'dired-mode) (setq kill-text (expand-file-name default-directory)) (setq what " directory's path"))
         ((buffer-file-name) (setq kill-text (buffer-file-name)) (setq what " file's path"))
         (t (setq kill-text (buffer-name))
            (setq what " buffer's name")))
        (when kill-text
          (kill-new kill-text)
          (message (concat "Copied" what)))))
    
    (global-set-key (kbd "C-c f") 'iqbal-copy-file-path)
  #+end_src


* Function to rename current buffer and associated file taken from
  [[http://whattheemacsd.com/file-defuns.el-01.html][whattheemacsd]].
  #+begin_src emacs-lisp
    (defun rename-current-buffer-file ()
      "Renames current buffer and file it is visiting."
      (interactive)
      (let ((name (buffer-name))
            (filename (buffer-file-name)))
        (if (not (and filename (file-exists-p filename)))
            (error "Buffer '%s' is not visiting a file!" name)
          (let ((new-name (read-file-name "New name: " filename)))
            (if (get-buffer new-name)
                (error "A buffer named '%s' already exists!" new-name)
              (rename-file filename new-name 1)
              (rename-buffer new-name)
              (set-visited-file-name new-name)
              (set-buffer-modified-p nil)
              (message "File '%s' successfully renamed to '%s'"
                       name (file-name-nondirectory new-name)))))))
    
    (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
  #+end_src


* Function to delete current buffer and its associated file
  #+begin_src emacs-lisp
    (defun delete-file-and-buffer ()
      "Kill the current buffer and deletes the file it is visiting."
      (interactive)
      (let* ((filename (buffer-file-name))
             (delete-confirmed? (y-or-n-p (format "Are you sure you want to delete %s?" filename))))
        (when (and filename delete-confirmed?)
          (if (vc-backend filename)
              (vc-delete-file filename)
            (progn
              (delete-file filename)
              (message "Deleted file %s" filename)
              (kill-buffer))))))
  #+end_src
