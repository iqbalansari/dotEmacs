* Replace the current expression with the result of its evaluation
  #+begin_src emacs-lisp
    (defun eval-and-replace ()
      "Replace the preceding sexp with its value."
      (interactive)
      (backward-kill-sexp)
      (condition-case nil
          (prin1 (eval (read (current-kill 0)))
                 (current-buffer))
        (error (message "Invalid expression")
               (insert (current-kill 0)))))
    
    (global-set-key (kbd "C-c e") 'eval-and-replace)
  #+end_src
  

* Keybinding for starting proced
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-p") 'proced)
  #+end_src

  
* Cleanup whitespace in the buffer
  #+begin_src emacs-lisp
    (defun cleanup-buffer-safe ()
      "Perform a bunch of safe operations on the whitespace content of a buffer.
    Does not indent buffer, because it is used for a before-save-hook, and that
    might be bad."
      (interactive)
      (untabify (point-min) (point-max))
      (delete-trailing-whitespace)
      (set-buffer-file-coding-system 'utf-8))
  #+end_src
  
 
* Convert buffer from DOS end-of-lines to Unix end-of-lines and vice versa
  #+begin_src emacs-lisp
    (defun dos-to-unix ()
      "Cut all visible ^M from the current buffer."
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\r" nil t)
          (replace-match ""))))
    
    (defun unix-to-dos ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\n" nil t)
          (replace-match "\r\n"))))
  #+end_src


* RE Builder configurations
  #+begin_src emacs-lisp
    (load "re-builder")
    (setq reb-re-syntax 'string)
  #+end_src


* Save minibuffer history across sessions
  #+begin_src emacs-lisp
    (savehist-mode 1)
  #+end_src 


* Backup walker traverses versioned backups, showing incremental diffs

  #+begin_src emacs-lisp
    (el-get 'sync 'backup-walker)
    (load "backup-walker")
  #+end_src
  

* Wgrep allows modifying the grep buffer and apply the changes to the files

  #+begin_src emacs-lisp
    (el-get 'sync 'emacs-wgrep)
    (load "wgrep")
    (setq wgrep-auto-save-buffer t)
    (setq wgrep-enable-key "e")
  #+end_src


* Replace words in parallel taken from [[http://stackoverflow.com/questions/2588277/how-can-i-swap-or-replace-multiple-strings-in-code-at-the-same-time][stackoverflow]]

  #+begin_src emacs-lisp 
    (load "cl")
    (defun parallel-query-replace (plist &optional delimited start end)
      "Replace every occurrence of the (2n)th token of PLIST in
    buffer with the (2n+1)th token; if only two tokens are provided,
    replace them with each other (ie, swap them).
    
    If optional second argument DELIMITED is nil, match words
    according to syntax-table; otherwise match symbols.
    
    When called interactively, PLIST is input as space separated
    tokens, and DELIMITED as prefix arg."
      (interactive
       `(,(loop with input = (read-from-minibuffer "Replace: ")
                with limit = (length input)
                for  j = 0 then i
                for (item . i) = (read-from-string input j)
                collect (prin1-to-string item t) until (<= limit i))
         ,current-prefix-arg
         ,@(if (use-region-p) `(,(region-beginning) ,(region-end)))))
      (let* ((alist (cond ((= (length plist) 2) (list plist (reverse plist)))
                          ((loop for (key val . tail) on plist by #'cddr
                                 collect (list (prin1-to-string key t) val)))))
             (matcher (regexp-opt (mapcar #'car alist)
                                  (if delimited 'words 'symbols)))
             (to-spec `(replace-eval-replacement replace-quote
                                                 (cadr (assoc-string (match-string 0) ',alist
                                                                     case-fold-search)))))
        (query-replace-regexp matcher to-spec nil start end)))
  #+end_src
  

* Seamlessly create, edit, remove boxes
  #+begin_src emacs-lisp
    (el-get 'sync 'rebox2)
    (setq rebox-style-loop '(24 16))
    (load "rebox2")
    (global-set-key (kbd "C-c q") 'rebox-dwim)
    (global-set-key (kbd "C-c Q") 'rebox-cycle)
  #+end_src
  

* Package for transposing, swapping windows
  #+begin_src emacs-lisp
    (el-get 'sync 'transpose-frame)
    (load "transpose-frame")
  #+end_src
  

* Quickly insert some dummy text
  #+begin_src emacs-lisp
    (el-get 'sync 'lorem-ipsum)
  #+end_src


* mag-menu allows to quickly create magit like menus
  #+begin_src emacs-lisp
    (el-get 'sync 'mag-menu)
    (load "mag-menu")
  #+end_src


* inf-mongo for interacting with mongo
  #+begin_src emacs-lisp
    (el-get 'sync 'inf-mongo)
  #+end_src


* Start edit-server this is used by 'Edit with Emacs' chrome extension
  #+begin_src emacs-lisp
    (el-get 'sync 'edit-server)
    (edit-server-start t)
  #+end_src


* Start emacs-server
  #+begin_src emacs-lisp 
    (server-start)
  #+end_src


* Use 'C-h C-a' as a entry point to starting various types of apropos
  #+begin_src emacs-lisp 
    (setq apropos-do-all t)
    (global-set-key (kbd "C-h a") 'apropos-command)
    (define-prefix-command 'Apropos-Prefix nil "Apropos (a,d,f,l,v,C-v)")
    (global-set-key (kbd "C-h C-a") 'Apropos-Prefix)
    (define-key Apropos-Prefix (kbd "a")   'apropos)
    (define-key Apropos-Prefix (kbd "C-a") 'apropos)
    (define-key Apropos-Prefix (kbd "d")   'apropos-documentation)
    (define-key Apropos-Prefix (kbd "f")   'apropos-command)
    (define-key Apropos-Prefix (kbd "l")   'apropos-library)
    (define-key Apropos-Prefix (kbd "v")   'apropos-variable)
    (define-key Apropos-Prefix (kbd "C-v") 'apropos-value)
  #+end_src


* Do not delete files directly
  #+begin_src emacs-lisp
    (setq delete-by-moving-to-trash t)
  #+end_src


* Configurations for ediff
  #+begin_src emacs-lisp
    (setq ediff-diff-options "-w")
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  #+end_src


* Prodigy for managing external processes
  #+begin_src emacs-lisp
    (el-get 'sync 'prodigy)
    
    (prodigy-define-service
      :name "web2py dev instance"
      :command "python"
      :args '("web2py.py" "-a" "admin")
      :cwd "/home/iqbal/workspace/web2py/"
      :tags '(work)
      :kill-signal 'sigkill
      :kill-process-buffer-on-stop t)
  #+end_src
