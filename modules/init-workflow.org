* Install org-projectile
  Useful for capturing project specific TODOs
  #+begin_src emacs-lisp
    (my-install-package 'org-projectile)
  #+end_src


* Configuration for taking notes
** Install deft for managing notes
  #+begin_src emacs-lisp
    (my-install-package 'deft)
  #+end_src

** Path to notes directory
  #+begin_src emacs-lisp
    (defvar my-notes-dir (locate-user-emacs-file "org/notes/"))

    (unless (file-exists-p my-notes-dir)
      (make-directory my-notes-dir t))
  #+end_src

** Use org mode files for taking notes
   #+begin_src emacs-lisp
     (setq deft-extension "org")    
     (setq deft-text-mode 'org-mode)
   #+end_src

** Directory for notes folder
  #+begin_src emacs-lisp
    (setq deft-directory my-notes-dir)
  #+end_src

** Use filename as title in deft
   #+begin_src emacs-lisp
     (setq deft-use-filename-as-title t)
   #+end_src


* Configurations for emacs diary
** Store diary file in org folder
  #+begin_src emacs-lisp
    (setq diary-file (locate-user-emacs-file "org/diary"))
  #+end_src

** Let diary entries be included in agenda buffer
  #+begin_src emacs-lisp
    (setq org-agenda-include-diary t)
  #+end_src


* Enable notifications for appointments
** Do not show diary on initial appt setup
   #+begin_src emacs-lisp
     (setq appt-display-diary nil)
   #+end_src

** Warn 15 min in advance
  #+begin_src emacs-lisp
    (setq appt-message-warning-time 15)
  #+end_src

** Show remaining time in the modeline
   #+begin_src emacs-lisp
     (setq appt-display-mode-line t)
   #+end_src

** Show notification in a separate window
   #+begin_src emacs-lisp
     (setq appt-display-format 'window)
   #+end_src

** Enable appt and activate appointments found in org-agenda files
   #+begin_src emacs-lisp
     (defun my-appt-activate ()
       "(Re)initialize appt, also add agenda items to appt"
       (interactive)
       (setq appt-time-msg-list nil)
       (appt-activate +1)
       (org-agenda-to-appt))

     (add-hook 'after-init-hook #'my-appt-activate)

     (display-time)
   #+end_src

** Reinitialize appt on finishing capture and displaying agenda
   #+begin_src emacs-lisp
     (add-hook 'org-capture-after-finalize-hook #'my-appt-activate)
     (add-hook 'org-agenda-finalize-hook #'my-appt-activate)
   #+end_src

** Refresh appt at midnights
   #+begin_src emacs-lisp
     (run-at-time "24:01" nil #'my-appt-activate)
   #+end_src


* Configurations for org-agenda
** Enable org-habits
   #+begin_src emacs-lisp
     (load "org-habit")
   #+end_src

** Path to default org-captured file
  #+begin_src emacs-lisp
    (setq org-default-notes-file (concat my-notes-dir "/captured.org"))
  #+end_src

** The org agenda files
*** Org agenda files will stored in ~/.emacs.d/org/agenda/
   #+begin_src emacs-lisp
     (defvar my-org-agenda-dir (locate-user-emacs-file "org/agenda/"))

     (unless (file-exists-p my-org-agenda-dir)
       (make-directory my-org-agenda-dir t))
   #+end_src

*** Path to org-projectile todo file
   #+begin_src emacs-lisp
     (setq org-projectile:projects-file
           (concat my-org-agenda-dir "projects.org"))
   #+end_src

*** Any files in org folder will be added to agenda files
  #+begin_src emacs-lisp
    (setq org-agenda-files (list my-org-agenda-dir))
  #+end_src

** Add a note when task is marked as DONE
  #+begin_src emacs-lisp
    (setq org-log-done 'note)
  #+end_src

** `q` should bury agenda rather then killing it
   #+begin_src emacs-lisp
     (setq org-agenda-sticky t)
   #+end_src

** Ignore scheduled items or deadlines if they have been marked 'DONE'
   #+begin_src emacs-lisp
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-skip-scheduled-if-done t)
   #+end_src


* Org capture templates
** Helper functions
*** Get url at point where org capture was called
    We need to switch to previous buffer since, the function is executed in
    context of org-capture buffer, not the buffer where org-capture was invoked
    #+begin_src emacs-lisp
      (defun my-get-url-at-point ()
        (require 'thingatpt)
        (save-window-excursion
          (switch-to-prev-buffer)
          (thing-at-point-url-at-point)))
    #+end_src

*** Get the url from the clipboard
   #+begin_src emacs-lisp
     (defun my-get-url-from-clipboard ()
       (require 'thingatpt)
       (with-temp-buffer
         (insert (string-trim (current-kill 0)))
         (goto-char 0)
         (thing-at-point-url-at-point)))
   #+end_src

*** Get current url of w3m-buffer
    #+begin_src emacs-lisp
      (defun my-get-w3m-url ()
        (save-window-excursion
          (switch-to-prev-buffer)
          (when (equal major-mode 'w3m-mode)
            (or (w3m-anchor)
                w3m-current-url))))
    #+end_src

*** Get url from point or clipboard
    #+begin_src emacs-lisp
      (defun my-get-url-at-point-or-from-clipboard ()
        (require 'thingatpt)
        (or (my-get-w3m-url)
            (my-get-url-at-point)
            (my-get-url-from-clipboard)))
    #+end_src

*** Get name of major mode of buffer from which org-capture was called
    The returned value can be uses as language in '#+begin_src' markup. We need
    to switch to previous buffer since, the function is executed in context of
    org-capture buffer, not the buffer where org-capture was invoked
    #+begin_src emacs-lisp
      (defun my-get-source-buffers-mode ()
          (save-window-excursion
            (switch-to-prev-buffer)
            (substring (symbol-name major-mode) 0 -5)))
    #+end_src

*** Read date from user using calender widget and convert it to format diary can understand
    #+begin_src emacs-lisp
      (defun my--time-to-am/pm (hours minutes)
        (when (and hours minutes)
          (let* ((hours-int (string-to-int hours))
                 (hours-string (int-to-string (if (<= hours-int 12) 
                                                  hours-int
                                                (- hours-int 12))))
                 (suffix (if (< hours-int 12) 
                             "am"
                           "pm")))
            (concat hours-string ":" minutes suffix))))

      (defun my-read-date-for-diary ()
        (let* ((date-read (org-read-date))
               (date-components (split-string date-read))
               (date-string (split-string (car date-components) "-"))
               (time-components (when (cadr date-components)
                                  (split-string (cadr date-components) ":")))
               (hours (car time-components))
               (minutes (cadr time-components)))
          (concat (calendar-month-name (string-to-int (cadr date-string)))
                  " "
                  (caddr date-string)
                  ", "
                  (car date-string)
                  " "
                  (my--time-to-am/pm hours minutes))))
    #+end_src

*** Get the projectile project of the buffer from which capture was invoked
    #+begin_src emacs-lisp
      (defun my-get-source-buffers-project ()
        (save-window-excursion
          (switch-to-prev-buffer)
          (projectile-project-name)))
    #+end_src

** The templates
*** org-capture is not yet loaded, so initialize org-capture templates to empty list
    #+begin_src emacs-lisp
      (defvar org-capture-templates nil)
    #+end_src

*** Template for capturing todos
  #+begin_src emacs-lisp
    (add-to-list 'org-capture-templates (list "t"
                                              "TODO"
                                              'entry
                                              (list 'file
                                                    (concat my-org-agenda-dir "/todos.org"))
                                              "* TODO %?\n%U\n\n"
                                              :empty-lines-after 2))
  #+end_src

*** Template for capturing links
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "l"
                                                "Interesting links"
                                                'entry
                                                (list 'file
                                                      (concat my-notes-dir "links.org"))
                                                "* UNREAD %?\n  %(my-get-url-at-point-or-from-clipboard) - Found on %U\n\n"
                                                :empty-lines-after 2))
    #+end_src

*** Template for capturing notes
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "n"
                                                "Note"
                                                'entry
                                                (list 'file
                                                      (concat my-notes-dir "notes.org"))
                                                "* %? :NOTE:\n%U\n\n"
                                                :empty-lines-after 2))
    #+end_src

*** Template for capturing code snippets
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "s"
                                                "Code snippets"
                                                'entry
                                                (list 'file
                                                      (concat my-notes-dir "snippets.org"))
                                                "* %? \n  #+begin_src %(my-get-source-buffers-mode)\n    %i\n  #+end_src\n\n"
                                                :empty-lines-after 2))
    #+end_src

*** Template for capturing appointments to diary file
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "a"
                                                "Appointment"
                                                'plain
                                                (list 'file
                                                      (locate-user-emacs-file "org/diary"))
                                                "%(my-read-date-for-diary) %?\n\n"))
    #+end_src

*** Template for capturing habit
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "h" 
                                                "Habit" 
                                                'entry 
                                                (list 'file 
                                                      (locate-user-emacs-file "org/agenda/habits.org"))
                                                "* TODO %?\nSCHEDULED: <%<%Y-%m-%d .+1d/2d>>\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))
    #+end_src

*** Template for project specific TODOs
    #+begin_src emacs-lisp
      (require 'org-projectile)
      (add-to-list 'org-capture-templates 
        (org-projectile:project-todo-entry "p" "* TODO %? :%(my-get-source-buffers-project):\n%a\n"))
    #+end_src


* Custom agenda commands
  Command to view link log
  #+begin_src emacs-lisp
    (setq org-agenda-custom-commands
          `(("l" "View link log" todo "UNREAD"
             ((org-agenda-files '(,(concat my-notes-dir "links.org")))))))
  #+end_src


* Configurations for org clocking
** Store persistence info inside org directory
   #+begin_src emacs-lisp
     (setq org-clock-persist-file (locate-user-emacs-file "org/misc/org-clock-save.el"))

     (unless (file-exists-p (locate-user-emacs-file "org/misc"))
       (make-directory (locate-user-emacs-file "org/misc") t))
   #+end_src

** Save both the running clock, and the entire clock on exiting emacs
  #+begin_src emacs-lisp
    (setq org-clock-persist t)
  #+end_src

** Setup clock persistence
   #+begin_src emacs-lisp
     (org-clock-persistence-insinuate)
   #+end_src


* Keybindings
** Global keybindings for org-mode
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "<f9>") #'org-agenda)
    (global-set-key (kbd "C-c c") #'org-capture)
    (global-set-key (kbd "<f10>") #'org-capture)
  #+end_src

** Keybinding to open/exit deft
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c n") #'deft)
     (eval-after-load "deft"
       '(define-key deft-mode-map (kbd "C-c n") #'quit-window))
   #+end_src

** Keybinding to view diary
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c D") #'diary)
   #+end_src
