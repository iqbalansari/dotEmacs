* Install deft for managing notes
  #+begin_src emacs-lisp
    (my-install-package 'deft)
  #+end_src


* Path to notes directory
  #+begin_src emacs-lisp
    (defvar my-notes-dir (locate-user-emacs-file "org/notes/"))

    (unless (file-exists-p my-notes-dir)
      (make-directory my-notes-dir t))
  #+end_src


* Diary mode config
** Store diary file in org folder
  #+begin_src emacs-lisp
    (setq diary-file (locate-user-emacs-file "org/diary"))
  #+end_src

** Keybinding to open diary file
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c D") #'diary)
   #+end_src


* Let diary entries be included in agenda buffer
  #+begin_src emacs-lisp
    (setq org-agenda-include-diary t)
  #+end_src


* Use org mode files for taking notes
   #+begin_src emacs-lisp
     (setq deft-extension "org")    
     (setq deft-text-mode 'org-mode)
   #+end_src


* Directory for notes folder
  #+begin_src emacs-lisp
    (setq deft-directory my-notes-dir)
  #+end_src


* Use filename as title in deft
   #+begin_src emacs-lisp
     (setq deft-use-filename-as-title t)
   #+end_src


* Path to default org-captured file
  #+begin_src emacs-lisp
    (setq org-default-notes-file (concat my-notes-dir "/captured.org"))
  #+end_src


* The org agenda files
** Org agenda files will stored in ~/.emacs.d/org/
   #+begin_src emacs-lisp
     (defvar my-org-agenda-dir (locate-user-emacs-file "org/agenda/"))
   #+end_src

** Create the folder if it does not already exist
   #+begin_src emacs-lisp
     (unless (file-exists-p my-org-agenda-dir)
       (make-directory my-org-agenda-dir t))
   #+end_src

** Any files in org folder will be added to agenda files
  #+begin_src emacs-lisp
    (setq org-agenda-files (list my-org-agenda-dir my-notes-dir))
  #+end_src


* Include diary entries to org-agenda buffers
  #+begin_src emacs-lisp
    (setq org-agenda-include-diary t)
  #+end_src


* Add a note when task is marked as DONE
  #+begin_src emacs-lisp
    (setq org-log-done 'note)
  #+end_src


* Persist org mode's clock history across emacs sessions
  #+begin_src emacs-lisp
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
  #+end_src


* Org capture templates
** Helper functions
*** Get the url from the clipboard
   #+begin_src emacs-lisp
     (defun my-get-url-from-clipboard ()
       (require 'thingatpt)
       (with-temp-buffer
         (insert (string-trim (current-kill 0)))
         (goto-char 0)
         (thing-at-point-url-at-point)))
   #+end_src

*** Get name of major mode of buffer from which org-capture was called
    The returned value can be uses as language in '#+begin_src' markup
    #+begin_src emacs-lisp
      (defun my-get-source-buffers-mode ()
          (save-window-excursion
            (switch-to-prev-buffer)
            (substring (symbol-name major-mode) 0 -5)))
    #+end_src

*** Read date from user using calender widget and convert it to format diary can understand
    #+begin_src emacs-lisp
      (defun my-read-date-for-diary ()
        (let ((date-components (split-string (org-read-date) "-")))
          (concat (calendar-month-name (string-to-int (cadr date-components)))
                  " "
                  (caddr date-components)
                  ", "
                  (car date-components))))
    #+end_src

** The templates
*** org-capture is not yet loaded, so initialize org-capture templates to empty list
    #+begin_src emacs-lisp
      (defvar org-capture-templates nil)
    #+end_src

*** Template for capturing todos
  #+begin_src emacs-lisp
    (add-to-list 'org-capture-templates (list "t"
                                              "TODO"
                                              'entry
                                              (list 'file
                                                    (concat my-org-agenda-dir "/todos.org"))
                                              "* TODO %?\n%U\n\n"
                                              :empty-lines-after 2))
  #+end_src

*** Template for capturing links
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "l"
                                                "Interesting links"
                                                'entry
                                                (list 'file
                                                      (concat my-notes-dir "links.org"))
                                                "* %?\n  %(my-get-url-from-clipboard) - Found on %U\n\n"
                                                :empty-lines-after 2))
    #+end_src

*** Template for capturing notes
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "n"
                                                "Note"
                                                'entry
                                                (list 'file
                                                      (concat my-notes-dir "notes.org"))
                                                "* %? :NOTE:\n%U\n\n"
                                                :empty-lines-after 2))
    #+end_src

*** Template for capturing code snippets
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "s"
                                                "Code snippets"
                                                'entry
                                                (list 'file
                                                      (concat my-notes-dir "snippets.org"))
                                                "* %? \n  #+begin_src %(my-get-source-buffers-mode)\n    %i\n  #+end_src\n\n"
                                                :empty-lines-after 2))
    #+end_src

*** Template for capturing appointments to diary file
    #+begin_src emacs-lisp
      (add-to-list 'org-capture-templates (list "a"
                                                "Appointment"
                                                'plain
                                                (list 'file
                                                      (locate-user-emacs-file "org/diary"))
                                                "%(my-read-date-for-diary) %^{Time} %?\n\n"))
    #+end_src


* Enable notifications for appointments
** Do not show diary on initial appt setup
   #+begin_src emacs-lisp
     (setq appt-display-diary nil)
   #+end_src

** Warn 15 min in advance
  #+begin_src emacs-lisp
    (setq appt-message-warning-time 15)
  #+end_src

** Show remaining time in the modeline
   #+begin_src emacs-lisp
     (setq appt-display-mode-line t)
   #+end_src

** Show notification in a separate window
   #+begin_src emacs-lisp
     (setq appt-display-format 'window)
   #+end_src

** Enable appt and activate appointments found in org-agenda files
   #+begin_src emacs-lisp
     (add-hook 'after-init-hook #'appt-activate)

     (defadvice appt-activate (after my-add-org-agenda-to-appt (&rest args))
       (org-agenda-to-appt))

     (ad-activate 'appt-activate)

     (display-time)
   #+end_src

** Refresh appt at midnights
   #+begin_src emacs-lisp
     (run-at-time "24:01" nil (lambda ()
                                (setq appt-time-msg-list nil)
                                (appt-activate 1)
                                (org-agenda-to-appt)))
   #+end_src


* Global keybindings for org
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "C-c c") #'org-capture)
  #+end_src


* Keybinding to open/exit deft
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c n") #'deft)
     (eval-after-load "deft"
       '(define-key deft-mode-map (kbd "C-c n") #'quit-window))
   #+end_src
