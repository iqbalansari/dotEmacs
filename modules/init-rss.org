* Install required packages
  #+begin_src emacs-lisp
    (my-install-package 'elfeed)
  #+end_src


* Keybinding to launch elfeed
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c w") #'elfeed)
  #+end_src


* Load the feeds from elfeed.org file
** Function to extract all links from an org file
   #+begin_src emacs-lisp
     (defun my-org-get-all-feeds (file)
       (with-temp-buffer
         (erase-buffer)
         (insert-file-contents file)
         (goto-char (point-min))

         (let (feeds)

           (while (re-search-forward org-plain-link-re nil t)
             (let ((link (match-string 0))
                   (tags (my-org-get-parents-tags)))

               (add-to-list 'feeds (if tags (append (list link) tags) link))))
           (nreverse feeds))))
   #+end_src

** Function to extract all tags for given org-element
   This returns the tags from all ancestors of given element
   #+begin_src emacs-lisp
     (defun my-org-get-parents-tags ()
       (mapcar #'intern
               (save-excursion
                 (let (tags)
                   (while (not (equal (org-back-to-heading t) t))
                     (setq tags (append tags (org-get-tags))))
                   tags))))
   #+end_src

** Function to import feeds from elfeed.org
   #+begin_src emacs-lisp 
     (defun my-import-elfeed-feeds ()
       (interactive)
       (let* ((feeds-file (locate-user-emacs-file "org/notes/elfeed.org"))
              (feeds (when (file-exists-p feeds-file)
                       (my-org-get-all-feeds feeds-file))))
         (setq elfeed-feeds feeds)
         (message (format "Imported %d feeds" (length feeds)))))
   #+end_src

** Import all feeds after init
   #+begin_src emacs-lisp
     (add-hook 'after-init-hook #'my-import-elfeed-feeds)
   #+end_src


* Store the database in org directory
   So that it is synced with rest of the files
   #+begin_src emacs-lisp
     (setq elfeed-db-directory (locate-user-emacs-file "org/.elfeed"))
   #+end_src
