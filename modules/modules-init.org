* Code to speed up the loading of modules
  We have our configuration split in about 14 different org mode 
  files while having different modules in different files enhances
  readablity of the setup, loading all of these files at the startup
  is expensive since each file first converted from .org to .el files
  and then loaded separately to overcome this we do the following 
  1) Convert the org mode files to el files 
  2) Combine their code in one file and load it
  
  Now at subsequent emacs startups we first check if any org
  file is newer then the compiled file, if so repeat step 1) and 2)
  This way the startup will be slow only when any of the org files
  are modified or there is some new org file, otherwise it will be
  faster since we load a single file
  #+begin_src emacs-lisp
    (load "cl-lib")
    
    (defvar iqbal-modules-dir "~/.emacs.d/modules/")
    (defvar iqbal-tangled-modules "~/.emacs.d/modules/modules-compiled.el")
    (defvar iqbal-compiled-modules "~/.emacs.d/modules/modules-compiled.elc")
    
    (defun iqbal-get-file-mod-time (path)
      (nth 5 (file-attributes path)))
    
    (defun iqbal-get-module-paths (suffix)
      (map 'list 
           (lambda (module) (concat iqbal-modules-dir module suffix))
           iqbal-modules-list))
    
    (defun iqbal-get-org-module-paths ()
      (iqbal-get-module-paths "-init.org"))
    
    (defun iqbal-get-el-module-paths ()
      (iqbal-get-module-paths "-init.el"))
    
    (defun iqbal-get-module-org-file (module)
      (concat iqbal-modules-dir module "-init.org"))
    
    (defun iqbal-get-module-el-file (module)
      (concat iqbal-modules-dir module "-init.el"))
    
    (defun iqbal-module-file-newer? (module)
      (let ((module-file-mod-time (iqbal-get-file-mod-time (iqbal-get-module-org-file module)))
            (modules-compiled-time (iqbal-get-file-mod-time iqbal-tangled-modules)))
        (or (not (file-exists-p (iqbal-get-module-el-file module)))
            (> (nth 0 module-file-mod-time) (nth 0 modules-compiled-time))
            (and (= (nth 0 module-file-mod-time) (nth 0 modules-compiled-time))
                 (> (nth 1 module-file-mod-time) (nth 1 modules-compiled-time))))))
    
    (defun iqbal-get-newer-modules ()
      (remove-if-not (lambda (module-file)
                       (iqbal-module-file-newer? module-file))
                     iqbal-modules-list))
    
    (defun iqbal-read-file (path)
      (with-temp-buffer
        (insert-file-contents-literally path)
        (buffer-substring-no-properties (point-min) (point-max))))
    
    (defun iqbal-compile-modules (modules)
      "Tangle the MODULES and concat store the combined results in
    a single file also write the current modules to previous-modules.el
    This file is read to determine if any module has been removed
    since last compilation
    "
      (interactive (list (iqbal-get-newer-modules)))
      (dolist (module modules)
        (org-babel-tangle-file (iqbal-get-module-org-file module)
                               (iqbal-get-module-el-file module)
                               "emacs-lisp"))
      (let ((extracted-code (reduce #'(lambda (code input-file)
                                        (concat code (iqbal-read-file input-file)))
                                    (iqbal-get-el-module-paths) :initial-value "")))
        (with-temp-file iqbal-tangled-modules
          (insert extracted-code))
        (byte-compile-file iqbal-tangled-modules)
        (setq iqbal-modules-compiled-time 
              (iqbal-get-file-mod-time iqbal-compiled-modules))
        (with-temp-file (concat iqbal-modules-dir "previous-modules.el")
          (insert (concat "(defvar iqbal-previous-modules '"
                          (prin1-to-string iqbal-modules-list)
                          ")")))))
    
    (defun iqbal-module-removed?()
      "Check if any module has been removed"
      (let ((meta-file (concat iqbal-modules-dir "previous-modules.el")))
        (when (file-exists-p meta-file)
          (load-file meta-file)
          (cl-reduce #'(lambda (any-module-removed? module)
                      (or any-module-removed? 
                          (not (cl-member module iqbal-modules-list))))
                  iqbal-previous-modules :initial-value nil))))
    
    (defun iqbal-compile-and-load-modules ()
      "If any new module(s) are added or any module has been
    removed, then compile and load compiled file
    or simply load previously compiled file
    "
      (interactive)
      (let ((newer-modules (iqbal-get-newer-modules)))
        (when (or newer-modules (iqbal-module-removed?))
          (iqbal-compile-modules newer-modules))
        (load-file iqbal-tangled-modules)))
  #+end_src


* List of modules to be loaded
  #+begin_src emacs-lisp
    (defvar iqbal-modules-list '("auto-complete" 
                                 "backup"
                                 "files"
                                 "buffers"
                                 "dired"
                                 "editing"
                                 "navigation"
                                 "folding"
                                 "search-replace"
                                 "ido"
                                 "parenthesis"
                                 "syntax-check"
                                 "shell"
                                 "org"
                                 "utilities"
                                 "version-control"
                                 "yasnippet"
                                 "project"
                                 "window-management"
                                 "display"))
  #+end_src
  

* Load the modules
  #+begin_src emacs-lisp
    (iqbal-compile-and-load-modules)
  #+end_src
  
