* Install workgroup2
  + [[https://github.com/pashinin/workgroups2][workgroups2]]- Session manager for emacs, useful for creating workspaces as
                 well as saving restoring state (open buffers etc) on startup

  #+begin_src emacs-lisp
    (el-get 'sync 'workgroups2)
  #+end_src


* Workgroups2 configurations
** Require workgroups2
   #+begin_src emacs-lisp
     (require 'workgroups2)
     (setq wg-use-default-session-file t)
   #+end_src   

** Save the session file in .emacs.d rather than home
   #+begin_src emacs-lisp
     (setq wg-default-session-file "~/.emacs.d/workgroups")
   #+end_src

** Save automatically when exiting emacs  
  #+begin_src emacs-lisp
    (setq wg-query-for-save-on-emacs-exit nil)
  #+end_src

** Key prefix for Workgroups2
   #+begin_src emacs-lisp
     (setq wg-prefix-key (kbd "C-z"))    
   #+end_src

** Display current workgroup in modeline
   #+begin_src emacs-lisp
     (setq wg-mode-line-display-on t)
   #+end_src
** Restore all buffers in workgroups
   #+begin_src emacs-lisp
     (setq wg-restore-associated-buffers t)
   #+end_src

   
* Enable workgroups2
  #+begin_src emacs-lisp
    (workgroups-mode 1)
  #+end_src


* Use switch-window for switching between windows
  #+begin_src emacs-lisp
    (el-get 'sync 'switch-window)
    (global-set-key (kbd "C-x o") 'switch-window)
  #+end_src


* Use default windmove bindings
  #+begin_src emacs-lisp
    (windmove-default-keybindings)
  #+end_src

* Keybindings to resize the windows
  #+begin_src emacs-lisp
    (global-set-key
     (kbd "<C-S-up>") 'enlarge-window)
    (global-set-key
     (kbd "<C-S-down>") 'shrink-window)
    (global-set-key
     (kbd "<C-S-left>") 'enlarge-window-horizontally)
    (global-set-key
     (kbd "<C-S-right>") 'shrink-window-horizontally)
  #+end_src


* Keybinding to balance the windows
  #+begin_src emacs-lisp
    (global-set-key (kbd "<C-f10>") 'balance-windows)
  #+end_src

* Functions for swapping and toggling current windows
  I don't currently remember where I got these from
  #+begin_src emacs-lisp
    (defun my-swap-windows ()
      "If you have 2 windows, it swaps them."
      (interactive)
      (cond ((not (= (count-windows) 2))
             (message "You need exactly 2 windows to do this."))
            (t
             (let* ((w1 (first (window-list)))
                    (w2 (second (window-list)))
                    (b1 (window-buffer w1))
                    (b2 (window-buffer w2))
                    (s1 (window-start w1))
                    (s2 (window-start w2)))
               (set-window-buffer w1 b2)
               (set-window-buffer w2 b1)
               (set-window-start w1 s2)
               (set-window-start w2 s1)))))
    
    (defun my-toggle-window-split ()
      "Vertical split shows more of each line, horizontal split shows
    more lines. This code toggles between them. It only works for
    frames with exactly two windows."
      (interactive)
      (if (= (count-windows) 2)
          (let* ((this-win-buffer (window-buffer))
                 (next-win-buffer (window-buffer (next-window)))
                 (this-win-edges (window-edges (selected-window)))
                 (next-win-edges (window-edges (next-window)))
                 (this-win-2nd (not (and (<= (car this-win-edges)
                                             (car next-win-edges))
                                         (<= (cadr this-win-edges)
                                             (cadr next-win-edges)))))
                 (splitter
                  (if (= (car this-win-edges)
                         (car (window-edges (next-window))))
                      'split-window-horizontally
                    'split-window-vertically)))
            (delete-other-windows)
            (let ((first-win (selected-window)))
              (funcall splitter)
              (if this-win-2nd (other-window 1))
              (set-window-buffer (selected-window) this-win-buffer)
              (set-window-buffer (next-window) next-win-buffer)
              (select-window first-win)
              (if this-win-2nd (other-window 1))))))
    
    (global-set-key (kbd "C-c ~") 'my-toggle-window-split)
    (global-set-key (kbd "C-c |") 'my-swap-windows)
  #+end_src


* Open current buffer in new frame
  #+begin_src emacs-lisp
    (defun detach-window ()
      "Close current window and re-open it in new frame."
      (interactive)
      (let ((current-buffer (window-buffer)))
        (delete-window)
        (select-frame (make-frame))
        (set-window-buffer (selected-window) current-buffer)))
  #+end_src

