* Ensure that required packages are installed
  + [[https://github.com/bbatsov/projectile][projectile]] - Lightweight project interaction library for emacs, provides
                 handy functions to interact with projects, find files etc

  #+begin_src emacs-lisp
    (my-install-package 'projectile)
  #+end_src


* Use C-z as prefix for projectile commands
   #+begin_src emacs-lisp
     (setq projectile-keymap-prefix (kbd "C-z"))
   #+end_src


* Enable projectile
  #+begin_src emacs-lisp
    (projectile-global-mode)
  #+end_src


* Remember project's window config when switching
  #+begin_src emacs-lisp
    (setq projectile-remember-window-configs t)
  #+end_src


* Use git grep for grepping in project
  #+begin_src emacs-lisp
    (setq projectile-use-git-grep t)
  #+end_src


* Custom project types
** Function for treating dropbox directory as projects
  #+begin_src emacs-lisp
    (defun my-projectile-locate-dropbox-project (dir &optional list) 
      (let ((candidate (projectile-locate-dominating-file dir ".dropbox")))
        ;; The .dropbox directory in home folder should not be treated as
        ;; project root
        (when (and candidate
                   (not (file-directory-p (concat candidate ".dropbox"))))
          (expand-file-name candidate))))

    (add-to-list 'projectile-project-root-files-functions #'my-projectile-locate-dropbox-project t)
  #+end_src

** Additional projectile project roots
   #+begin_src emacs-lisp
     (setq projectile-project-root-files
           (append projectile-project-root-files
                   '(".tern-project" "compile_commands.json" ".edts" ".ensime" ".merlin")))
   #+end_src


* Process buffers should not be considered part of project unless they are shells
  #+begin_src emacs-lisp
    (defun my-filter-out-non-shell-processes (buffers)
      (remove-if (lambda (buffer)
                   (let ((buffer-major-mode (with-current-buffer buffer
                                              major-mode)))
                     (and (get-buffer-process buffer)
                          (not (or (eq buffer-major-mode 'term-mode)
                                   (eq buffer-major-mode 'shell-mode)
                                   (eq buffer-major-mode 'eshell-mode))))))
                 buffers))

    (setq projectile-buffers-filter-function #'my-filter-out-non-shell-processes)
  #+end_src


* Custom projectile-completion taken from [[https://gist.github.com/rejeep/5933343]]
   #+begin_src emacs-lisp
     (defun rejeep-projectile-completion-fn (prompt choises)
       "Projectile completion function that only shows file name.

          If two files have same name, new completion appears to select between
          them. These include the path relative to the project root."
       (interactive)
       (let* ((stripped-choises
               (-uniq (--map (file-name-nondirectory (directory-file-name it)) choises)))
              (choise
               (ido-completing-read prompt stripped-choises))
              (matching-files
               (-filter
                (lambda (file)
                  (equal (file-name-nondirectory (directory-file-name file)) choise))
                choises)))
         (if (> (length matching-files) 1)
             (ido-completing-read prompt matching-files)
           (car matching-files))))

     (setq projectile-completion-system 'rejeep-projectile-completion-fn)
   #+end_src
