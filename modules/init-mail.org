* Install mu when on Linux
  #+begin_src emacs-lisp
    (when (eq system-type 'gnu/linux)
      ;; Install only if the prerequisites are satisfied
      (if (and (executable-find "autoreconf")
               (executable-find "xapian-config")
               (executable-find "libtool")
               (or (and (getenv "GMIME_CFLAGS")
                        (getenv "GMIME_LIBS"))
                   (when (executable-find "pkg-config")
                     (zerop (shell-command "pkg-config --exists gmime-2.6")))))
          (progn (my-install-package 'mu4e)
                 (when (and (boundp 'mu4e-maildir)
                            (not (file-exists-p mu4e-maildir)))
                   (warn "Please set `mu4e-maildir' to your maildir")))
        (message "You need to install `autoreconf', `libxapian-dev', `libtool'
    and `libgmime-2.6-dev' for building mu4e")))
  #+end_src


* Set mail-host-address
  #+begin_src emacs-lisp
    (setq mail-host-address "emacs.localhost")
  #+end_src


* Auto-complete addresses in 'From', 'To' field in message mode
** Use company mode for better completion interface
  mu4e provides a completion at point function which can use as completion
  backend. Also remove text-properties that interfere with company mode's menu
  #+begin_src emacs-lisp
    (defun my-strip-message-mode-problematic-text-props ()
      (ignore-errors (save-excursion
                       (search-forward-regexp (concat "^" mail-header-separator) nil t)
                       (remove-text-properties (match-beginning 0) (match-end 0) '(rear-nonsticky)))))

    (add-hook 'message-mode-hook 'my-strip-message-mode-problematic-text-props)
  #+end_src


* Offlineimap configuration
** Use offlineimap to update messages in mu4e
  #+begin_src emacs-lisp
    (when (executable-find "offlineimap")
      (setq mu4e-get-mail-command "offlineimap"))
  #+end_src

** .offlineimaprc is a unix conf file
  #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.offlineimaprc" . conf-mode))
  #+end_src


* mu4e configuration
** Use w3m to render html messages
  #+begin_src emacs-lisp
    (when (executable-find "w3m")
      (setq mu4e-view-prefer-html t)
      (setq mu4e-html2text-command "w3m -dump -T text/html"))
  #+end_src

** View images inline in message view buffer
  #+begin_src emacs-lisp
    (setq mu4e-view-show-images t)

    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
  #+end_src

** Do not insert signature in sent emails
  #+begin_src emacs-lisp
    (setq mu4e-compose-signature-auto-include nil)
  #+end_src

** It is OK to use non-ascii characters
  #+begin_src emacs-lisp
    (setq mu4e-use-fancy-chars t)
  #+end_src

** Save attachments in ~/Downloads directory
  #+begin_src emacs-lisp
    (setq mu4e-attachment-dir "~/Downloads")
  #+end_src

** The information to displayed in the header line
  #+begin_src emacs-lisp
    (setq mu4e-headers-fields '((:human-date . 12)
                                (:flags . 6)
                                (:mailing-list . 10)
                                (:from . 22)
                                (:to . 22)
                                (:subject)))
  #+end_src

** Action to view the current message in browser
  #+begin_src emacs-lisp
    (eval-after-load "mu4e"
      '(add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser)))
  #+end_src

** Action to view current message in w3m
  #+begin_src emacs-lisp
    (defun mu4e-action-view-in-w3m (msg)
      "View the body of the message in a web browser.
    You can influence the browser to use with the variable
    `browse-url-generic-program'."
      (let* ((html (mu4e-message-field msg :body-html))
             (txt (mu4e-message-field msg :body-txt))
             (tmpfile (format "%s%x.html" temporary-file-directory (random t))))
        
        (unless (or html txt)
          (mu4e-error "No body part for this message"))
        (with-temp-buffer
          ;; simplistic -- but note that it's only an example...
          (insert (or html (concat "<pre>" txt "</pre>")))
          (write-file tmpfile)
          (w3m-browse-url (concat "file://" tmpfile))
          (setq html-test html))))

    (eval-after-load "mu4e"
      '(when (locate-library "w3m")
         (load "w3m")
         (add-to-list 'mu4e-view-actions '("Open in w3m" . mu4e-action-view-in-w3m))))
  #+end_src

** Integration with org-contacts
  #+begin_src emacs-lisp
    (setq mu4e-org-contacts-file (locate-user-emacs-file "org/contacts.org"))
    (eval-after-load "mu4e"
      '(add-to-list 'mu4e-headers-actions
                    '("org-contact-add" . mu4e-action-add-org-contact) t))
  #+end_src


* Configuration for sending mail
** Sending mail from multiple smtp accounts when using mu4e
  #+begin_src emacs-lisp
    (defvar my-mu4e-account-alist nil "List of accounts in format specified here [http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html]")

    (defun my-mu4e-set-account ()
      "Set the account for composing a message."
      (let* ((account
              ;; If we are about to compose a reply retrieve try retrieving the
              ;; the account corresponding to 'to' field of email
              (if mu4e-compose-parent-message
                  (let ((receiving-email (cdar (mu4e-message-field mu4e-compose-parent-message
                                                                   :to))))
                    (caar (remove-if-not (lambda (account)
                                           (string= (cadr (assoc 'user-mail-address account))
                                                    receiving-email))
                                         my-mu4e-account-alist)))
                ;; Otherwise read the account to use from the user
                (when my-mu4e-account-alist
                  (completing-read (format "Compose with account: (%s) "
                                           (mapconcat #'(lambda (var) (car var))
                                                      my-mu4e-account-alist "/"))
                                   (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                   nil t nil nil (caar my-mu4e-account-alist)))))
             ;; Retrieve the variables corresponding to account
             (account-vars (cdr (assoc account my-mu4e-account-alist))))
        (when account-vars
          ;; Set the variables
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars))))

    (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
  #+end_src

** Prefer .authinfo.gpg for credentials
   #+begin_src emacs-lisp
     (eval-after-load "auth-source"
       '(setq auth-sources (cons "~/.authinfo.gpg"
                                 (delete "~/.authinfo.gpg" auth-sources))))
   #+end_src


* Integration with org-mode
** Register a handler to open links to mu4e messages
  #+begin_src emacs-lisp
    (when (locate-library "org-mu4e")
      (autoload 'org-mu4e-open "org-mu4e")
      (org-add-link-type "mu4e" 'org-mu4e-open))
  #+end_src

** Load org-mu4e on loading mu4e
   #+begin_src emacs-lisp
     (eval-after-load "mu4e"
       '(load "org-mu4e" t))
   #+end_src


* Convenience functions
** Advice mu4e~proc-sentinel so that path to mu binary is copied to clipboard
   This is needed since in case mu is installed using el-get (which it is), it
   is buried deep in .emacs.d folder and might not be in PATH, as such it cannot
   be run directly from shell. The following advice copies the path to mu to clipboard, so that
   it can be directly run from shell
   #+begin_src emacs-lisp
     (defun my-advise-mu4e~proc-sentinel ()
       (defadvice mu4e~proc-sentinel (around show-path-to-mu-binary (&rest args))
         (condition-case err
             ad-do-it
           (error (progn (kill-new mu4e-mu-binary)
                         (error "Failed to start mu. %s. Path to mu binary (%s) copied to clipboard."
                                (error-message-string err)
                                mu4e-mu-binary)))))

       (ad-activate 'mu4e~proc-sentinel))

     (eval-after-load "mu4e"
       '(my-advise-mu4e~proc-sentinel))
   #+end_src

** Functions to start/hide mu4e
   Store the window configuration before starting mu4e and restore it when
   exiting mu4e
   #+begin_src emacs-lisp
    (defvar my-pre-mu-win-config nil)
    (defvar my-mu-win-config nil)

    (defun my--start-mu4e ()
      ;; If mu4e is running and a mu4e window configuration is
      ;; stored
      (if (and my-mu-win-config
               (get-buffer " *mu4e-main*"))
          (set-window-configuration my-mu-win-config)
        (call-interactively #'mu4e)))

    (defun my-start-mu4e ()
      (interactive)
      (setq my-pre-mu-win-config (current-window-configuration))
      
      (if (locate-library "mu4e")
          (my--start-mu4e)
        (message "mu4e not installed! You need to install `autoreconf', `libtool', `libxapian-dev' and `libgmime-2.6-dev' for installing mu4e")))

    (defun my-quit-mu4e ()
      (interactive)
      (setq my-mu-win-config (current-window-configuration))
      (when my-pre-mu-win-config
        (set-window-configuration my-pre-mu-win-config)))
   #+end_src


* Keybindings to hide/show mu4e
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c m") #'my-start-mu4e)    

    (eval-after-load "mu4e"
      '(progn (define-key mu4e-main-mode-map (kbd "C-c m") #'my-quit-mu4e)
              (define-key mu4e-view-mode-map (kbd "C-c m") #'my-quit-mu4e)
              (define-key mu4e-headers-mode-map (kbd "C-c m") #'my-quit-mu4e)'
              (define-key mu4e~update-mail-mode-map (kbd "C-c m") #'my-quit-mu4e)))
  #+end_src
