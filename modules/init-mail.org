* Install mu when on Linux
  #+begin_src emacs-lisp
    (when (eq system-type 'gnu/linux)
      ;; Install only if the prerequisites are satisfied
      (if (and (executable-find "autoreconf")
               (executable-find "xapian-config")
               (or (and (getenv "GMIME_CFLAGS")
                        (getenv "GMIME_LIBS"))
                   (when (executable-find "pkg-config")
                     (zerop (shell-command "pkg-config --exists gmime-2.6")))))
          (my-install-package 'mu4e)
        (message "You need to install `autoreconf', `libxapian-dev' 
and `libgmime-2.6-dev' for building mu4e")))
  #+end_src


* Use offlineimap to update messages in mu4e
  #+begin_src emacs-lisp
    (when (executable-find "offlineimap")
      (setq mu4e-get-mail-command "offlineimap"))
  #+end_src


* .offlineimaprc is a unix conf file
  #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.offlineimaprc" . conf-mode))
  #+end_src


* Use w3m to render html messages
  #+begin_src emacs-lisp
    (when (executable-find "w3m")
      (setq mu4e-view-prefer-html t)
      (setq mu4e-html2text-command "w3m -dump -T text/html"))
  #+end_src


* View images inline in message view buffer
  #+begin_src emacs-lisp
    (setq mu4e-view-show-images t)

    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
  #+end_src


* It is OK to use non-ascii characters
  #+begin_src emacs-lisp
    (setq mu4e-use-fancy-chars t)
  #+end_src


* Save attachments in ~/Downloads directory
  #+begin_src emacs-lisp
    (setq mu4e-attachment-dir "~/Downloads")
  #+end_src


* The information to displayed in the header line
  #+begin_src emacs-lisp
    (setq mu4e-headers-fields '((:human-date . 12)
                                (:flags . 6)
                                (:mailing-list . 10)
                                (:from . 22)
                                (:to . 22)
                                (:subject)))
  #+end_src


* Add an action to view the current message in browser
  #+begin_src emacs-lisp
    (eval-after-load "mu4e"
      '(add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser)))
  #+end_src


* Action to view current message in w3m
  #+begin_src emacs-lisp
    (defun mu4e-action-view-in-w3m (msg)
      "View the body of the message in a web browser.
    You can influence the browser to use with the variable
    `browse-url-generic-program'."
      (let* ((html (mu4e-message-field msg :body-html))
             (txt (mu4e-message-field msg :body-txt))
             (tmpfile (format "%s%x.html" temporary-file-directory (random t))))
        
        (unless (or html txt)
          (mu4e-error "No body part for this message"))
        (with-temp-buffer
          ;; simplistic -- but note that it's only an example...
          (insert (or html (concat "<pre>" txt "</pre>")))
          (write-file tmpfile)
          (w3m-browse-url (concat "file://" tmpfile))
          (setq html-test html))))

    (eval-after-load "mu4e"
      '(when (locate-library "w3m")
         (load "w3m")
         (add-to-list 'mu4e-view-actions '("Open in w3m" . mu4e-action-view-in-w3m))))
  #+end_src


* Integration with org-contacts
  #+begin_src emacs-lisp
    (setq mu4e-org-contacts-file (locate-user-emacs-file "org/contacts.org"))
    (eval-after-load "mu4e"
      '(add-to-list 'mu4e-headers-actions
                    '("org-contact-add" . mu4e-action-add-org-contact) t))
  #+end_src


* Convenient functions to start/hide mu4e
  #+begin_src emacs-lisp
    (defvar my-pre-mu-win-config nil)
    (defvar my-mu-win-config nil)

    (defun my--start-mu4e ()
      ;; If mu4e is running and a mu4e window configuration is
      ;; stored
      (if (and my-mu-win-config
               (get-buffer " *mu4e-main*"))
          (set-window-configuration my-mu-win-config)
        (call-interactively #'mu4e)))

    (defun my-start-mu4e ()
      (interactive)
      (setq my-pre-mu-win-config (current-window-configuration))
      
      (if (locate-library "mu4e")
          (my--start-mu4e)
        (message "mu4e not installed! You need to install `autoreconf', `libtool', `libxapian-dev' and `libgmime-2.6-dev'
for installing mu4e")))

    (defun my-quit-mu4e ()
      (interactive)
      (setq my-mu-win-config (current-window-configuration))
      (when my-pre-mu-win-config
        (set-window-configuration my-pre-mu-win-config)))
  #+end_src


* Keybindings to hide/show mu4e
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c m") #'my-start-mu4e)    

    (eval-after-load "mu4e"
      '(progn (define-key mu4e-main-mode-map (kbd "C-c m") #'my-quit-mu4e)
              (define-key mu4e-view-mode-map (kbd "C-c m") #'my-quit-mu4e)
              (define-key mu4e-headers-mode-map (kbd "C-c m") #'my-quit-mu4e)'
              (define-key mu4e~update-mail-mode-map (kbd "C-c m") #'my-quit-mu4e)))
  #+end_src
