* Install packages useful for search and replace
  #+begin_src emacs-lisp
    (defvar my-search-replace-packages
      '(visual-regexp
        wgrep
        anzu
        discover
        swoop
        pcre2el
        isearch-dabbrev))

    (when (executable-find "ack")
      (add-to-list 'my-search-replace-packages 'ack-and-a-half)
      (add-to-list 'my-search-replace-packages 'wgrep-ack))

    (when (executable-find "ag")
      (add-to-list 'my-search-replace-packages 'ag)
      (add-to-list 'my-search-replace-packages 'wgrep-ag))

    (my-install-packages my-search-replace-packages)
  #+end_src


* Use findstr on windows
  Taken from [[https://github.com/npostavs/emacs.d]]
  #+begin_src emacs-lisp
    (when (and (eq system-type 'windows-nt)
               (not (executable-find "grep")))
      (eval-after-load "grep"
        '(progn (grep-apply-setting 'grep-find-template
                                    "findstr /S /N /D:. /C:<R> <F>")
                (setq find-name-arg nil))))
  #+end_src


* Use regex searches by default.
  Universal prefix argument will initiate normal search
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "\C-r") 'isearch-backward-regexp)
  #+end_src


* Enhancements to isearch mode taken from [[https://github.com/purcell/emacs.d/blob/master/init-isearch.el][purcell/emacs.d]]
** Search for the symbol at point
   #+begin_src emacs-lisp
     (defun isearch-yank-symbol ()
       "*Put symbol at current point into search string."
       (interactive)
       (let ((sym (symbol-at-point)))
         (if sym
             (progn
               (setq isearch-regexp t
                     isearch-string (concat "\\_<" (regexp-quote (symbol-name sym)) "\\_>")
                     isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
                     isearch-yank-flag t))
           (ding)))
       (isearch-search-and-update))
   #+end_src

** Delete region mark and closest portion of isearch match string
   #+begin_src emacs-lisp
     (defun zap-to-isearch (rbeg rend)
       "Kill the region between the mark and the closest portion of
     the isearch match string. The behaviour is meant to be analogous
     to zap-to-char; let's call it zap-to-isearch. The deleted region
     does not include the isearch word. This is meant to be bound only
     in isearch mode.  The point of this function is that oftentimes
     you want to delete some portion of text, one end of which happens
     to be an active isearch word. The observation to make is that if
     you use isearch a lot to move the cursor around (as you should,
     it is much more efficient than using the arrows), it happens a
     lot that you could just delete the active region between the mark
     and the point, not include the isearch word."
       (interactive "r")
       (when (not mark-active)
         (error "Mark is not active"))
       (let* ((isearch-bounds (list isearch-other-end (point)))
              (ismin (apply 'min isearch-bounds))
              (ismax (apply 'max isearch-bounds)))
         (if (< (mark) ismin)
             (kill-region (mark) ismin)
           (if (> (mark) ismax)
               (kill-region ismax (mark))
             (error "Internal error in isearch kill function.")))
         (isearch-exit)))
   #+end_src

** Some addtional keybindings
   #+begin_src emacs-lisp
     (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
     (define-key isearch-mode-map "\C-\M-w" 'isearch-yank-symbol)
     (define-key isearch-mode-map (kbd "M-z") 'zap-to-isearch)
   #+end_src


* Wgrep allows modifying the grep buffer and apply the changes to the files
** General setting
  #+begin_src emacs-lisp
    (setq wgrep-auto-save-buffer t)
    (setq wgrep-enable-key "e")
  #+end_src

** Enable wgrep for ag
   #+begin_src emacs-lisp
     (add-hook 'ag-mode-hook 'wgrep-ag-setup)
   #+end_src


* Show all lines matching REGEXP in buffers with this major mode. Taken from
  [[http://www.masteringemacs.org/articles/2011/07/20/searching-buffers-occur-mode/][mastering-emacs]]
  #+begin_src emacs-lisp
    ;; Get lines matching REGEXP in all buffers with this major mode
    (defun get-buffers-matching-mode (mode)
      "Returns a list of buffers where their major-mode is equal to MODE"
      (let ((buffer-mode-matches '()))
        (dolist (buf (buffer-list))
          (with-current-buffer buf
            (if (eq mode major-mode)
                (add-to-list 'buffer-mode-matches buf))))
        buffer-mode-matches))

    (defun multi-occur-in-this-mode ()
      "Show all lines matching REGEXP in buffers with this major mode."
      (interactive)
      (multi-occur
       (get-buffers-matching-mode major-mode)
       (car (occur-read-primary-args))))
  #+end_src


* Replace words in parallel taken from [[http://stackoverflow.com/questions/2588277/how-can-i-swap-or-replace-multiple-strings-in-code-at-the-same-time][stackoverflow]]
  #+begin_src emacs-lisp
    (defun parallel-query-replace (plist &optional delimited start end)
      "Replace every occurrence of the (2n)th token of PLIST in
    buffer with the (2n+1)th token; if only two tokens are provided,
    replace them with each other (ie, swap them).

    If optional second argument DELIMITED is nil, match words
    according to syntax-table; otherwise match symbols.

    When called interactively, PLIST is input as space separated
    tokens, and DELIMITED as prefix arg."
      (interactive
       `(,(loop with input = (read-from-minibuffer "Replace: ")
                with limit = (length input)
                for  j = 0 then i
                for (item . i) = (read-from-string input j)
                collect (prin1-to-string item t) until (<= limit i))
         ,current-prefix-arg
         ,@(if (use-region-p) `(,(region-beginning) ,(region-end)))))
      (let* ((alist (cond ((= (length plist) 2) (list plist (reverse plist)))
                          ((loop for (key val . tail) on plist by #'cddr
                                 collect (list (prin1-to-string key t) val)))))
             (matcher (regexp-opt (mapcar #'car alist)
                                  (if delimited 'words 'symbols)))
             (to-spec `(replace-eval-replacement replace-quote
                                                 (cadr (assoc-string (match-string 0) ',alist
                                                                     case-fold-search)))))
        (query-replace-regexp matcher to-spec nil start end)))
  #+end_src


* Keybindings for visual-regexp
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-M-%") 'vr/query-replace)
    (global-set-key (kbd "C-S-v") 'vr/mc-mark)
  #+end_src


* Configurations for anzu
** Load anzu
   #+begin_src emacs-lisp
     (global-anzu-mode +1)
   #+end_src

** Sample configuration taken from README
   #+begin_src emacs-lisp
     (setq anzu-mode-lighter "")
     (setq anzu-deactivate-region t)
     (setq anzu-search-threshold 1000)
     (setq anzu-replace-to-string-separator " => ")
   #+end_src

** Keybindings
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-%") 'anzu-query-replace)
   #+end_src


* Keep the search results in the center in incremental search
  #+begin_src emacs-lisp
    (defadvice isearch-repeat-forward (after isearch-repeat-forward-recenter activate)
      (recenter))

    (defadvice isearch-repeat-backward (after isearch-repeat-backward-recenter activate)
      (recenter))

    (ad-activate 'isearch-repeat-forward)
    (ad-activate 'isearch-repeat-backward)
  #+end_src


* Additional keybindings for search replace
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-s o") #'occur)
    (global-set-key (kbd "M-s O") #'multi-occur)
    (global-set-key (kbd "M-s m") #'multi-occur-in-this-mode)
    (global-set-key (kbd "M-s M") #'multi-occur-in-matching-buffers)
    (global-set-key (kbd "M-s s") #'swoop)
    (global-set-key (kbd "M-s S") #'swoop-multi)
    (global-set-key (kbd "M-s n") #'find-name-dired)
    (global-set-key (kbd "M-s g") #'find-grep-dired)
    (global-set-key (kbd "M-s f") #'find-grep)
    (global-set-key (kbd "M-s c") #'lgrep)
    (global-set-key (kbd "M-s r") #'rgrep)                       
    (global-set-key (kbd "M-s z") #'zrgrep)
    (global-set-key (kbd "M-s p g") #'projectile-grep)

    (when (executable-find "ack")
      (global-set-key (kbd "M-s p a") #'projectile-ack))

    (when (executable-find "ag")
      (global-set-key (kbd "M-s p s") #'projectile-ack)
      (global-set-key (kbd "M-s A s") #'ag)
      (global-set-key (kbd "M-s A f") #'ag-files)
      (global-set-key (kbd "M-s A d") #'ag-dired)
      (global-set-key (kbd "M-s A p") #'ag-dired))
  #+end_src


* Use <tab> to complete word using dabbrev during isearch
  #+begin_src emacs-lisp
    (define-key isearch-mode-map (kbd "<tab>") 'isearch-dabbrev-expand)
  #+end_src


* Enable global rxt mode
  #+begin_src emacs-lisp
    (rxt-global-mode)
  #+end_src
