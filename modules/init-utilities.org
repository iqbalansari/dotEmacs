* Install required packages
  #+begin_src emacs-lisp
    (el-get 'sync '(rebox2 
                    mag-menu
                    inf-mongo
                    edit-server
                    prodigy
                    eldoc-eval))
  #+end_src


* Replace the current expression with the result of its evaluation
  #+begin_src emacs-lisp
    (defun eval-and-replace ()
      "Replace the preceding sexp with its value."
      (interactive)
      (backward-kill-sexp)
      (condition-case nil
          (prin1 (eval (read (current-kill 0)))
                 (current-buffer))
        (error (message "Invalid expression")
               (insert (current-kill 0)))))
    
    (global-set-key (kbd "C-c e") 'eval-and-replace)
  #+end_src
  

* Keybinding for starting proced
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-p") 'proced)
  #+end_src

  
* Cleanup whitespace in the buffer
  #+begin_src emacs-lisp
    (defun cleanup-buffer-safe ()
      "Perform a bunch of safe operations on the whitespace content of a buffer.
    Does not indent buffer, because it is used for a before-save-hook, and that
    might be bad."
      (interactive)
      (untabify (point-min) (point-max))
      (delete-trailing-whitespace)
      (set-buffer-file-coding-system 'utf-8))
  #+end_src
  
 
* Convert buffer from DOS end-of-lines to Unix end-of-lines and vice versa
  #+begin_src emacs-lisp
    (defun dos-to-unix ()
      "Cut all visible ^M from the current buffer."
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\r" nil t)
          (replace-match ""))))
    
    (defun unix-to-dos ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\n" nil t)
          (replace-match "\r\n"))))
  #+end_src


* Save minibuffer history across sessions
  #+begin_src emacs-lisp
    (savehist-mode 1)
    (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  #+end_src 


* Backup walker traverses versioned backups, showing incremental diffs
  #+begin_src emacs-lisp
    (autoload 'backup-walker-start "backup-walker")
  #+end_src  


* Seamlessly create, edit, remove boxes
  #+begin_src emacs-lisp
    (autoload 'rebox-cycle "rebox2")
    (global-set-key (kbd "C-c q") 'rebox-cycle)
  #+end_src


* Start edit-server this is used by 'Edit with Emacs' chrome extension
  #+begin_src emacs-lisp
    (edit-server-start t)
  #+end_src


* Start emacs-server
  #+begin_src emacs-lisp 
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+end_src


* Use 'C-h C-a' as a entry point to starting various types of apropos
  #+begin_src emacs-lisp 
    (setq apropos-do-all t)
    (global-set-key (kbd "C-h a") 'apropos-command)
    (define-prefix-command 'Apropos-Prefix nil "Apropos (a,d,f,l,v,C-v)")
    (global-set-key (kbd "C-h C-a") 'Apropos-Prefix)
    (define-key Apropos-Prefix (kbd "a")   'apropos)
    (define-key Apropos-Prefix (kbd "C-a") 'apropos)
    (define-key Apropos-Prefix (kbd "d")   'apropos-documentation)
    (define-key Apropos-Prefix (kbd "f")   'apropos-command)
    (define-key Apropos-Prefix (kbd "l")   'apropos-library)
    (define-key Apropos-Prefix (kbd "v")   'apropos-variable)
    (define-key Apropos-Prefix (kbd "C-v") 'apropos-value)
  #+end_src


* Do not delete files directly
  #+begin_src emacs-lisp
    (setq delete-by-moving-to-trash t)
  #+end_src


* Configurations for ediff
  #+begin_src emacs-lisp
    (setq ediff-diff-options "-w")
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  #+end_src


* Goto to next/previous page we reach the end/start of a page in doc-view
  #+begin_src emacs-lisp
    (setq doc-view-continuous t)
  #+end_src


* Use js-beautify to cleanup messy javascript
  This can be also be used for reformatting JSON files for viewing them
  #+begin_src emacs-lisp
    (add-to-list 'load-path (concat otherpackages "js-beautify/"))
    (when (executable-find "js-beautify")
      (autoload 'js-beautify "js-beautify")
      (global-set-key (kbd "M-[") 'js-beautify))
  #+end_src  


* Enable eldoc in modeline when minibuffer is active
  #+begin_src emacs-lisp
    (eldoc-in-minibuffer-mode 1)
  #+end_src

