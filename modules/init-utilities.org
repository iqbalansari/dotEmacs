* Install required packages
  #+begin_src emacs-lisp
    (my-install-packages '(rebox2
                           mag-menu
                           inf-mongo
                           prodigy
                           eldoc-eval
                           edit-server
                           f
                           deft
                           discover
                           realgud
                           pcre2el))

    (autoload 'mag-menu "mag-menu")
  #+end_src


* Enable global rxt mode
  #+begin_src emacs-lisp
    (rxt-global-mode)
  #+end_src


* Enable flyspell prog mode in all programming buffers
** Enable flyspell
  #+begin_src emacs-lisp
    (when ispell-program-name
      (add-hook 'prog-mode-hook #'flyspell-prog-mode))
  #+end_src

** Disable spell checking inside strings
   #+begin_src emacs-lisp
     (setq flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))
   #+end_src

** Disable the keybindings for auto-correcting word
   #+begin_src emacs-lisp
     (setq flyspell-use-meta-tab nil)
   #+end_src


* Command to replace the current expression with the result of its evaluation
  #+begin_src emacs-lisp
    (defun eval-and-replace ()
      "Replace the preceding sexp with its value."
      (interactive)
      (backward-kill-sexp)
      (condition-case nil
          (prin1 (eval (read (current-kill 0)))
                 (current-buffer))
        (error (message "Invalid expression")
               (insert (current-kill 0)))))

    (global-set-key (kbd "C-c e") 'eval-and-replace)
  #+end_src


* Keybinding for starting proced
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-p") 'proced)
  #+end_src


* Cleanup whitespace in the buffer
  #+begin_src emacs-lisp
    (defun cleanup-buffer-safe ()
      "Perform a bunch of safe operations on the whitespace content of a buffer.
    Does not indent buffer, because it is used for a before-save-hook, and that
    might be bad."
      (interactive)
      (untabify (point-min) (point-max))
      (delete-trailing-whitespace)
      (set-buffer-file-coding-system 'utf-8))
  #+end_src


* Convert buffer from DOS end-of-lines to Unix end-of-lines and vice versa
  #+begin_src emacs-lisp
    (defun dos-to-unix ()
      "Cut all visible ^M from the current buffer."
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\r" nil t)
          (replace-match ""))))

    (defun unix-to-dos ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\n" nil t)
          (replace-match "\r\n"))))
  #+end_src


* Backup walker traverses versioned backups, showing incremental diffs
  #+begin_src emacs-lisp
    (autoload 'backup-walker-start "backup-walker")
  #+end_src


* Seamlessly create, edit, remove boxes
  #+begin_src emacs-lisp
    (autoload 'rebox-cycle "rebox2")
    (global-set-key (kbd "C-c q") 'rebox-cycle)
  #+end_src


* Start emacs-server
  #+begin_src emacs-lisp
    (load "server")
    (unless (server-running-p)
      (server-start))
  #+end_src


* Use 'C-h C-a' as a entry point to starting various types of apropos
  #+begin_src emacs-lisp
    (setq apropos-do-all t)
    (global-set-key (kbd "C-h a") 'apropos-command)
    (define-prefix-command 'Apropos-Prefix nil "Apropos (a,d,f,l,v,C-v)")
    (global-set-key (kbd "C-h C-a") 'Apropos-Prefix)
    (define-key Apropos-Prefix (kbd "a")   'apropos)
    (define-key Apropos-Prefix (kbd "C-a") 'apropos)
    (define-key Apropos-Prefix (kbd "d")   'apropos-documentation)
    (define-key Apropos-Prefix (kbd "f")   'apropos-command)
    (define-key Apropos-Prefix (kbd "l")   'apropos-library)
    (define-key Apropos-Prefix (kbd "v")   'apropos-variable)
    (define-key Apropos-Prefix (kbd "C-v") 'apropos-value)
  #+end_src


* Do not delete files directly
  #+begin_src emacs-lisp
    (setq delete-by-moving-to-trash t)
  #+end_src


* Configurations for ediff
  #+begin_src emacs-lisp
    (setq ediff-diff-options "-w")
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  #+end_src


* Goto to next/previous page we reach the end/start of a page in doc-view
  #+begin_src emacs-lisp
    (setq doc-view-continuous t)
  #+end_src


* Use js-beautify to cleanup messy javascript
  This can be also be used for reformatting JSON files for viewing them
  #+begin_src emacs-lisp
    (add-to-list 'load-path (concat otherpackages "js-beautify/"))
    (when (executable-find "js-beautify")
      (autoload 'js-beautify "js-beautify")
      (global-set-key (kbd "M-[") 'js-beautify))
  #+end_src


* Enable eldoc in modeline when minibuffer is active
** Enable eldoc
  #+begin_src emacs-lisp
    (eldoc-in-minibuffer-mode 1)
  #+end_src

** Use eval-expression to evaluate expressions
   #+begin_src emacs-lisp
     (setq eldoc-eval-preferred-function 'eval-expression)
   #+end_src


* Save macros as functions, credit [[draketo.de/light/english/emacs/babcore]]
  #+begin_src emacs-lisp
    (defun my-save-current-kbd-macro-to-dot-emacs (name)
      "Save the current macro as named function definition inside
    your initialization file so you can reuse it anytime in the
    future."
      (interactive "SSave Macro as: ")
      (name-last-kbd-macro name)
      (save-excursion 
        (find-file-literally user-init-file)
        (goto-char (point-max))
        (insert "\n\n;; Saved macro\n")
        (insert-kbd-macro name)
        (insert "\n")))
  #+end_src


* Enable discover mode
** Enable the mode
  #+begin_src emacs-lisp
    (global-discover-mode +1)
  #+end_src

** For some reason 'C-x r' does not work with discover
   #+begin_src emacs-lisp
     (define-key undo-tree-map (kbd "C-x r U") nil)
     (define-key undo-tree-map (kbd "C-x r u") nil)
     (define-key undo-tree-map (kbd "C-x r") nil)
     (global-unset-key (kbd "C-x r M-w"))
   #+end_src


* Additional keybinding for redo in calc
  Just for consistency with regular redo keybinding
  #+begin_src emacs-lisp
    (eval-after-load "calc"
      '(define-key calc-mode-map (kbd "C-?") #'calc-redo))
  #+end_src


* Keybinding to start calculator
  By default start calc, but with prefix argument start simple calculator
  #+begin_src emacs-lisp
    (defun my-start-calculator ()
      (interactive)
      (if current-prefix-arg
          (call-interactively #'calculator)
        (call-interactively #'calc)))

    (global-set-key (kbd "C-c C") #'my-start-calculator)
  #+end_src


* Install emacs-w3m if w3m is installed
** Keybindings for emacs-w3m
   #+begin_src emacs-lisp
     (defun my-set-w3m-keybindings ()
       (define-key w3m-mode-map (kbd "M-n") #'w3m-next-anchor)
       (define-key w3m-mode-map (kbd "M-p") #'w3m-previous-anchor)
       (define-key w3m-mode-map (kbd "<down>") #'next-line)
       (define-key w3m-mode-map (kbd "<up>") #'previous-line)
       (define-key w3m-mode-map (kbd "<left>") nil)
       (define-key w3m-mode-map (kbd "<right>") nil)
       (define-key w3m-mode-map (kbd "<C-prior>") #'w3m-previous-buffer)
       (define-key w3m-mode-map (kbd "<C-next>") #'w3m-next-buffer)
       (define-key w3m-mode-map (kbd "<C-S-prior>") #'w3m-tab-move-left)
       (define-key w3m-mode-map (kbd "<C-S-next>") #'w3m-tab-move-right)
       (define-key w3m-mode-map (kbd "C-c b") #'w3m-close-window)
       (define-key w3m-mode-map (kbd "C-t") #'w3m-create-empty-session)
       (define-key w3m-mode-map (kbd "C-w") #'w3m-delete-buffer))
   #+end_src

** Set mark before jumping to next/previous urls
   #+begin_src emacs-lisp
     (defun my-w3m-set-mark-before-jump ()
       (defadvice w3m-next-anchor (before my-w3m-set-mark-before-next-url (&rest args))
         (push-mark))

       (defadvice w3m-previous-anchor (before my-w3m-set-mark-before-previous-url (&rest args))
         (push-mark))

       (defadvice w3m-view-this-url (before my-w3m-set-mark-before-viewing-url (&rest args))
         (push-mark))

       (ad-activate 'w3m-next-anchor)
       (ad-activate 'w3m-previous-anchor)
       (ad-activate 'w3m-view-this-url))
   #+end_src

** Activate the keybindings and advices after w3m loads
   #+begin_src emacs-lisp
     (eval-after-load "w3m"
       '(progn (my-set-w3m-keybindings)
               (my-w3m-set-mark-before-jump)))
   #+end_src

** Delete trailing spaces in w3m buffer
   #+begin_src emacs-lisp
     (add-hook 'w3m-display-hook (lambda (url)
                                   (let ((buffer-read-only nil))
                                     (delete-trailing-whitespace))))
   #+end_src

** Enable lnum mode for faster opening of urls
   #+begin_src emacs-lisp
     (add-hook 'w3m-mode-hook 'w3m-lnum-mode)
   #+end_src

** Install emacs-w3m if w3m executable is found
   #+begin_src emacs-lisp
     (when (executable-find "w3m")
       (my-install-package 'w3m)
       (global-set-key (kbd "C-c b") #'w3m)
       (global-set-key (kbd "C-c l") #'w3m-browse-url))
   #+end_src


* Start edit-server
  #+begin_src emacs-lisp
    (edit-server-start)
  #+end_src

