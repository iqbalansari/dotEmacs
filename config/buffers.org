* Install some useful packages
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-packages '(swap-buffers buffer-move ibuffer-projectile))
  #+END_SRC


* Create unique names for same named buffers
  #+BEGIN_SRC emacs-lisp
    (require 'uniquify)
    (setq uniquify-buffer-name-style 'forward)
  #+END_SRC


* Auto refresh buffers
  #+BEGIN_SRC emacs-lisp
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)
  #+END_SRC


* Use ibuffer instead of regular buffer switcher
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC


* Use ibuffer-projectile to group buffers by projects
** Group buffers by projectile projects
  #+BEGIN_SRC emacs-lisp
    (defun ibuffer-projectile-setup ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))

    (add-hook 'ibuffer-hook #'ibuffer-projectile-setup)
  #+END_SRC

** Include vc status in ibuffer-list
   #+BEGIN_SRC emacs-lisp
     (setq ibuffer-formats
           '((mark modified read-only vc-status-mini " "
                   (name 18 18 :left :elide)
                   " "
                   (size 9 -1 :right)
                   " "
                   (mode 16 16 :left :elide)
                   " "
                   (vc-status 16 16 :left)
                   " "
                   filename-and-process)))
   #+END_SRC


* Do not show empty groups in ibuffer
  #+BEGIN_SRC emacs-lisp
    (setq ibuffer-show-empty-filter-groups nil)
  #+END_SRC


* Do not skip some buffers in ibuffer
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'ibuf-ext
      (add-to-list 'ibuffer-never-show-predicates "\\*helm.*")
      (add-to-list 'ibuffer-never-show-predicates "\\*Flycheck.*"))
  #+END_SRC


* DWIM version of narrow commands
  Credits: [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html]]
  #+BEGIN_SRC emacs-lisp
    (defun narrow-or-widen-dwim (p)
      "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
            ((region-active-p)
             (narrow-to-region (region-beginning) (region-end)))
            ((derived-mode-p 'org-mode)
             (cond ((org-at-block-p)
                    (org-narrow-to-block))
                   (t (org-narrow-to-subtree))))
            (t (narrow-to-defun))))

    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  #+END_SRC


* TODO Disable swapping buffer with minibuffer when using buffer-move
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-do-not-swap-with-minibuffer (orig direction)
      (if (minibufferp (window-buffer (windmove-find-other-window direction)))
          (user-error "Not swapping with minibuffer")
        (apply orig (list direction))))

    (advice-add #'buf-move-to :around #'iqbal-do-not-swap-with-minibuffer)
  #+END_SRC


* Simulate buffer-switch-hook, since emacs does not have one
  Alternative approach would be to advise a low level function like
  `set-buffer`, but I guess that could lead to difficult-to-debug errors
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-last-buffer nil "Records last buffer that was visible")
    (defvar iqbal-buffer-change-in-progress-p nil
      "Used to avoid running iqbal-buffer-switch-hook while running a iqbal-buffer-switch-hook")

    (defun iqbal-run-buffer-switch-hooks-maybe ()
      "Run iqbal-buffer-switch-hook if the buffer has changed"
      (let ((current-buffer (current-buffer)))
        (when (and (not iqbal-buffer-change-in-progress-p)
                   (not (minibufferp current-buffer))
                   (not (eq current-buffer iqbal-last-buffer)))
          (let ((iqbal-buffer-change-in-progress-p t))
            (ignore-errors (run-hook-with-args 'buffer-switch-hook iqbal-last-buffer current-buffer)))
          (setq iqbal-last-buffer current-buffer))))

    (add-hook 'after-init-hook
              (lambda ()
                (add-hook 'post-command-hook #'iqbal-run-buffer-switch-hooks-maybe)))
  #+END_SRC


* Keybinding to swap buffers
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c b") 'swap-buffers)
  #+END_SRC


* Keybindings for buf-move
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<C-S-up>")     'buf-move-up)
    (global-set-key (kbd "<C-S-down>")   'buf-move-down)
    (global-set-key (kbd "<C-S-left>")   'buf-move-left)
    (global-set-key (kbd "<C-S-right>")  'buf-move-right)

    (with-eval-after-load 'org
      (org-defkey org-mode-map (kbd "<C-S-up>")     'buf-move-up)
      (org-defkey org-mode-map (kbd "<C-S-down>")   'buf-move-down)
      (org-defkey org-mode-map (kbd "<C-S-left>")   'buf-move-left)
      (org-defkey org-mode-map (kbd "<C-S-right>")  'buf-move-right))
  #+END_SRC


* Keybinding to kill current buffer without prompting for buffer name
  Use a custom command to kill the buffer since the standard `kill-this-buffer`
  commands seems to be tied to the menu bar see [http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/menu-bar.el?id=59b5723c9b613f14cd60cd3239cfdbc0d2343b18#n1865]
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-kill-this-buffer ()
      (interactive)
      (cond
       ((window-minibuffer-p (frame-selected-window (selected-frame))) (abort-recursive-edit))
       (t (kill-buffer (current-buffer)))))

    (global-set-key (kbd "C-x k") #'iqbal-kill-this-buffer)
  #+END_SRC

