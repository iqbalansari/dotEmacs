* Install some useful packages
  #+begin_src emacs-lisp
    (iqbal-install-packages '(swap-buffers ibuffer-projectile))
  #+end_src


* Create unique names for same named buffers
  #+begin_src emacs-lisp
    (load "uniquify")
    (setq uniquify-buffer-name-style 'forward)
  #+end_src


* Auto refresh buffers
  #+begin_src emacs-lisp
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)
  #+end_src


* Use ibuffer instead of regular buffer switcher
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+end_src


* Use ibuffer-projectile to group buffers by projects
** Group buffers by vc in ibuffer
  #+begin_src emacs-lisp
    (defun ibuffer-projectile-setup ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))

    (add-hook 'ibuffer-hook #'ibuffer-projectile-setup)
  #+end_src

** Include vc status in ibuffer-list
   #+begin_src emacs-lisp
     (setq ibuffer-formats
           '((mark modified read-only vc-status-mini " "
                   (name 18 18 :left :elide)
                   " "
                   (size 9 -1 :right)
                   " "
                   (mode 16 16 :left :elide)
                   " "
                   (vc-status 16 16 :left)
                   " "
                   filename-and-process)))
   #+end_src


* Filter groups for ibuffer
** The filters
  #+begin_src emacs-lisp
    (setq ibuffer-saved-filter-groups
          '(("default"
             ("Chat"
              (mode . circe-mode))
             ("Org"
              (or
               (mode . diary-mode)
               (mode . org-mode)
               (mode . org-agenda-mode)))
             ("LaTeX"
              (or
               (mode . latex-mode)
               (mode . LaTeX-mode)
               (mode . bibtex-mode)
               (mode . reftex-mode)))
             ("Gnus & News"
              (or
               (mode . message-mode)
               (mode . bbdb-mode)
               (mode . mail-mode)
               (mode . gnus-group-mode)
               (mode . gnus-summary-mode)
               (mode . gnus-article-mode)
               (name . "^\\(\\.bbdb\\|dot-bbdb\\)$")
               (name . "^\\.newsrc-dribble$")
               (mode . newsticker-mode)))
             ("Files"
              (filename . ".*"))
             ("Dired"
              (mode . dired-mode))
             ("Shell"
              (mode . shell-mode)
              (mode . eshell-mode)
              (mode . term-mode))
             ("Version Control"
              (or
               (mode . svn-status-mode)
               (mode . svn-log-edit-mode)
               (name . "^\\*svn-")
               (name . "^\\*vc\\*$")
               (name . "^\\*Annotate")
               (name . "^\\*git-")
               (name . "^\\*vc-")))
             ("Emacs"
              (or
               (name . "^\\*scratch\\*$")
               (name . "^\\*Messages\\*$")
               (name . "^TAGS\\(<[0-9]+>\\)?$")
               (name . "^\\*Occur\\*$")
               (name . "^\\*grep\\*$")
               (name . "^\\*Compile-Log\\*$")
               (name . "^\\*Backtrace\\*$")
               (name . "^\\*Process List\\*$")
               (name . "^\\*gud\\*$")
               (name . "^\\*Kill Ring\\*$")
               (name . "^\\*Completions\\*$")
               (name . "^\\*tramp")
               (name . "^\\*compilation\\*$")))
             ("Emacs Source"
              (mode . emacs-lisp-mode))
             ("Documentation"
              (or
               (mode . Info-mode)
               (mode . apropos-mode)
               (mode . woman-mode)
               (mode . help-mode)
               (mode . Man-mode)))
             ("Procs" (predicate . (get-buffer-process (current-buffer)))))))
  #+end_src

** Do not show empty groups
   #+begin_src emacs-lisp
     (setq ibuffer-show-empty-filter-groups nil)
   #+end_src

** Display ibuffer with filter groups
   #+begin_src emacs-lisp
     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (ibuffer-switch-to-saved-filter-groups "default")))
   #+end_src


* DWIM version of narrow commands
  Taken from [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html]]
  #+begin_src emacs-lisp
    (defun narrow-or-widen-dwim (p)
      "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
            ((region-active-p)
             (narrow-to-region (region-beginning) (region-end)))
            ((derived-mode-p 'org-mode)
             (cond ((org-at-block-p)
                    (org-narrow-to-block))
                   (t (org-narrow-to-subtree))))
            (t (narrow-to-defun))))

    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  #+end_src


* Simulate buffer-change-hook, since emacs does not have one
  Alternative approach would be to advise a low level function like
  `set-buffer`, but I guess that could lead to difficult-to-debug errors
  #+begin_src emacs-lisp
    (defvar iqbal-last-buffer nil "Records last buffer that was visible")
    (defvar iqbal-buffer-change-in-progress-p nil
      "Used to avoid running iqbal-buffer-change-hook while running a iqbal-buffer-change-hook")

    (defun iqbal-run-buffer-change-hooks-maybe ()
      "Run iqbal-buffer-change-hook if the buffer has changed"
      (let ((current-buffer (current-buffer)))
        (when (and (not iqbal-buffer-change-in-progress-p)
                   (not (minibufferp current-buffer))
                   (not (eq current-buffer iqbal-last-buffer)))
          (let ((iqbal-buffer-change-in-progress-p t))
            (ignore-errors (run-hook-with-args 'buffer-change-hook iqbal-last-buffer current-buffer)))
          (setq iqbal-last-buffer current-buffer))))

    (add-hook 'after-init-hook
              (lambda ()
                (add-hook 'post-command-hook #'iqbal-run-buffer-change-hooks-maybe)))
  #+end_src


* Keybinding to swap buffers
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c b") 'swap-buffers)
  #+end_src
