* Ensure that the required packages are installed
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-display-packages
      '(diminish
        eval-sexp-fu
        volatile-highlights
        solarized-theme
        page-break-lines
        highlight-thing
        hl-todo
        rich-minority))

    (iqbal-install-packages iqbal-display-packages)
  #+END_SRC


* Replace yes-no questions with y-n questions
  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC


* Confirm before killing emacs
  #+BEGIN_SRC emacs-lisp
    (setq confirm-kill-emacs 'y-or-n-p)
  #+END_SRC


* Do not show the startup screen
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
  #+END_SRC


* Use solarized theme
** Do not use different font sizes
   #+BEGIN_SRC emacs-lisp
     (setq solarized-use-variable-pitch nil
           solarized-height-minus-1 1.0
           solarized-height-plus-1 1.0
           solarized-height-plus-2 1.0
           solarized-height-plus-3 1.0
           solarized-height-plus-4 1.0)
   #+END_SRC

** Fix underline position in X
   The default makes the mode-line appear broken in solarized theme
   #+BEGIN_SRC emacs-lisp
     (setq x-underline-at-descent-line t)
   #+END_SRC

** Use dark or light theme according time
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-load-solarized-theme (&optional frame)
      (interactive)
      (let ((current-hour (third (decode-time)))
            (current-minute (second (decode-time))))
        (if (and (< current-hour 19)
                 (> current-hour 7))
            (load-theme 'solarized-light t)
          (load-theme 'solarized-dark t))

        (with-eval-after-load 'company

          (set-face-attribute 'company-tooltip-common frame
                              :underline nil
                              :background (face-background 'company-tooltip)
                              :foreground (face-foreground 'company-tooltip)
                              :bold t)

          (set-face-attribute 'company-tooltip-common-selection frame
                              :underline nil
                              :background (face-background 'company-tooltip-selection)
                              :foreground (face-foreground 'company-tooltip-selection)
                              :bold t))))


    (when (display-graphic-p)
      (add-hook 'after-init-hook #'iqbal-load-solarized-theme))
  #+END_SRC


* Don't show menubar, scrollbar and toolbar
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+END_SRC


* Enable visual line mode
  #+BEGIN_SRC emacs-lisp
    (global-visual-line-mode)
  #+END_SRC


* Fonts setup
** Use DejaVu Sans Mono / Source Code Pro / Consolas font if available
   #+BEGIN_SRC emacs-lisp
     (set-frame-font (cond ((member "Source Code Pro" (font-family-list)) "Source Code Pro-10.5")
                           ((member "DejaVu Sans Mono" (font-family-list)) "DejaVu Sans Mono-09.5")
                           ((member "Consolas" (font-family-list)) "Consolas-11.7:light"))
                     t
                     t)
   #+END_SRC

** Use symbola for symbols
   It is appended to current font-spec, since
   1) We do not want to override earlier settings
   2) Symbola fonts are not monospace, we want to use them as a last resort
      otherwise some things current config break eg. org-dashboard uses the
      character █ to draw its progress bars, since Symbola's fullblock takes
      more space than 'space' (␣) the size of progress bars is different for
      tasks with different progress.
   #+BEGIN_SRC emacs-lisp
     (when (member "Symbola" (font-family-list))
       (set-fontset-font t 'symbol (font-spec :family "Symbola") nil 'append))
   #+END_SRC


* Customizations for linum-mode
** Make custom linum consistent [http://www.emacswiki.org/emacs/LineNumbers#toc6]
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'linum
       (defface linum-leading-zero
         `((t :inherit 'linum
              :foreground ,(face-attribute 'linum :background nil t)))
         "Face for displaying leading zeroes for line numbers in display margin."
         :group 'linum)

       (defun linum-format-func (line)
         (let ((w (length
                   (number-to-string (count-lines (point-min) (point-max))))))
           (concat
            (propertize (make-string (- w (length (number-to-string line))) ?0)
                        'face 'linum-leading-zero)
            (propertize (concat " " (number-to-string line) " ") 'face 'linum))))

       (setq linum-format 'linum-format-func))
   #+END_SRC


* Customizations for modeline
** Banish minor-modes out of mode-line
   #+BEGIN_SRC emacs-lisp
     (setq rm-whitelist "FlyC\\|mc:")
     (rich-minority-mode +1)
   #+END_SRC

** Display current column number
   #+BEGIN_SRC emacs-lisp
     (column-number-mode)
   #+END_SRC

** Do not display time
   #+BEGIN_SRC emacs-lisp
     (display-time-mode -1)
   #+END_SRC

** Indicate size in modeline
   #+BEGIN_SRC emacs-lisp
     (size-indication-mode)
   #+END_SRC


* Highlight changes in the buffer
  #+BEGIN_SRC emacs-lisp
    (setq highlight-changes-visibility-initial-state nil)
    (global-highlight-changes-mode t)
    (set-face-foreground 'highlight-changes nil)
    (set-face-background 'highlight-changes "#382f2f")
    (set-face-foreground 'highlight-changes-delete nil)
    (set-face-background 'highlight-changes-delete "#916868")
  #+END_SRC


* Highlight current line
  #+BEGIN_SRC emacs-lisp
    (when (display-graphic-p)
      (global-hl-line-mode) )
  #+END_SRC


* Temporarily highlight yanks and undos
  #+BEGIN_SRC emacs-lisp
    (require 'volatile-highlights)
    (volatile-highlights-mode 1)
  #+END_SRC


* Display the keys pressed the minibuffer
  #+BEGIN_SRC emacs-lisp
    (setq echo-keystrokes 0.1)
  #+END_SRC


* Customizations for cursor
** Display cursor as bar
   #+BEGIN_SRC emacs-lisp
     (setq-default cursor-type 'box)
   #+END_SRC

** Don't blink the cursor
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode 0)
   #+END_SRC


* Change the cursor display according to minor modes
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-set-cursor-color-color nil)
    (defvar iqbal-set-cursor-color-buffer nil)

    (defun iqbal-set-cursor-color-according-to-mode ()
      "Change cursor color according to some minor modes."
      (let ((color (cond (buffer-read-only "purple1")
                         (overwrite-mode "red")
                         (t "#38B4D2"))))
        (unless (and (string= color iqbal-set-cursor-color-color)
                     (string= (buffer-name) iqbal-set-cursor-color-buffer))
          (set-cursor-color (setq iqbal-set-cursor-color-color color))
          (setq iqbal-set-cursor-color-buffer (buffer-name)))))

    (add-hook 'post-command-hook 'iqbal-set-cursor-color-according-to-mode)
  #+END_SRC


* Key for toggling fullscreen
  A simple function to toggle fullscreen, which works on windows as well as Linux
  borrowed from emacswiki
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-fullscreen-p t "Check if fullscreen is on or off")

    (defun iqbal-non-fullscreen ()
      (interactive)
      (if (fboundp 'w32-send-sys-command)
          ;; WM_SYSCOMMAND restore #xf120
          (w32-send-sys-command 61728)
        (progn (set-frame-parameter nil 'width 82)
               (set-frame-parameter nil 'fullscreen 'fullheight))))

    (defun iqbal-fullscreen ()
      (interactive)
      (if (fboundp 'w32-send-sys-command)
          ;; WM_SYSCOMMAND maximaze #xf030
          (w32-send-sys-command 61488)
        (set-frame-parameter nil 'fullscreen 'fullboth)))

    (defun iqbal-toggle-fullscreen ()
      (interactive)
      (setq iqbal-fullscreen-p (not iqbal-fullscreen-p))
      (if iqbal-fullscreen-p
          (iqbal-non-fullscreen)
        (iqbal-fullscreen)))

    (global-set-key (kbd "<f11>") 'iqbal-toggle-fullscreen)
  #+END_SRC


* Avoid jumps of scrolling 
  #+BEGIN_SRC emacs-lisp
    (setq scroll-margin 0)
    (setq redisplay-dont-pause t)
  #+END_SRC


* Better scrolling with mouse
  #+BEGIN_SRC emacs-lisp
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  #+END_SRC


* Flash the currently executed sexp
** Load eval-sexp-fu
  #+BEGIN_SRC emacs-lisp
    (require 'eval-sexp-fu)
  #+END_SRC

** Custom colors
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'eval-sexp-fu-flash nil :background "#38B4D2" :foreground nil)
   #+END_SRC


* Not ringing and dinging please!
  #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
  #+END_SRC


* Fix scroll lagging on windows not very good but better than earlier
  #+BEGIN_SRC emacs-lisp
    (setq redisplay-dont-pause t
          scroll-margin 1
          scroll-step 1
          scroll-conservatively 10000
          scroll-preserve-screen-position 1)
  #+END_SRC


* Show form feed characters as horizontal lines
  #+BEGIN_SRC emacs-lisp
    (global-page-break-lines-mode)
  #+END_SRC


* Display buffer name in frame title
  #+BEGIN_SRC emacs-lisp
    (setq frame-title-format
          '(:eval (if (buffer-file-name)
                      (abbreviate-file-name (buffer-file-name))
                    "%b")))
  #+END_SRC


* Diminsh some minor modes
  #+BEGIN_SRC emacs-lisp :tangle no
    ;; Apparently package.el fails to autoload this sometimes
    (require 'diminish)

    (diminish 'visual-line-mode)
    (with-eval-after-load 'yasnippet (diminish 'yas-minor-mode))
    (with-eval-after-load 'smartparens (diminish 'smartparens-mode))
    (with-eval-after-load 'volatile-highlights (diminish 'volatile-highlights-mode))
    (with-eval-after-load 'projectile (diminish 'projectile-mode))
    (with-eval-after-load 'auto-complete (diminish 'auto-complete-mode))
    (with-eval-after-load 'undo-tree (diminish 'undo-tree-mode))
    (with-eval-after-load 'guide-key (diminish 'guide-key-mode))
    (with-eval-after-load 'back-button (diminish 'back-button-mode))
    (with-eval-after-load 'eldoc (diminish 'eldoc-mode))
    (with-eval-after-load 'hideshow (diminish 'hs-minor-mode))
    (with-eval-after-load 'autopair (diminish 'autopair-mode))
    (with-eval-after-load 'hilit-chg (diminish 'highlight-changes-mode))
    (with-eval-after-load 'tern (diminish 'tern-mode))
    (with-eval-after-load 'company (diminish 'company-mode))
    (with-eval-after-load 'page-break-lines (diminish 'page-break-lines-mode))
    (with-eval-after-load 'merlin (diminish 'merlin-mode))
    (with-eval-after-load 'auto-complete (diminish 'auto-complete-mode))    
    (with-eval-after-load 'flyspell (diminish 'flyspell-mode))
    (with-eval-after-load 'ggtags (diminish 'ggtags-mode))
    (with-eval-after-load 'subword (diminish 'subword-mode))
    (with-eval-after-load 'abbrev (diminish 'abbrev-mode))
    (with-eval-after-load 'helm-mode (diminish 'helm-mode))
    (with-eval-after-load 'eyebrowse (diminish ' eyebrowse-mode))
  #+END_SRC


* Recursive minibuffers
** Enable recursive minibuffers
   #+BEGIN_SRC emacs-lisp
     (setq enable-recursive-minibuffers t)
   #+END_SRC

** Better indication of recursive minibuffers
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-minibuffer-depth-indicator-function (minibuffer-depth)
       (propertize (concat (make-string (1- minibuffer-depth) ?>) " ") 'face '(:inherit default :foreground "red")))

     (setq minibuffer-depth-indicator-function #'iqbal-minibuffer-depth-indicator-function)

     (minibuffer-depth-indicate-mode +1)
   #+END_SRC


* Highlight TODO items in current buffer
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook #'hl-todo-mode)
  #+END_SRC
