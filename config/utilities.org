* Install required packages
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-packages '(inf-mongo
                              helm-commandlinefu
                              eldoc-eval
                              guide-key
                              which-key
                              rainbow-mode))

    (when (executable-find "pandoc")
      (iqbal-install-package 'pandoc-mode))
  #+END_SRC


* Install try, useful for trying out packages before actually installing them
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-package 'try)
  #+END_SRC


* Command to replace the current expression with the result of its evaluation
  #+BEGIN_SRC emacs-lisp
    (defun eval-and-replace ()
      "Replace the preceding sexp with its value."
      (interactive)
      (backward-kill-sexp)
      (condition-case nil
          (prin1 (eval (read (current-kill 0)))
                 (current-buffer))
        (error (message "Invalid expression")
               (insert (current-kill 0)))))

    (global-set-key (kbd "C-c e") 'eval-and-replace)
  #+END_SRC


* Keybinding for starting proced
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-p") 'proced)
  #+END_SRC


* Start emacs-server
  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC


* Use 'C-h C-a' as a entry point to starting various types of apropos
  #+BEGIN_SRC emacs-lisp
    (setq apropos-do-all t)
    (global-set-key (kbd "C-h a") 'apropos-command)
    (define-prefix-command 'Apropos-Prefix nil "Apropos (a,d,f,l,v,C-v)")
    (global-set-key (kbd "C-h C-a") 'Apropos-Prefix)
    (define-key Apropos-Prefix (kbd "a")   'apropos)
    (define-key Apropos-Prefix (kbd "C-a") 'apropos)
    (define-key Apropos-Prefix (kbd "d")   'apropos-documentation)
    (define-key Apropos-Prefix (kbd "f")   'apropos-command)
    (define-key Apropos-Prefix (kbd "l")   'apropos-library)
    (define-key Apropos-Prefix (kbd "v")   'apropos-variable)
    (define-key Apropos-Prefix (kbd "C-v") 'apropos-value)
  #+END_SRC


* Enable eldoc in modeline when minibuffer is active
** Enable eldoc
  #+BEGIN_SRC emacs-lisp
    (eldoc-in-minibuffer-mode 1)
  #+END_SRC

** Use eval-expression to evaluate expressions
   #+BEGIN_SRC emacs-lisp
     (setq eldoc-eval-preferred-function 'eval-expression)
   #+END_SRC


* Save macros as functions, credit [[http://draketo.de/light/english/emacs/babcore]]
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-save-current-kbd-macro-to-dot-emacs (name)
      "Save the current macro as named function definition inside
    your initialization file so you can reuse it anytime in the
    future."
      (interactive "SSave Macro as: ")
      (name-last-kbd-macro name)
      (save-excursion 
        (find-file-literally user-init-file)
        (goto-char (point-max))
        (insert "\n\n;; Saved macro\n")
        (insert-kbd-macro name)
        (insert "\n")))
  #+END_SRC


* which-key configuration
** Enable which-key mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook #'which-key-mode)
   #+END_SRC

** Display which-key menu as window at the bottom
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'which-key
       (which-key-setup-side-window-bottom))
   #+END_SRC

** Let it take some more space
   #+BEGIN_SRC emacs-lisp
     (setq which-key-side-window-max-height 0.5)
   #+END_SRC

** Paging for keybindings starting with C-x, C-c and C-h
   #+BEGIN_SRC emacs-lisp
     (setq which-key-paging-prefixes '("C-x" "C-c" "C-h"))
     (setq which-key-paging-key "<f5>")
   #+END_SRC

** Prettier (unicode) display for special keys
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'which-key
       (dolist (replacements '(("TAB" . "↹") ("RET" . "⏎") ("SPC" . "␣") ("DEL" . "⌫") ("ESC" . "⎋")))
         (when (char-displayable-p (string-to-char (cdr replacements)))
           (push replacements which-key-key-replacement-alist))))
   #+END_SRC

** Custom sorting order for keys in which-key
   Inspired by https://github.com/justbur/emacs-which-key/issues/44#issuecomment-141950413
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-which-key-prefix-first-then-by-keys (acons bcons)
       (let ((a-group-p (which-key--group-p (cdr acons)))
             (b-group-p (which-key--group-p (cdr bcons))))
         (if (eq a-group-p b-group-p)
             (which-key-key-order acons bcons)
           a-group-p)))

     (setq which-key-sort-order 'iqbal-which-key-prefix-first-then-by-keys)
   #+END_SRC

** Keybinding to view toplevel keys
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-h W") #'which-key-show-top-level)
   #+END_SRC


* Magic buffer
  #+BEGIN_SRC emacs-lisp
    (defun magic-buffer ()
      (interactive)
      (let (( file-name
              (concat temporary-file-directory
                      "magic-buffer.el"))
            ( try-downloading
              (lambda ()
                (url-copy-file
                 "https://raw.githubusercontent.com/sabof/magic-buffer/master/magic-buffer.el"
                 file-name t)
                (require 'magic-buffer file-name))))
        (condition-case nil
            (funcall try-downloading)
          (error (funcall try-downloading))))
      (magic-buffer))
  #+END_SRC


* Additional keybinding for redo in calc
  Just for consistency with regular redo keybinding
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'calc
      (define-key calc-mode-map (kbd "C-?") #'calc-redo)
      (define-key calc-mode-map iqbal-hide-app #'calc-quit))
  #+END_SRC


* Keybinding to start calculator
  By default start calc, but with prefix argument start simple calculator
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-start-calculator ()
      (interactive)
      (if current-prefix-arg
          (call-interactively #'calculator)
        (call-interactively #'calc)))

    (define-key iqbal-launcher-map "c" #'iqbal-start-calculator)
  #+END_SRC


* Keybinding for re-builder
  #+BEGIN_SRC emacs-lisp
    (define-key iqbal-launcher-map "r" #'re-builder)
  #+END_SRC


* Make links in comments and string clickable
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook #'goto-address-prog-mode)
  #+END_SRC


* Make bug references in comments and string clickable
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook #'bug-reference-prog-mode)
  #+END_SRC


* pandoc-mode configuration
** Change default keybinding
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'pandoc-mode
       (define-key iqbal-launcher-map "p" #'pandoc-main-hydra/body)
       (define-key pandoc-mode-map (kbd "C-c /") nil))
   #+END_SRC

** Enable pandoc mode in text-modes
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-enable-pandoc-mode-maybe ()
       (when (locate-library "pandoc-mode")
         (pandoc-mode +1)))

     (add-hook 'text-mode-hook #'iqbal-enable-pandoc-mode-maybe)
   #+END_SRC
