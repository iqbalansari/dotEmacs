* Ensure that required packages are installed
  + [[http://magit.github.io/magit/][magit]] - Awesome git interface for emacs
  + [[https://github.com/dgutov/diff-hl][diff-hl]] - Emacs package for highlighting uncommitted changes
  + [[https://github.com/syohex/emacs-git-messenger][git-messenger]] - Popup last commit message associated with current line
  + [[https://github.com/pidu/git-timemachine][git-timemachine]] - Walk through git revisions of a file
  #+begin_src emacs-lisp
    (defvar iqbal-version-control-packages
      '(magit
        diff-hl
        git-timemachine
        git-messenger))

    (when (zerop (call-process "git" nil nil nil "flow" "init" "help"))
      (add-to-list 'iqbal-version-control-packages 'magit-gitflow))

    (iqbal-install-packages iqbal-version-control-packages)
  #+end_src


* Use ido as completing-read function in magit
  #+begin_src emacs-lisp
    (setq magit-completing-read-function 'magit-ido-completing-read)
  #+end_src


* Enable revert backup
  #+begin_src emacs-lisp
    (setq magit-revert-backup t)
  #+end_src


* Ignore whitespace in magit
  The following function enable hiding of whitespace changes in
  magit status buffer. Copied from [[http://whattheemacsd.com/setup-magit.el-02.html][whattheemacsd]].

  #+begin_src emacs-lisp
    (defun magit-toggle-whitespace ()
      (interactive)
      (if (member "-w" magit-diff-options)
          (magit-dont-ignore-whitespace)
        (magit-ignore-whitespace)))

    (defun magit-ignore-whitespace ()
      (interactive)
      (add-to-list 'magit-diff-options "-w")
      (magit-refresh))

    (defun magit-dont-ignore-whitespace ()
      (interactive)
      (setq magit-diff-options (remove "-w" magit-diff-options))
      (magit-refresh))
  #+end_src


* Do not check for commit conventions in magit commit buffer
  #+begin_src emacs-lisp
    (eval-after-load 'magit
      (remove-hook 'git-commit-finish-query-functions
                   #'git-commit-check-style-conventions))
  #+end_src


* Use 'emacsclient' as editor
  #+begin_src emacs-lisp
    (setenv "EDITOR" "emacsclient")
  #+end_src


* Show complete git commit message in git-messenger popup
  #+begin_src emacs-lisp
    (setq git-messenger:show-detail t)
  #+end_src


* Fullscreen magit
  Start magit in fullscreen, on exit (from magit) restore
  window configuration. Again copied from [[http://whattheemacsd.com/setup-magit.el-02.html][whattheemacsd]].

  #+begin_src emacs-lisp
    (eval-after-load "magit"
      '(defadvice magit-status (around magit-fullscreen activate)
         (window-configuration-to-register :magit-fullscreen)
         ad-do-it
         (delete-other-windows)))

    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))
  #+end_src


* Configurations for magit-repos-dir
  If projectile is present then configure magit to prompt for the
  projectile projects that are also git repositories, when magit is
  invoked with a prefix argument or from a non-git folder
  #+begin_src emacs-lisp
    (eval-after-load "projectile"
      '(progn (setq magit-repository-directories (mapcar (lambda (dir)
                                              (substring dir 0 -1))
                                            (cl-remove-if-not (lambda (project)
                                                             (file-directory-p (concat project "/.git/")))
                                                           (projectile-relevant-known-projects)))

                    magit-repository-directories-depth 1)))
  #+end_src


* Function to launch magit UI
  This simply checks if the magit status mode is active now, in which case it prompts
  for the git repository to switch to
  #+begin_src emacs-lisp
    (defun iqbal-magit-status ()
      (interactive)
      (let ((current-prefix-arg (or current-prefix-arg (equal major-mode 'magit-status-mode))))
        (call-interactively 'magit-status)))
  #+end_src


* Keybindings
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x g") 'iqbal-magit-status)

    (eval-after-load "magit"
      '(progn (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
             (define-key magit-status-mode-map (kbd "W") 'magit-toggle-whitespace)))

    (eval-after-load "git-commit-mode"
      '(define-key git-commit-mode-map (kbd "C-c C-k") 'git-commit-abort))

    (global-set-key (kbd "C-x v p") 'git-messenger:popup-message)
  #+end_src


* Enable diff-hl mode
  #+begin_src emacs-lisp
    (global-diff-hl-mode)
  #+end_src


* Enable magit-gitflow in magit mode
  #+begin_src emacs-lisp
    (when (locate-library "magit-gitflow")
      (autoload 'turn-on-magit-gitflow "magit-gitflow")
      (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
      (eval-after-load "magit-gitflow"
        '(progn (define-key magit-gitflow-mode-map (kbd "C-f") nil)
                (define-key magit-gitflow-mode-map (kbd "C-c f") 'magit-gitflow-popup))))
  #+end_src


* Enable smerge mode automatically for conflicted files
  #+begin_src emacs-lisp
    (defun iqbal-enable-smerge-maybe (last-buffer current-buffer)
      (when (vc-backend buffer-file-name)
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "^<<<<<<< " nil t)
            (smerge-mode +1)))))

    (add-hook 'buffer-change-hook 'iqbal-enable-smerge-maybe)

    (defun iqbal-org-mode-expand-all ()
      (when (eq major-mode 'org-mode)
        (show-all)))

    (add-hook 'smerge-mode-hook #'iqbal-org-mode-expand-all)
  #+end_src


* Configurations for ediff
  #+begin_src emacs-lisp
    (setq ediff-split-window-function 'split-window-vertically)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  #+end_src


* Restoring window configuration after ediff session
  #+begin_src emacs-lisp
    (defun iqbal-store-pre-ediff-winconfig ()
      (setq iqbal-ediff-last-windows (current-window-configuration)))

    (defun iqbal-restore-pre-ediff-winconfig ()
      (set-window-configuration iqbal-ediff-last-windows))

    (add-hook 'ediff-before-setup-hook #'iqbal-store-pre-ediff-winconfig)
    (add-hook 'ediff-quit-hook #'iqbal-restore-pre-ediff-winconfig)
  #+end_src


* Unfold all headlines for an org file in ediff mode
  Taken from [[http://orgmode.org/worg/org-hacks.html]]
  #+begin_src emacs-lisp
    (add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
    (add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
    ;; Check for org mode and existence of buffer
    (defun f-ediff-org-showhide (buf command &rest cmdargs)
      "If buffer exists and is orgmode then execute command"
      (when buf
        (when (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
          (save-excursion (set-buffer buf) (apply command cmdargs)))))

    (defun f-ediff-org-unfold-tree-element ()
      "Unfold tree at diff location"
      (f-ediff-org-showhide ediff-buffer-A 'org-reveal)  
      (f-ediff-org-showhide ediff-buffer-B 'org-reveal)  
      (f-ediff-org-showhide ediff-buffer-C 'org-reveal))

    (defun f-ediff-org-fold-tree ()
      "Fold tree back to top level"
      (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)  
      (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)  
      (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1))
  #+end_src


* Disable vc on tramp files
  #+begin_src emacs-lisp
    (eval-after-load "tramp"
      '(setq vc-ignore-dir-regexp
             (format "\\(%s\\)\\|\\(%s\\)"
                     vc-ignore-dir-regexp
                     tramp-file-name-regexp)))
  #+end_src
