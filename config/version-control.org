* Ensure that required packages are installed
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-version-control-packages
      '(magit
        diff-hl
        git-timemachine
        git-messenger
        ssh-agency))

    (when (zerop (call-process "git" nil nil nil "flow" "init" "help"))
      (add-to-list 'iqbal-version-control-packages 'magit-gitflow))

    (iqbal-install-packages iqbal-version-control-packages)
  #+END_SRC


* Let magit revert buffers silently
  #+BEGIN_SRC emacs-lisp
    (setq magit-revert-buffers 'silent)
  #+END_SRC


* Enable revert backup
  #+BEGIN_SRC emacs-lisp
    (setq magit-revert-backup t)
  #+END_SRC


* Do not check for commit conventions in magit commit buffer
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'magit
      (remove-hook 'git-commit-finish-query-functions #'git-commit-check-style-conventions))
  #+END_SRC


* Do not verify if pushing current branch to its upstream branch
  #+BEGIN_SRC emacs-lisp
    (setq magit-push-always-verify 'PP)
  #+END_SRC


* Use 'emacsclient' as editor
  #+BEGIN_SRC emacs-lisp
    (setenv "EDITOR" "emacsclient")
  #+END_SRC


* Show complete git commit message in git-messenger popup
  #+BEGIN_SRC emacs-lisp
    (setq git-messenger:show-detail t)
  #+END_SRC


* Fullscreen magit
  Start magit in fullscreen, on exit (from magit) restore
  window configuration. Again copied from [[http://whattheemacsd.com/setup-magit.el-02.html][whattheemacsd]].

  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'magit
      (defadvice magit-status (around magit-fullscreen activate)
        (window-configuration-to-register :magit-fullscreen)
        ad-do-it
        (delete-other-windows)))

    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))
  #+END_SRC


* Configurations for magit-repos-directories
  If projectile is present then configure magit to prompt for the
  projectile projects that are also git repositories, when magit is
  invoked with a prefix argument or from a non-git folder
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-update-magit-repository-directories ()
      (setq magit-repository-directories (mapcar #'directory-file-name
                                                 (cl-remove-if-not (lambda (project)
                                                                     (file-directory-p (concat project "/.git/")))
                                                                   (projectile-relevant-known-projects)))

            magit-repository-directories-depth 1))

    (add-hook 'projectile-global-mode-hook #'iqbal-update-magit-repository-directories)
    (add-hook 'projectile-switch-project-hook #'iqbal-update-magit-repository-directories)

  #+END_SRC


* Function to launch magit UI
  This simply checks if the magit status mode is active now, in which case it prompts
  for the git repository to switch to
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-magit-status ()
      (interactive)
      (let ((current-prefix-arg (or current-prefix-arg (equal major-mode 'magit-status-mode))))
        (call-interactively 'magit-status)))
  #+END_SRC


* diff-hl config
** Display diff-hl highlight on right fringe
   This avoids conflicts with flycheck
   #+BEGIN_SRC emacs-lisp
     (setq diff-hl-side 'right)
   #+END_SRC

** Enable diff-hl mode
   #+BEGIN_SRC emacs-lisp
     (global-diff-hl-mode)
   #+END_SRC


* Enable magit-gitflow in magit mode
  #+BEGIN_SRC emacs-lisp
    (when (locate-library "magit-gitflow")
      (autoload 'turn-on-magit-gitflow "magit-gitflow")
      (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
      (with-eval-after-load 'magit-gitflow
        (define-key magit-gitflow-mode-map (kbd "C-f") nil)
        (define-key magit-gitflow-mode-map (kbd "C-c f") 'magit-gitflow-popup)))
  #+END_SRC


* Enable smerge mode automatically for conflicted files
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-enable-smerge-maybe (last-buffer current-buffer)
      (when (vc-backend buffer-file-name)
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "^<<<<<<< " nil t)
            (smerge-mode +1)))))

    (add-hook 'buffer-switch-hook 'iqbal-enable-smerge-maybe)

    (defun iqbal-org-mode-expand-all ()
      (when (eq major-mode 'org-mode)
        (show-all)))

    (add-hook 'smerge-mode-hook #'iqbal-org-mode-expand-all)
  #+END_SRC


* Change prefix for smerge mode
  #+BEGIN_SRC emacs-lisp
    (setq smerge-command-prefix "\C-cv")

    (defun iqbal-redefine-smerge-keybindings ()
      (easy-mmode-defmap smerge-mode-map
                         `((,smerge-command-prefix . ,smerge-basic-map))
                         "Keymap for `smerge-mode'."))

    (add-hook 'smerge-mode-hook #'iqbal-redefine-smerge-keybindings)
  #+END_SRC


* Configurations for ediff
  #+BEGIN_SRC emacs-lisp
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  #+END_SRC


* Restoring window configuration after ediff session
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-ediff-last-windows nil)

    (defun iqbal-store-pre-ediff-winconfig ()
      (setq iqbal-ediff-last-windows (current-window-configuration)))

    (defun iqbal-restore-pre-ediff-winconfig ()
      (set-window-configuration iqbal-ediff-last-windows))

    (add-hook 'ediff-before-setup-hook #'iqbal-store-pre-ediff-winconfig)
    (add-hook 'ediff-quit-hook #'iqbal-restore-pre-ediff-winconfig)
  #+END_SRC


* Follow symlinks automatically
  #+BEGIN_SRC emacs-lisp
    (setq vc-follow-symlinks t)
  #+END_SRC


* Unfold all headlines for an org file in ediff mode
  Credits: [[http://orgmode.org/worg/org-hacks.html]]
  #+BEGIN_SRC emacs-lisp
    (add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
    (add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
    ;; Check for org mode and existence of buffer
    (defun f-ediff-org-showhide (buf command &rest cmdargs)
      "If buffer exists and is orgmode then execute command"
      (when buf
        (when (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
          (save-excursion (set-buffer buf) (apply command cmdargs)))))

    (defun f-ediff-org-unfold-tree-element ()
      "Unfold tree at diff location"
      (f-ediff-org-showhide ediff-buffer-A 'org-reveal)  
      (f-ediff-org-showhide ediff-buffer-B 'org-reveal)  
      (f-ediff-org-showhide ediff-buffer-C 'org-reveal))

    (defun f-ediff-org-fold-tree ()
      "Fold tree back to top level"
      (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)  
      (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)  
      (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1))
  #+END_SRC


* Disable vc on tramp files
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'tramp
      (setq vc-ignore-dir-regexp
            (format "\\(%s\\)\\|\\(%s\\)"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp)))
  #+END_SRC


* Keybindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x g") 'iqbal-magit-status)

    (with-eval-after-load 'magit
      (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))

    (with-eval-after-load 'git-commit-mode
      (define-key git-commit-mode-map (kbd "C-c C-k") 'git-commit-abort))

    (global-set-key (kbd "C-x v p") 'git-messenger:popup-message)
  #+END_SRC

  
