* Install the required libraries
** Install mu when on Linux
   #+begin_src emacs-lisp
     (when (eq system-type 'gnu/linux)
       ;; Install only if the prerequisites are satisfied
       (if (and (executable-find "autoreconf")
                (executable-find "xapian-config")
                (executable-find "libtool")
                (or (and (getenv "GMIME_CFLAGS")
                         (getenv "GMIME_LIBS"))
                    (when (executable-find "pkg-config")
                      (zerop (shell-command "pkg-config --exists gmime-2.6")))))
           (progn (iqbal-install-package 'mu4e)
                  (when (and (boundp 'mu4e-maildir)
                             (not (file-exists-p mu4e-maildir)))
                    (warn "Please set `mu4e-maildir' to your maildir")))
         (message "You need to install `autoconf', `libxapian-dev', `libtool'
     and `libgmime-2.6-dev' for building mu4e")))
   #+end_src

** Install notify.el for notifications
   #+begin_src emacs-lisp
     (iqbal-install-package 'notify)
   #+end_src


* Set mail-host-address
  #+begin_src emacs-lisp
    (setq mail-host-address "emacs.localhost")
  #+end_src


* Auto-complete addresses in 'From', 'To' field in message mode
** Use company mode for better completion interface
   Remove text-properties that interfere with company mode's menu
   #+begin_src emacs-lisp
     (defun iqbal-strip-message-mode-problematic-text-props ()
       (save-excursion
         (goto-char (point-min))
         (when (search-forward-regexp (concat "^" mail-header-separator) nil t)
           (remove-text-properties (match-beginning 0) (match-end 0) '(rear-nonsticky)))))

     (add-hook 'message-mode-hook 'iqbal-strip-message-mode-problematic-text-props)
     (add-hook 'mu4e-compose-mode-hook 'iqbal-strip-message-mode-problematic-text-props)
   #+end_src


* Enable flyspell mode in message-mode
  #+begin_src emacs-lisp
    (add-hook 'message-mode-hook 'flyspell-mode)
    (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  #+end_src


* Offlineimap configuration
** Use offlineimap to update messages in mu4e
  #+begin_src emacs-lisp
    (when (executable-find "offlineimap")
      (setq mu4e-get-mail-command "offlineimap"))
  #+end_src

** .offlineimaprc is a unix conf file
  #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.offlineimaprc" . conf-mode))
  #+end_src


* General mu4e configuration
** Use w3m to render html messages
  #+begin_src emacs-lisp
    (when (executable-find "w3m")
      (setq mu4e-view-prefer-html t)
      (setq mu4e-html2text-command "w3m -dump -T text/html"))
  #+end_src

** View images inline in message view buffer
  #+begin_src emacs-lisp
    (setq mu4e-view-show-images t)

    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
  #+end_src

** Do not insert signature in sent emails
  #+begin_src emacs-lisp
    (setq mu4e-compose-signature-auto-include nil)
  #+end_src

** It is OK to use non-ascii characters
  #+begin_src emacs-lisp
    (setq mu4e-use-fancy-chars t)
  #+end_src

** Save attachments in ~/Downloads directory
  #+begin_src emacs-lisp
    (setq mu4e-attachment-dir "~/Downloads")
  #+end_src

** The information to displayed in the header line
  #+begin_src emacs-lisp
    (setq mu4e-headers-fields '((:human-date . 20)
                                (:tags . 12)
                                (:from . 22)
                                (:to . 22)
                                (:subject)))
  #+end_src

** Make bindings to open links in mu4e consistent with org-mode bindings
   #+begin_src emacs-lisp
     (with-eval-after-load 'mu4e-view
       (define-key mu4e-view-clickable-urls-keymap (kbd "C-c C-o") #'mu4e~view-browse-url-from-binding))
   #+end_src


* Additional actions for messages
** Action to retag message
   #+begin_src emacs-lisp
     (with-eval-after-load 'mu4e
       (add-to-list 'mu4e-headers-actions
                    (cons "retag" 'mu4e-action-retag-message)
                    t)
       (add-to-list 'mu4e-view-actions
                    (cons "retag" 'mu4e-action-retag-message)
                    t))
   #+end_src

** Action to view current message in a browser
   #+begin_src emacs-lisp
     (defun iqbal-mu4e-action-view-in-browser (msg)
       "Modified version of original `mu4e-action-view-in-browser' this adds a meta
     tag to charset, hardcoded to utf8 field, this makes the resulting document
     render properly in browser.

     The code assumes that the message is encoded in UTF-8, since finding the original
     encoding will require parsing the original message and most of the times the
     messages are utf-8 encoded"
       (let* ((html (mu4e-message-field msg :body-html))
              (txt (mu4e-message-field msg :body-txt))
              (tmpfile (format "%s%x.html" temporary-file-directory (random t))))
         (unless (or html txt)
           (mu4e-error "No body part for this message"))
         (with-temp-buffer
           (let* ((msg-text (or html (concat "<pre>" txt "</pre>")))
                  (html-format "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"></head>%s</html>"))
             (insert (if (string-prefix-p "<html" msg-text)
                         ;; If the html starts with <html, it probably already
                         ;; has the encoding declared
                         msg-text
                       ;; Otherwise add head with charset
                       (format html-format
                               ;; Wrap the text in body tag, usually not needed
                               ;; since modern browsers handle such malformed content
                               (format "%s%s%s"
                                       (unless (string-prefix-p "<body" msg-text) "<body>")
                                       msg-text
                                       (unless (string-prefix-p "<body" msg-text) "</body>")))))
             (write-file tmpfile)
             (browse-url (concat "file://" tmpfile))))))

     (with-eval-after-load 'mu4e
       (add-to-list 'mu4e-view-actions '("View in browser" . iqbal-mu4e-action-view-in-browser)))
   #+end_src

** Action to view current message in w3m
  #+begin_src emacs-lisp
    (defun mu4e-action-view-in-w3m (msg)
      "View message in w3m"
      (let ((browse-url-browser-function #'w3m-browse-url))
        (iqbal-mu4e-action-view-in-browser msg)))

    (with-eval-after-load 'mu4e
      (when (locate-library "w3m")
        (add-to-list 'mu4e-view-actions '("open in w3m" . mu4e-action-view-in-w3m))))
  #+end_src

** Action to import appointments from ical files
   #+begin_src emacs-lisp
     (require 'org-import-icalendar)

     (defun iqbal-cleanup-ical-text (text)
       (replace-regexp-in-string "\\\\," "," (replace-regexp-in-string "\\\\n" "\n" text)))

     (defun iqbal-parse-ical-event (event)
       ;; org-import-icalendar expects e to be bound
       (let ((e event))
         (list :location (iqbal-cleanup-ical-text (icalendar--get-event-property event 'LOCATION))
               :summary (iqbal-cleanup-ical-text (icalendar--convert-string-for-import
                                                  (or (icalendar--get-event-property event 'SUMMARY)
                                                      "No summary")))
               :description (iqbal-cleanup-ical-text (icalendar--get-event-property event 'DESCRIPTION))
               :date (org-import-icalendar-get-org-timestring event))))

     (defun iqbal-parse-ical-file (file)
       (with-temp-buffer
         ;; insert-file-contents does not work apparently due to the file not being
         ;; synced to the file-system (?). Hack around it. TODO: Properly debug this
         (message (format "Parsing appts from %s" file))
         (insert (with-current-buffer (find-file-noselect file) (buffer-string)))
         (dos-to-unix)
         (goto-char (point-min))
         (let* ((ical-data (icalendar--read-element nil nil))
                (zone-map (icalendar--convert-all-timezones ical-data))
                (events (icalendar--all-events ical-data)))
           (mapcar #'iqbal-parse-ical-event events))))

     (defun iqbal-make-appts-from-parsed-ical-data (data)
       (dolist (ical-data data)
         (let ((mail-link (org-store-link nil)))
           (append-to-file (format "\n* TODO %s\n  SCHEDULED: %s\n%s\n\nSource: %s"
                                   (plist-get ical-data :summary)
                                   (plist-get ical-data :date)
                                   (iqbal-indent-text (plist-get ical-data :description) 2)
                                   mail-link)
                           nil
                           (locate-user-emacs-file "org/agenda/appt.org")))))

     (defun iqbal-appt-from-ical (file)
       (iqbal-make-appts-from-parsed-ical-data (iqbal-parse-ical-file file)))

     (defun mu4e-action-appt-from-ics (msg)
       (dolist (index (hash-table-keys mu4e~view-attach-map))
         (let ((attachment (mu4e~view-get-attach msg index))
               (tmpfile (make-temp-file "mu4e")))
           (when (string= (plist-get attachment :mime-type)
                          "application/ics")
             (mu4e~proc-extract 'save
                                (mu4e-message-field msg :docid)
                                (plist-get attachment :index)
                                mu4e-decryption-policy
                                tmpfile)
             (iqbal-appt-from-ical tmpfile)
             (message (format "Imported %s" (plist-get attachment :name)))))))

     (with-eval-after-load 'mu4e
       (add-to-list 'mu4e-view-actions (cons "ical to appt" 'mu4e-action-appt-from-ics) t))
   #+end_src


* Auto update configuration
  #+begin_src emacs-lisp
    (setq mu4e-hide-index-messages t)
    (setq mu4e-get-mail-command "offlineimap")
    (setq mu4e-update-interval 300)
  #+end_src


* Start mu4e
  #+begin_src emacs-lisp
    (defun iqbal-start-mu4e-bg ()
      "Start in background avoiding any prompts and ignoring errors"
      (when (and (require 'mu4e nil t)
                 (file-directory-p mu4e-maildir)
                 (file-directory-p (concat mu4e-maildir mu4e-sent-folder))
                 (file-directory-p (concat mu4e-maildir mu4e-drafts-folder))
                 (file-directory-p (concat mu4e-maildir mu4e-trash-folder)))
        (ignore-errors (mu4e t))))

    (add-hook 'after-init-hook #'iqbal-start-mu4e-bg)
  #+end_src


* Notify the number of unread emails after fetching new mail
** Helper functions to interact with mu/mu4e
*** Function to get count of unread emails asynchronously
    #+begin_src emacs-lisp
      (defun iqbal-get-mu-unread-mail-count (callback)
        (let ((mail-count-command (format "%s find --nocolor flag:unread AND NOT flag:trashed 2>/dev/null | wc -l"
                                          mu4e-mu-binary))
              (process-filter (lexical-let ((callback callback))
                                (lambda (process output)
                                  (funcall callback (string-to-int (string-trim output)))))))
          (set-process-filter (start-process "mu4e-unread-count"
                                             nil
                                             (getenv "SHELL")
                                             "-c"
                                             mail-count-command)
                              process-filter)))
    #+end_src

*** Helper function to view unread emails
    #+begin_src emacs-lisp
      (defun iqbal-mu4e-view-unread-mails ()
        (interactive)
        (setq iqbal-pre-mu-win-config (current-window-configuration))
        (mu4e-headers-search-bookmark "flag:unread AND NOT flag:trashed")
        (setq iqbal-mu-win-config (current-window-configuration)))
    #+end_src

** Displaying unread mail count in modeline
*** Disable the default mail mode-line indicator 
   #+begin_src emacs-lisp
     (setq display-time-mail-string "")
   #+end_src

*** Custom mode-line indicator for mail
   #+begin_src emacs-lisp
     (defvar iqbal-mail-mode-line "")
     (add-to-list 'global-mode-string '(:eval iqbal-mail-mode-line) t)

     (defun iqbal-get-mailcount-mode-line-string (unread-mail-count)
       (when (not (zerop unread-mail-count))
         (concat " "
                 (propertize
                  "Mail"
                  'display (when (display-graphic-p)
                             display-time-mail-icon)
                  'face display-time-mail-face
                  'help-echo (concat (if (= unread-mail-count 1)
                                         "You have an unread email"
                                       (format "You have %s unread email(s)" unread-mail-count))
                                     "\nClick here to view "
                                     (if (= unread-mail-count 1) "it" "them"))
                  'mouse-face 'mode-line-highlight
                  'keymap '(mode-line keymap
                                      (mouse-1 . iqbal-mu4e-view-unread-mails)
                                      (mouse-2 . iqbal-mu4e-view-unread-mails)
                                      (mouse-3 . iqbal-mu4e-view-unread-mails)))
                 (if (zerop unread-mail-count)
                     " "
                   (format " [%d] " unread-mail-count)))))
   #+end_src

*** Function to update mail count in modeline
    #+begin_src emacs-lisp
      (defun iqbal-redisplay-mail-count-modeline (count)
        (setq iqbal-mail-mode-line (iqbal-get-mailcount-mode-line-string count))
        (force-mode-line-update))

      (defun iqbal-update-mail-count-modeline ()
        (iqbal-get-mu-unread-mail-count #'iqbal-redisplay-mail-count-modeline))
    #+end_src

*** Setup for updating the mail mode line
**** Update mode-line when mu4e loads
     #+begin_src emacs-lisp
       (with-eval-after-load 'mu4e (iqbal-update-mail-count-modeline))
     #+end_src

**** Update mode-line after executing marks
    #+begin_src emacs-lisp
      (defun iqbal-setup-mail-count-update-after-exec-marks ()
        (defadvice mu4e-mark-execute-all (after iqbal-update-mail-count)
          (iqbal-update-mail-count-modeline))
        (ad-activate 'mu4e-mark-execute-all))

      (with-eval-after-load 'mu4e '(iqbal-setup-mail-count-update-after-exec-marks))
    #+end_src

**** Update mode-line after viewing a message
     #+begin_src emacs-lisp
       (add-hook 'mu4e-view-mode-hook #'iqbal-update-mail-count-modeline)
     #+end_src

**** Update mode-line after fetching mail
     #+begin_src emacs-lisp
       (add-hook 'mu4e-index-updated-hook #'iqbal-update-mail-count-modeline)
     #+end_src

** Helper function to notify about unread email
  #+begin_src emacs-lisp
    (defun iqbal-mu4e-notify-unread-messages (unread-mail-count)
      (when (not (zerop unread-mail-count))
        (notify "mu4e" (if (= unread-mail-count 1)
                           "You have an unread email"
                         (format "You have %s unread email(s)" unread-mail-count)))))

    (defun iqbal-mu4e-notify-unread-messages-async ()
      (iqbal-get-mu-unread-mail-count #'iqbal-mu4e-notify-unread-messages))
  #+end_src

** Notify after updating the index
   #+begin_src emacs-lisp
     (add-hook 'mu4e-index-updated-hook #'iqbal-mu4e-notify-unread-messages-async)
   #+end_src


* Configuration for sending mail
** Sending mail from multiple smtp accounts when using mu4e
  #+begin_src emacs-lisp
    (defvar iqbal-mu4e-account-alist nil "List of accounts in format specified here [http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html]")

    (defun iqbal-mu4e-set-account ()
      "Set the account for composing a message."
      (let* ((account
              ;; If we are about to compose a reply retrieve try retrieving the
              ;; the account corresponding to 'to' field of email
              (if mu4e-compose-parent-message
                  (let ((receiving-email (cdar (mu4e-message-field mu4e-compose-parent-message
                                                                   :to))))
                    (caar (cl-remove-if-not (lambda (account)
                                           (string= (cadr (assoc 'user-mail-address account))
                                                    receiving-email))
                                         iqbal-mu4e-account-alist)))
                ;; Otherwise read the account to use from the user
                (when iqbal-mu4e-account-alist
                  (completing-read (format "Compose with account: (%s) "
                                           (mapconcat #'(lambda (var) (car var))
                                                      iqbal-mu4e-account-alist "/"))
                                   (mapcar #'(lambda (var) (car var)) iqbal-mu4e-account-alist)
                                   nil t nil nil (caar iqbal-mu4e-account-alist)))))
             ;; Retrieve the variables corresponding to account
             (account-vars (cdr (assoc account iqbal-mu4e-account-alist))))
        (when account-vars
          ;; Set the variables
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars))))

    (add-hook 'mu4e-compose-pre-hook 'iqbal-mu4e-set-account)
  #+end_src

** Prefer .authinfo.gpg for credentials
   #+begin_src emacs-lisp
     (with-eval-after-load 'auth-source
       (setq auth-sources (cons "~/.authinfo.gpg"
                                (delete "~/.authinfo.gpg" auth-sources))))
   #+end_src

** Send mail using smtp
   #+begin_src emacs-lisp
     (setq send-mail-function 'smtpmail-send-it)
   #+end_src


* Integration with org-mode
** Register a handler to open links to mu4e messages
  #+begin_src emacs-lisp
    (when (locate-library "org-mu4e")
      (autoload 'org-mu4e-open "org-mu4e")
      (org-add-link-type "mu4e" 'org-mu4e-open))
  #+end_src

** Load org-mu4e on loading mu4e
   #+begin_src emacs-lisp
     (with-eval-after-load 'mu4e (load "org-mu4e" t))
   #+end_src


* Convenience functions
** Advice mu4e~proc-sentinel so that path to mu binary is copied to clipboard
   This is needed since in case mu is installed using el-get, which is buried
   deep in .emacs.d folder and might not be in PATH, as such it cannot be run
   directly from shell. The following advice copies the path to mu to clipboard,
   so that it can be directly run from shell
   #+begin_src emacs-lisp
     (defun iqbal-advise-mu4e~proc-sentinel ()
       (defadvice mu4e~proc-sentinel (around show-path-to-mu-binary (&rest args))
         (condition-case err
             ad-do-it
           (error (progn (kill-new mu4e-mu-binary)
                         (error "Failed to start mu. %s. Path to mu binary (%s) copied to clipboard."
                                (error-message-string err)
                                mu4e-mu-binary)))))

       (ad-activate 'mu4e~proc-sentinel))

     (with-eval-after-load 'mu4e (iqbal-advise-mu4e~proc-sentinel))
   #+end_src

** Functions to start/hide mu4e
   Store the window configuration before starting mu4e and restore it when
   exiting mu4e
   #+begin_src emacs-lisp
    (defvar iqbal-pre-mu-win-config nil)
    (defvar iqbal-mu-win-config nil)

    (defun iqbal--start-mu4e ()
      ;; If mu4e is running and a mu4e window configuration is
      ;; stored
      (if (and iqbal-mu-win-config
               (get-buffer " *mu4e-main*"))
          (set-window-configuration iqbal-mu-win-config)
        (call-interactively #'mu4e)))

    (defun iqbal-start-mu4e ()
      (interactive)
      (setq iqbal-pre-mu-win-config (current-window-configuration))
      
      (if (locate-library "mu4e")
          (iqbal--start-mu4e)
        (message "mu4e not installed! You need to install `autoconf', `libtool', `libxapian-dev' and `libgmime-2.6-dev' for installing mu4e")))

    (defun iqbal-hide-mu4e ()
      (interactive)
      (setq iqbal-mu-win-config (current-window-configuration))
      (when iqbal-pre-mu-win-config
        (set-window-configuration iqbal-pre-mu-win-config)))
   #+end_src


* Keybindings to hide/show mu4e
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c m") #'iqbal-start-mu4e)    

    (with-eval-after-load 'mu4e
      (define-key mu4e-main-mode-map (kbd "q") #'iqbal-hide-mu4e)
      (define-key mu4e-main-mode-map (kbd "Q") #'mu4e-quit)
      (define-key mu4e-main-mode-map (kbd "/") #'mu4e-headers-search)
      (define-key mu4e-main-mode-map (kbd "C-c m") #'iqbal-hide-mu4e)
      (define-key mu4e-view-mode-map (kbd "C-c m") #'iqbal-hide-mu4e)
      (define-key mu4e-headers-mode-map (kbd "C-c m") #'iqbal-hide-mu4e)
      (define-key mu4e~update-mail-mode-map (kbd "C-c m") #'iqbal-hide-mu4e)
      (define-key mu4e-view-mode-map (kbd "U") #'mu4e-headers-rerun-search))
  #+end_src
