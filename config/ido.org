* Some extra packages for ido
  + [[www.github.com/lewang/flx][flx]] - A more powerful alternative to ido-mode's
          built-in flex matching.
  + [[www.github.com/technomancy/ido-ubiquitous][ido-ubiquitous]] - Use ido (nearly) everywhere
  + [[www.github.com/nonsequitur/smex][smex]]- M-x interface with Ido-style fuzzy matching.
  + [[http://www.emacswiki.org/emacs/download/idomenu.el][idomenu]] - imenu tag selection a la ido

  #+begin_src emacs-lisp
    (defvar my-ido-packages
      '(flx
        flx-ido
        ido-ubiquitous
        idomenu
        smex
        ido-vertical-mode))

    (my-install-packages my-ido-packages)
  #+end_src


* Enable ido-mode
  #+begin_src emacs-lisp
    (ido-mode t)
  #+end_src


* Use ido for completion in org-mode
  #+begin_src emacs-lisp
    (setq org-completion-use-ido t)
  #+end_src


* Always use ido to read buffer name and file name
  #+begin_src emacs-lisp
    (setq read-buffer-function #'ido-read-buffer)
  #+end_src


* Use flx for better flex matching
  #+begin_src emacs-lisp
    (flx-ido-mode t)
  #+end_src


* Use ido everywhere
  #+begin_src emacs-lisp
    (ido-ubiquitous-mode t)
  #+end_src


* Use flex matching with Ido
   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching t)
   #+end_src


* Use ~ to jump to home directly or emacs init directory in ido-find-file
   #+begin_src emacs-lisp
     (add-hook 'ido-setup-hook
               (lambda ()
                 ;; Go straight home
                 (dolist (map (list ido-file-completion-map ido-file-dir-completion-map))
                   (define-key map (kbd "~") (lambda ()
                                               (interactive)
                                               (if (looking-back "~/")
                                                   (insert ".emacs.d/")
                                                 (if (looking-back "/")
                                                     (insert "~/")
                                                   (call-interactively 'self-insert-command))))))))
   #+end_src


* Disable automatic file search
   #+begin_src emacs-lisp
     (setq ido-auto-merge-work-directories-length -1)
   #+end_src


* Keybindings for smex
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
   #+end_src


* Enable ido-vertical-mode
  #+begin_src emacs-lisp
    (ido-vertical-mode +1)
  #+end_src


* Map Alt-backspace to 'ido-delete-backward-updir
   I often mistakenly type these when in ido-find-file leading to 'buffer-read-only' error
   #+begin_src emacs-lisp
     (defun my-ido-keys ()
       "Add my keybindings for ido."
       (define-key ido-file-dir-completion-map (kbd "<M-backspace>") 'ido-delete-backward-updir))

     (add-hook 'ido-setup-hook 'my-ido-keys)
   #+end_src


* Map up and down keys to more intuitive commands in ido-vertical mode
  By default they are bound `next-history-element` and `previous-history-element` 
  which is terribly confusing since it seems they would cycle the candidates
   #+begin_src emacs-lisp
     (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
   #+end_src
