* Ensure that required packages are installed
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-package 'projectile)
  #+END_SRC


* Enable projectile
** Enable projectile mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook #'projectile-global-mode)
  #+END_SRC

** Projectile requires 'vc-git' for 'git-grep'
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'projectile
       (load "vc-git"))
   #+END_SRC


* Use git grep for grepping in project
  #+BEGIN_SRC emacs-lisp
    (setq projectile-use-git-grep t)
  #+END_SRC


* Custom project types
** Function for treating dropbox directory as projects
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-projectile-locate-dropbox-project (dir &optional list)
      (let ((candidate (projectile-locate-dominating-file dir ".dropbox")))
        ;; The .dropbox directory in home folder should not be treated as
        ;; project root
        (when (and candidate
                   (not (file-directory-p (concat candidate ".dropbox"))))
          (expand-file-name candidate))))

    (with-eval-after-load 'projectile
      (add-to-list 'projectile-project-root-files-functions #'iqbal-projectile-locate-dropbox-project t))
  #+END_SRC

** Additional projectile project roots
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'projectile
       (setq projectile-project-root-files
             (append projectile-project-root-files
                     '(".tern-project"
                       "compile_commands.json"
                       ".edts"
                       ".ensime"
                       ".merlin"
                       "configure"
                       "Vagrantfile"
                       "Dockerfile"))))
   #+END_SRC


* Process buffers should not be considered part of project unless they are shells
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-filter-out-non-shell-processes (buffers)
      (cl-remove-if (lambda (buffer)
                   (let ((buffer-major-mode (with-current-buffer buffer
                                              major-mode)))
                     (and (get-buffer-process buffer)
                          (not (or (eq buffer-major-mode 'term-mode)
                                   (eq buffer-major-mode 'shell-mode)
                                   (eq buffer-major-mode 'eshell-mode))))))
                 buffers))

    (setq projectile-buffers-filter-function #'iqbal-filter-out-non-shell-processes)
  #+END_SRC


* Custom projectile-completion
  Credits: [[https://gist.github.com/rejeep/5933343]]
   #+BEGIN_SRC emacs-lisp
     (defun rejeep-projectile-completion-fn (prompt choises)
       "Projectile completion function that only shows file name.

          If two files have same name, new completion appears to select between
          them. These include the path relative to the project root."
       (interactive)
       (let* ((stripped-choises
               (-uniq (--map (file-name-nondirectory (directory-file-name it)) choises)))
              (choise
               (ido-completing-read prompt stripped-choises))
              (matching-files
               (-filter
                (lambda (file)
                  (equal (file-name-nondirectory (directory-file-name file)) choise))
                choises)))
         (if (> (length matching-files) 1)
             (ido-completing-read prompt matching-files)
           (car matching-files))))

     (setq projectile-completion-system 'rejeep-projectile-completion-fn)
   #+END_SRC
