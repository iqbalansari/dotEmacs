* Some additional packages for working with dired
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-dired-packages '(dired-details dired-single dircmp dired-filter dired-ranger))
    (iqbal-install-packages iqbal-dired-packages)
  #+END_SRC


* Autoload for dircmp (since the package does not have it)
  #+BEGIN_SRC emacs-lisp
    (autoload 'compare-directories "dircmp" nil t)
  #+END_SRC


* Allow recursive delete, after asking for each directory at top level
 #+BEGIN_SRC emacs-lisp
   (setq dired-recursive-deletes 'top)
 #+END_SRC


* Copy recursively without asking
 #+BEGIN_SRC emacs-lisp
   (setq dired-recursive-copies 'always)
 #+END_SRC


* Auto revert dired buffer on revisiting
 #+BEGIN_SRC emacs-lisp
   (setq dired-auto-revert-buffer t)
 #+END_SRC


* Let dired guess the target directory
 #+BEGIN_SRC emacs-lisp
   (setq dired-dwim-target t)
 #+END_SRC


* Isearch in file names only, if when initial point position is on a file name
 #+BEGIN_SRC emacs-lisp
   (setq dired-isearch-filenames 'dwim)
 #+END_SRC


* Display human-readable sizes in dired
 #+BEGIN_SRC emacs-lisp
   (setq dired-listing-switches "-lah")
 #+END_SRC


* When in dired jump to start and end of directory listing (not the dired buffer)
 #+BEGIN_SRC emacs-lisp
   (defun dired-jump-to-bottom ()
     (interactive)
     (goto-char (point-max))
     (dired-next-line -1))

   (defun dired-back-to-top ()
     (interactive)
     (goto-char (point-min))
     (dired-next-line 1))

   (with-eval-after-load 'dired
     (define-key dired-mode-map [remap beginning-of-buffer] 'dired-back-to-top)
     (define-key dired-mode-map [remap end-of-buffer] 'dired-jump-to-bottom))
 #+END_SRC


* Load dired-x for additional functionality
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'dired
      (load "dired-x"))
  #+END_SRC


* Dired-details configuration
  #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-mode-hook
              (lambda ()
                (load "dired-details")
                (dired-details-install)
                (setq dired-details-hidden-string "[..] ")))
  #+END_SRC


* Dired-single configuration as recommended in dired-single.el
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-dired-init ()
      "Bunch of stuff to run for dired, either immediately or when it's
            loaded."
      (define-key dired-mode-map (kbd "RET") 'dired-single-buffer)
      (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
      (define-key dired-mode-map "^"
        (function
         (lambda nil (interactive) (dired-single-buffer "..")))))

    ;; if dired's already loaded, then the keymap will be bound
    (if (boundp 'dired-mode-map)
        ;; we're good to go; just add our bindings
        (iqbal-dired-init)
      ;; it's not loaded yet, so add our bindings to the load-hook
      (add-hook 'dired-load-hook 'iqbal-dired-init))
  #+END_SRC


* Wdired configuration
  #+BEGIN_SRC emacs-lisp
    (autoload 'wdired-change-to-wdired-mode "wdired")
    (setq wdired-confirm-overwrite t)
    (setq wdired-use-dired-vertical-movement t)
  #+END_SRC


* Dired filter's configurations
** Do not print output any messages
   #+BEGIN_SRC emacs-lisp
     (setq dired-filter-verbose nil)
   #+END_SRC

** Keybinding for filtering
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'dired
      (load "dired-filter")
      (define-key dired-mode-map "/" dired-filter-mark-map))
  #+END_SRC


* Dired ranger's configuration
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'dired
      (load "dired-filter")
      (define-key dired-mode-map "rc" #'dired-ranger-copy)
      (define-key dired-mode-map "rr" #'dired-ranger-move)
      (define-key dired-mode-map "rp" #'dired-ranger-paste)
      (define-key dired-mode-map "rb" #'dired-ranger-bookmark)
      (define-key dired-mode-map "rv" #'dired-ranger-bookmark-visit))
  #+END_SRC


* Configurations to hide certain files in dired
** Hide ._ files created by Mac
  #+BEGIN_SRC emacs-lisp
    (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\._.*")
  #+END_SRC

** Enable omit mode in dired
   #+BEGIN_SRC emacs-lisp
     (add-hook 'dired-mode-hook 'dired-omit-mode)
   #+END_SRC

** Do not log omit events
   #+BEGIN_SRC emacs-lisp
     (setq dired-omit-verbose nil)
   #+END_SRC


* Keybindings
** Keybinding to enable wdired mode
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "C-c C-e") #'dired-toggle-read-only))
  #+END_SRC

** Keybindings for starting dired
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-d") 'dired)
  #+END_SRC

