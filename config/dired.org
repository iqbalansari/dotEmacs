* Some additional packages for working with dired
  #+begin_src emacs-lisp
    (defvar iqbal-dired-packages '(dired-details dired-single neotree dircmp dired-filter dired-ranger))
    (iqbal-install-packages iqbal-dired-packages)
  #+end_src


* Autoload for dircmp (since the package does not have it)
  #+begin_src emacs-lisp
    (autoload 'compare-directories "dircmp" nil t)
  #+end_src


* Dired mode configurations
** Allow recursive delete, after asking for each directory at top level
  #+begin_src emacs-lisp
    (setq dired-recursive-deletes 'top)
  #+end_src

** Copy recursively without asking
  #+begin_src emacs-lisp
    (setq dired-recursive-copies 'always)
  #+end_src

** Auto revert dired buffer on revisiting
  #+begin_src emacs-lisp
    (setq dired-auto-revert-buffer t)
  #+end_src

** Let dired guess the target directory
  #+begin_src emacs-lisp
    (setq dired-dwim-target t)
  #+end_src

** Isearch in file names only, if when initial point position is on a file name
  #+begin_src emacs-lisp
    (setq dired-isearch-filenames 'dwim)
  #+end_src

** Display human-readable sizes in dired
  #+begin_src emacs-lisp
    (setq dired-listing-switches "-lah")
  #+end_src

** When in dired jump to start and end of directory listing (not the dired buffer)
  #+begin_src emacs-lisp
    (defun dired-jump-to-bottom ()
      (interactive)
      (goto-char (point-max))
      (dired-next-line -1))

    (defun dired-back-to-top ()
      (interactive)
      (goto-char (point-min))
      (dired-next-line 3))

    (with-eval-after-load 'dired
      (define-key dired-mode-map
        (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)

      (define-key dired-mode-map
        (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom))
  #+end_src


* Load dired-x for additional functionality
  #+begin_src emacs-lisp
    (with-eval-after-load 'dired
      (load "dired-x"))
  #+end_src


* Dired-details configuration
  #+begin_src emacs-lisp
    (add-hook 'dired-mode-hook
              (lambda ()
                (load "dired-details")
                (dired-details-install)
                (setq dired-details-hidden-string "[..] ")))
  #+end_src


* Dired-single configuration as recommended in dired-single.el
  #+begin_src emacs-lisp
    (defun iqbal-dired-init ()
      "Bunch of stuff to run for dired, either immediately or when it's
            loaded."
      (define-key dired-mode-map (kbd "RET") 'dired-single-buffer)
      (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
      (define-key dired-mode-map "^"
        (function
         (lambda nil (interactive) (dired-single-buffer "..")))))

    ;; if dired's already loaded, then the keymap will be bound
    (if (boundp 'dired-mode-map)
        ;; we're good to go; just add our bindings
        (iqbal-dired-init)
      ;; it's not loaded yet, so add our bindings to the load-hook
      (add-hook 'dired-load-hook 'iqbal-dired-init))
  #+end_src


* Wdired configuration
  #+begin_src emacs-lisp
    (autoload 'wdired-change-to-wdired-mode "wdired")
    (setq wdired-confirm-overwrite t)
    (setq wdired-use-dired-vertical-movement t)
  #+end_src


* Dired filter's configurations
** Do not print output any messages
   #+begin_src emacs-lisp
     (setq dired-filter-verbose nil)
   #+end_src

** Keybinding for filtering
  #+begin_src emacs-lisp
    (with-eval-after-load 'dired
      (load "dired-filter")
      (define-key dired-mode-map "/" dired-filter-mark-map))
  #+end_src


* Dired ranger's configuration
  #+begin_src emacs-lisp
    (with-eval-after-load 'dired
      (load "dired-filter")
      (define-key dired-mode-map "rc" #'dired-ranger-copy)
      (define-key dired-mode-map "rr" #'dired-ranger-move)
      (define-key dired-mode-map "rp" #'dired-ranger-paste)
      (define-key dired-mode-map "rb" #'dired-ranger-bookmark)
      (define-key dired-mode-map "rv" #'dired-ranger-bookmark-visit))
  #+end_src


* Set neotree configuration
** Use nerd theme
  #+begin_src emacs-lisp
    (setq neo-theme 'nerd)
  #+end_src

** Use shorter keybindings
   #+begin_src emacs-lisp
     (setq neo-keymap-style 'concise)
   #+end_src

** Keep the cursor at start of node
   #+begin_src emacs-lisp
     (setq neo-auto-indent-point t)
   #+end_src

** Readjust neotree to current buffer's directory on reopen
   #+begin_src emacs-lisp
     (setq neo-smart-open t)
   #+end_src

** Auto open file on creation
   #+begin_src emacs-lisp
     (setq neo-create-file-auto-open t)
   #+end_src

** Do not display updir line
   #+begin_src emacs-lisp
     (setq neo-show-updir-line nil)
   #+end_src

** Make neotree a bit wider
   #+begin_src emacs-lisp
     (setq neo-window-width 30)

     ;; To reduce split-window-threshold since some width is
     ;; taken up by neotree
     (setq split-width-threshold (- split-width-threshold neo-window-width))
   #+end_src

** Automatically change neotree on changing current buffer
   #+begin_src emacs-lisp
     (defun iqbal-neotree-refresh (last-buffer current-buffer)
       (when (and (not (eq current-buffer (neo-global--get-buffer)))
                  (neo-global--window-exists-p))
         (let ((buffer-directory (with-current-buffer current-buffer
                                   (or (ignore-errors (projectile-project-root))
                                       default-directory)))
               (neotree-directory (with-current-buffer neo-global--buffer
                                    (or (ignore-errors (projectile-project-root))
                                        default-directory))))
           (unless (string= buffer-directory neotree-directory)
             (save-selected-window
               (neo-global--open-dir buffer-directory)
               (goto-char (point-min)))))))

     (add-hook 'buffer-change-hook #'iqbal-neotree-refresh)
   #+end_src


* Configurations to hide certain files in dired
** Hide ._ files created by Mac
  #+begin_src emacs-lisp
    (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\._.*")
  #+end_src

** Enable omit mode in dired
   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook 'dired-omit-mode)
   #+end_src

** Do not log omit events
   #+begin_src emacs-lisp
     (setq dired-omit-verbose nil)
   #+end_src


* Keybindings
** Keybinding to enable wdired mode
  #+begin_src emacs-lisp
    (with-eval-after-load 'dired
      (define-key dired-mode-map "e" #'dired-toggle-read-only))
  #+end_src

** Keybindings for starting dired
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-d") 'ido-dired)
  #+end_src

** Keybinding for neotree
  #+begin_src emacs-lisp
    (autoload 'neotree-toggle "neotree")
    (global-set-key (kbd "C-c z") 'neotree-toggle)
  #+end_src
