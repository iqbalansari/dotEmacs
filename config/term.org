* Remap ctrl-arrow keys in term mode to move buffer if buffer-move is installed
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-enable-buf-move-term ()
      (define-key term-raw-map (kbd "C-<left>") #'buf-move-left)
      (define-key term-raw-map (kbd "C-<right>") #'buf-move-right)
      (define-key term-raw-map (kbd "C-<up>") #'buf-move-up)
      (define-key term-raw-map (kbd "C-<down>") #'buf-move-down))

    (with-eval-after-load 'buffer-move
      (add-hook 'term-mode-hook #'iqbal-enable-buf-move-term))
  #+END_SRC


* Set keybindings for undo in the term
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'term
      (define-key term-raw-map (kbd "C-/") (lambda ()
                                             (interactive)
                                             (term-send-raw-string (kbd "C-_")))))

  #+END_SRC


* Set C-x as the prefix command rather than C-c
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'term (term-set-escape-char ?\C-x))
  #+END_SRC


* Faster keybinding to switch between line and character mode in term
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-toggle-term-mode ()
      (interactive)
      (if (eq (current-local-map) term-raw-map)
          (progn (term-line-mode)
                 (message "Switched to line mode"))
        (term-char-mode)
        (message "Switched to char mode")))

    (with-eval-after-load 'term
      (define-key term-raw-map (kbd "<escape>") #'iqbal-toggle-term-mode)
      (define-key term-mode-map (kbd "<escape>") #'iqbal-toggle-term-mode)
      (define-key term-raw-map (kbd "C-`") #'iqbal-toggle-term-mode)
      (define-key term-mode-map (kbd "C-`") #'iqbal-toggle-term-mode))
  #+END_SRC


* Remap shift-arrow keys in term mode to select window if windmove is being used
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-term-enable-windmove ()
      (define-key term-raw-map (kbd "<S-left>") #'windmove-left)
      (define-key term-raw-map (kbd "<S-right>") #'windmove-right)
      (define-key term-raw-map (kbd "<S-up>") #'windmove-up)
      (define-key term-raw-map (kbd "<S-down>") #'windmove-down))

    (with-eval-after-load 'windmove
      (add-hook 'term-mode-hook #'iqbal-term-enable-windmove))
  #+END_SRC


* Remap keybinding to switch windows
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-term-enable-switch-window ()
      (define-key term-raw-map (kbd "M-o") #'other-window)
      (with-eval-after-load 'switch-window
        (define-key term-raw-map (kbd "C-x o") #'switch-window)))

    (add-hook 'term-mode-hook #'iqbal-term-enable-switch-window)
  #+END_SRC


* Keybinding to facilitate copying region in term-mode
** A simple function that executes the command bound to
   the key in global-map if region is active otherwise
   sends the last keys to the terminal emulator
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-execute-command-if-region-or-send-raw (&optional meta?)
      (interactive)
      (let* ((keys (this-single-command-keys))
             (command (lookup-key global-map keys)))
        (cond ((and (region-active-p) command)
               (call-interactively command))
              (meta?  (term-send-raw-meta))
              (t (term-send-raw)))))

    (defun iqbal-execute-command-if-region-or-send-raw-meta ()
      (interactive)
      (iqbal-execute-command-if-region-or-send-raw t))
  #+END_SRC

** Capture C-n, C-p, C-a, C-e, M-< and M-> is region is active or send
   raw keys to the terminal
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'term
       (define-key term-raw-map "\C-n" 'iqbal-execute-command-if-region-or-send-raw)
       (define-key term-raw-map "\C-p" 'iqbal-execute-command-if-region-or-send-raw)
       (define-key term-raw-map "\C-a" 'iqbal-execute-command-if-region-or-send-raw)
       (define-key term-raw-map "\C-e" 'iqbal-execute-command-if-region-or-send-raw)
       (define-key term-raw-map "\C-w" 'iqbal-execute-command-if-region-or-send-raw)
       (define-key term-raw-map "\M-w" 'iqbal-execute-command-if-region-or-send-raw-meta)
       (define-key term-raw-map "\M-<" 'iqbal-execute-command-if-region-or-send-raw-meta)
       (define-key term-raw-map "\M->" 'iqbal-execute-command-if-region-or-send-raw-meta))
   #+END_SRC


* Delete the window when term exits
  #+BEGIN_SRC emacs-lisp
    (defadvice term-handle-exit (after term-kill-buffer-on-exit activate)
      (iqbal-kill-term-delete-window))
  #+END_SRC


* Making shift-tab work with term-mode
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-term-send-backtab ()
      "Send backtab to the term process"
      (interactive)
      (term-send-raw-string (kbd "\033[Z")))

    (with-eval-after-load 'term
      (define-key term-raw-map (kbd "<backtab>") 'iqbal-term-send-backtab))
  #+END_SRC


* Yasnippet breaks tab completion in term-mode disable it
  #+BEGIN_SRC emacs-lisp
    (add-hook 'term-mode-hook (lambda ()
                                (when (fboundp 'yas-minor-mode)
                                  (yas-minor-mode -1))
                                (toggle-truncate-lines 1)))
  #+END_SRC


* Disable hl-line-mode in term buffer
  Need to set hl-line-range-function function since (hl-line-mode -1)
  isn't working
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-hide-hl-line ()
      (make-local-variable 'hl-line-range-function)
      (setq hl-line-range-function (lambda () nil)))

    (add-hook 'term-mode-hook #'iqbal-hide-hl-line)
  #+END_SRC


* Better colors for term mode
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'term
      (set-face-attribute 'term-color-blue nil :foreground "#1e90ff")
      (set-face-attribute 'term-color-red nil :foreground "#ee5c42")
      (set-face-attribute 'term-color-cyan nil :foreground "#8cd0d3")
      (set-face-attribute 'term-color-green nil :foreground "#00ff00"))
  #+END_SRC


* Convenience functions to start term buffers
** Use zsh or bash if available else fallback to eshell
   On windows use powershell if available
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-preferred-shell (or (executable-find "zsh")
                                    (executable-find "bash")
                                    #'eshell))

     (when (equal system-type 'windows-nt)
       (setq iqbal-preferred-shell (if (locate-library "powershell") #'powershell #'eshell)))

     (defun iqbal-is-shell-mode (mode)
       (or (eq mode 'term-mode)
           (eq mode 'eshell-mode)
           (eq mode 'shell-mode)))
   #+END_SRC

** Mapping shells to project folders
   Try to find root of project using projectile, if projectile fails to find
   project root use 'global' project which is common for all non-project
   buffers. 

   A hashmap is used to store the mapping between projects and corresponding
   shells. If a project root is found try switching to a shell in from the list
   of shells associated with project (found by looking up the hashmap) else if a
   shell does not already exist for it, create a shell for the project and store
   it in the hashmap.

   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-shell-to-project-map (make-hash-table :test 'equal))

     (defun iqbal-get-project-root ()
       (or (ignore-errors (projectile-project-root)) "global"))

     (defun iqbal-get-live-shell-for-project (project-root)
       "Return the first live shell for a project"
       ;; Clean up any killed shells
       (puthash project-root
                (cl-remove-if-not (lambda (buffer)
                                 (buffer-live-p buffer))
                               (gethash project-root iqbal-shell-to-project-map))
                iqbal-shell-to-project-map)

       ;; Return the first live shell
       (car (gethash project-root iqbal-shell-to-project-map)))    

     (defun iqbal-create-new-shell-and-store (project-root)
       "Create a new shell for the project and store it in the global hash"
       (puthash project-root
                (append (gethash project-root iqbal-shell-to-project-map)
                        (list (iqbal-create-shell-buffer project-root)))
                iqbal-shell-to-project-map))
   #+END_SRC

** Functions for starting shells
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-start-non-term-shell (launcher shell-name)
      (funcall launcher)
      (rename-buffer shell-name t)
      (current-buffer))

    (defun iqbal-create-shell-buffer (&optional name)
      "Create a new shell, if my prefered shell is set
      start that shell otherwise start eshell, rename
      the shell using login name, system name and name
      if given"
      (let ((shell-name (concat (user-real-login-name) "@" (system-name)
                                (when name
                                  (concat " - " name)))))

        ;; If it is a string then it should point to the shell to start using ansi-term
        (if (stringp iqbal-preferred-shell)
            (ansi-term iqbal-preferred-shell shell-name)
          (iqbal-start-non-term-shell iqbal-preferred-shell shell-name))))

    (defun iqbal-open-shell-for-project (project-root &optional force?)
      "Open a shell for the project, switches to existing shell if
       there already exists a shell for the project and force? is nil
       otherwise create a new shell"
      (let ((shell (iqbal-get-live-shell-for-project project-root)))
        (cond ((and shell (not force?))
               (message "Switching to existing shell")

               ;; Delete window in current frame containing the shell
               (when (get-buffer-window shell)
                 (delete-window (get-buffer-window shell)))
               
               (switch-to-buffer shell))
              (force? (message "Creating new shell")
                      (iqbal-create-new-shell-and-store project-root))
              (t (message "No associated shell found! Creating new shell")
                 (iqbal-create-new-shell-and-store project-root)))))

    (defun iqbal-start-shell (&optional direction)
      (interactive)
      (let ((existing-window (when direction (window-in-direction direction))))
        (if (and existing-window
                 (member (window-buffer existing-window)
                         (gethash (iqbal-get-project-root) iqbal-shell-to-project-map))
                 (iqbal-is-shell-mode (with-current-buffer (window-buffer existing-window)
                                     major-mode)))
            (select-window existing-window)
          (when direction (select-window (split-window nil nil direction)))
          (iqbal-open-shell-for-project (iqbal-get-project-root)
                                     (iqbal-is-shell-mode major-mode)))))

    (defun iqbal-split-window-below-start-terminal ()
      (interactive)
      (iqbal-start-shell 'below))

    (defun iqbal-split-window-right-start-terminal ()
      (interactive)
      (iqbal-start-shell 'right))
  #+END_SRC

** Functions for killing shell buffers
   These functions kill the shell buffer as well as delete the window containing
   it
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-kill-term-buffer ()
       (let ((kill-buffer-query-functions nil)
             (buffer-windows (get-buffer-window-list (current-buffer) nil t)))

         ;; Delete all windows with current buffer
         (dolist (window buffer-windows)
           (unless (equal window (selected-window))
             (delete-window window)))

         ;; Cleanup current window
         (kill-buffer)
         (unless (= 1 (length (window-list)))
           (delete-window))))    

     (defun iqbal-kill-term-delete-window ()
       (interactive)
       (if (iqbal-is-shell-mode major-mode)
           (iqbal-kill-term-buffer)
         (message "Not in a shell")))
   #+END_SRC

** Keybindings
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-\\") #'iqbal-split-window-below-start-terminal)
     (global-set-key (kbd "C-|") #'iqbal-split-window-right-start-terminal)
     (global-set-key (kbd "C-S-t") #'iqbal-start-shell)
     (global-set-key (kbd "C-S-w") #'iqbal-kill-term-delete-window)

     (with-eval-after-load 'term
       (define-key term-raw-map (kbd "C-|") #'iqbal-split-window-right-start-terminal)
       (define-key term-raw-map (kbd "C-\\") #'iqbal-split-window-below-start-terminal)
       (define-key term-raw-map (kbd "C-S-q") #'delete-window))
   #+END_SRC


* Make URLs clickable
  #+BEGIN_SRC emacs-lisp
    (add-hook 'term-mode-hook 'goto-address-mode)
  #+END_SRC
