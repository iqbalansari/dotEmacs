* Install backup-walker
  #+begin_src emacs-lisp
    (iqbal-install-package 'backup-walker)
  #+end_src


* Create auto-save directory if it does not already exist
  #+begin_src emacs-lisp
    (unless (file-exists-p (locate-user-emacs-file "auto-save/"))
      (make-directory (locate-user-emacs-file "auto-save/")))
  #+end_src


* Force backup on each save
  #+begin_src emacs-lisp
    (defun force-backup-of-buffer ()
      ;; Make a special "per session" backup at the first save of each
      ;; emacs session.
      (when (not buffer-backed-up)
        ;; Override the default parameters for per-session backups.
        (let ((backup-directory-alist '(("" . "~/.emacs.d/backups/per-session")))
              (kept-new-versions 3))
          (backup-buffer)))
      ;; Make a "per save" backup on each save.  The first save results in
      ;; both a per-session and a per-save backup, to keep the numbering
      ;; of per-save backups consistent.
      (let ((buffer-backed-up nil))
        (backup-buffer)))

    (add-hook 'before-save-hook  'force-backup-of-buffer)
  #+end_src


* Write backup files to own directory
  #+begin_src emacs-lisp
    (setq backup-directory-alist
          `(("." . ,(expand-file-name
                     (concat user-emacs-directory "backups")))))

    (setq auto-save-file-name-transforms
          `((".*" ,(concat user-emacs-directory "auto-save/") t)))
  #+end_src


* Make backups of files, even when they're in version control
  #+begin_src emacs-lisp
    (setq vc-make-backup-files t)
  #+end_src


* Always use copying to create backup files (don't clobber symlinks)
  #+begin_src emacs-lisp
    (setq backup-by-copying t)
  #+end_src


* Make numeric backup versions
  #+begin_src emacs-lisp
    (setq version-control t)
  #+end_src


* Number of oldest versions to keep when a new numbered backup is made
  #+begin_src emacs-lisp
    (setq kept-old-versions 0)
  #+end_src


* Number of newest versions to keep when a new numbered backup is made
  #+begin_src emacs-lisp
    (setq kept-new-versions 20)
  #+end_src


* Don't backup certain files
   #+begin_src emacs-lisp
     (defun starts-with-p (string1 string2)
       (string= (substring string1 0 (min (length string1) (length string2)))
                string2))

     (defun dont-backup-files-p (filename)
       (let ((filename-part (file-name-nondirectory filename)))
         (if (or (starts-with-p filename-part ".emacs_workgroups")
                 (starts-with-p filename-part "COMMIT_EDITMSG"))
             nil
           (normal-backup-enable-predicate filename))))

     (setq backup-enable-predicate 'dont-backup-files-p)
   #+end_src


* Delete excess backup files without asking
  #+begin_src emacs-lisp
    (setq delete-old-versions t)
  #+end_src
