* Install some useful packages
  #+begin_src emacs-lisp
    (my-install-packages '(org-bullets toc-org company-math pcsv notify))

    (when (locate-library "pdf-tools")
      (my-install-package 'org-pdfview))
  #+end_src


* Enable org bullets in org mode
  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook #'org-bullets-mode)
  #+end_src


* Custom TODO keywords and priority levels
  Copied from [[http://doc.norang.ca/org-mode.html#TodoKeywords]]
** Define some extra keywords
  #+begin_src emacs-lisp
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "STARTED(s!)" "DONE(d@/!)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "CANCELLED(c@/!)")
                  (sequence "UNREAD(u!)" "READING(r!)" "READ(f@/!)"))))
  #+end_src

** Colors for TODO keywords
   #+begin_src emacs-lisp
     (setq org-todo-keyword-faces
           (quote (("TODO" :foreground "red" :weight bold)
                   ("NEXT" :foreground "blue" :weight bold)
                   ("DONE" :foreground "forest green" :weight bold)
                   ("WAITING" :foreground "orange" :weight bold)
                   ("HOLD" :foreground "magenta" :weight bold)
                   ("CANCELLED" :foreground "forest green" :weight bold)
                   ("UNREAD" :foreground "red" :weight bold)
                   ("READING" :foreground "blue" :weight bold)
                   ("READ" :foreground "forest green" :weight bold))))
   #+end_src

** Custom task priorities
   #+begin_src emacs-lisp
     (setq org-default-priority ?E)
     (setq org-lowest-priority ?E)
   #+end_src


* Directory for org files
  #+begin_src emacs-lisp
    (setq org-directory (locate-user-emacs-file "org/"))
    (when (not (file-exists-p org-directory))
      (make-directory org-directory))
  #+end_src


* Fontify code blocks in org-src
   #+begin_src emacs-lisp
     (setq org-src-fontify-natively t)
   #+end_src


* Start flyspell in org mode buffers
  The value of ispell-program name is set in my-init.org
  #+begin_src emacs-lisp
    (add-to-list 'org-mode-hook 'flyspell-mode)
  #+end_src


* Enable special behavior for Ctrl-a/e/k in headlines
  #+begin_src emacs-lisp
    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
  #+end_src


* Do not allow a parent to be marked DONE, if children are marked TODO
  #+begin_src emacs-lisp
    (setq org-enforce-todo-dependencies t)
  #+end_src


* Enable org-ditaa if ditaa is installed
  #+begin_src emacs-lisp
    (setq org-ditaa-jar-path (executable-find "ditaa"))

    (when org-ditaa-jar-path
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((ditaa . t))))
  #+end_src


* Org mode integration for graphviz
** Install graphviz-dot-mode
   #+begin_src emacs-lisp
     (when (executable-find "dot")
       (my-install-package 'graphviz-dot-mode))
   #+end_src

** Associate 'dot' extension with graphviz-dot-mode
  #+begin_src emacs-lisp
    (when (locate-library "graphviz-dot-mode") 
      (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot)))
  #+end_src

** Enable org-babel for graphviz
  #+begin_src emacs-lisp
    (when (executable-find "dot") 
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((dot . t))))
  #+end_src


* Enable company mode and company-math in org-mode files
  #+begin_src emacs-lisp
    (defun my-org-enable-company-mode ()
      (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)
      (add-to-list 'company-backends
                   '(company-capf
                     company-math-symbols-unicode
                     company-ispell
                     company-dabbrev)))

    (add-hook 'org-mode-hook #'my-org-enable-company-mode)
  #+end_src


* org-export configuration
** Export backends that should always be available
   #+begin_src emacs-lisp
     (eval-after-load "org"
       '(progn (add-to-list 'org-export-backends 'md)
               (add-to-list 'org-export-backends 'odt)))
   #+end_src

** Do not include tags in export
   #+begin_src emacs-lisp
     (setq org-export-with-tags nil)
   #+end_src


* toc-org configuration
** By default use org-mode links
   #+begin_src emacs-lisp
     (setq toc-org-hrefify-default "org")
   #+end_src

** Enable org-toc
  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook #'toc-org-enable)
  #+end_src

** Exclude trees with TOC tag
   org already exports a better table of contents, I find org-toc useful for
   org documents that are do not need to be exported
   #+begin_src emacs-lisp
     (eval-after-load "ox"
       '(progn (add-to-list 'org-export-exclude-tags "TOC")
               (add-to-list 'org-export-exclude-tags "TOC_2")
               (add-to-list 'org-export-exclude-tags "TOC_2_org")
               (add-to-list 'org-export-exclude-tags "TOC_2_gh")
               (add-to-list 'org-export-exclude-tags "TOC_3")
               (add-to-list 'org-export-exclude-tags "TOC_3_org")
               (add-to-list 'org-export-exclude-tags "TOC_3_gh")))
   #+end_src


* Keybinding to save edits in org-src mode
  #+begin_src emacs-lisp
    (eval-after-load 'org-src
      '(define-key org-src-mode-map "\C-c\C-c" #'org-edit-src-exit))
  #+end_src


* Use org speed commands
  #+begin_src emacs-lisp
    (setq org-use-speed-commands t)
  #+end_src


* Compatibility with ace-jump-mode
  Since org-mode binds `C-c SPC` to the command `org-table-blank-field` (which
  is useful only if point is in a table) the ace-jump-mode's binding is
  overshadowed, the following sets the keybinding to a DWIM version which calls
  ace-jump-mode unless the point is inside a table
  #+begin_src emacs-lisp
    (defun my-dwim-org-table-blank-field ()
      (interactive)
      (if (and (not current-prefix-arg)
               (org-at-table-p))
          (call-interactively #'org-table-blank-field)
        (call-interactively #'ace-jump-mode)))

    (org-defkey org-mode-map (kbd "C-c SPC") #'my-dwim-org-table-blank-field)
  #+end_src


* Automatically mark a task as DONE, when all checkboxes are checked
  Taken from [[http://orgmode.org/worg/org-hacks.html]]
  #+begin_src emacs-lisp
    (eval-after-load 'org-list
      '(add-hook 'org-checkbox-statistics-hook (function ndk/checkbox-list-complete)))

    (defun ndk/checkbox-list-complete ()
      (save-excursion
        (org-back-to-heading t)
        (let ((beg (point))
              (current-state (org-get-todo-state))
              end)
          (end-of-line)
          (setq end (point))
          (goto-char beg)
          (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
              (if (match-end 1)
                  (if (equal (match-string 1) "100%")
                      ;; all done - do the state change
                      (org-todo 'done)
                    (when (and current-state
                               (string= current-state "DONE"))
                      (org-todo 'todo)))
                (if (and (> (match-end 2) (match-beginning 2))
                         (equal (match-string 2) (match-string 3)))
                    (org-todo 'done)
                  (when (and current-state
                             (string= current-state "DONE"))
                    (org-todo 'todo))))))))
  #+end_src


* Log things in a drawer always
  #+begin_src emacs-lisp
    (setq org-log-into-drawer t)
  #+end_src


* Convert csv to org-table
  #+begin_src emacs-lisp
    (defun yf/lisp-table-to-org-table (table &optional function)
      "Convert a lisp table to `org-mode' syntax, applying FUNCTION to each of its elements.
    The elements should not have any more newlines in them after
    applying FUNCTION ; the default converts them to spaces. Return
    value is a string containg the unaligned `org-mode' table."
      (unless (functionp function)
        (setq function (lambda (x) (replace-regexp-in-string "\n" " " x))))
      (mapconcat (lambda (x)                ; x is a line.
                   (concat "| " (mapconcat function x " | ") " |"))
                 table "\n"))

    (defun yf/csv-to-table (beg end)
      "Convert a csv file to an `org-mode' table."
      (interactive "r")
      (require 'pcsv)
      (insert (yf/lisp-table-to-org-table (pcsv-parse-region beg end)))
      (delete-region beg end)
      (org-table-align))
  #+end_src


* Load org-pdfview for links to pdf documents
  #+begin_src emacs-lisp
    (eval-after-load 'org
      '(load "org-pdfview" t))
  #+end_src


* Notify about appointments using notify-send
  #+begin_src emacs-lisp
    (defun my-notify-appt (time-to-appt new-time msg)
      (if (equal (type-of time-to-appt) 'cons)
          (mapcar* #'my-notify-appt time-to-appt new-time 'msg)
        (notify (format "Appointment in %s minutes" time-to-appt)
                msg)))

    (setq appt-disp-window-function #'my-notify-appt)
    (setq appt-delete-window-function #'ignore)
  #+end_src
