* Install some useful packages
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-packages '(org-bullets toc-org org-autolist company-math org-download pcsv notify))
  #+END_SRC


* Enable org bullets in org mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook #'org-bullets-mode)
  #+END_SRC


* Directory for org files
  #+BEGIN_SRC emacs-lisp
    (setq org-directory (iqbal-get-file-in-data-directory "org" t))
  #+END_SRC


* Fontify code blocks in org-src
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC


* Start flyspell in org mode buffers
  The value of ispell-program name is set in iqbal-init.org
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-mode-hook 'flyspell-mode)
  #+END_SRC


* Enable special behavior for Ctrl-a/e/k in headlines
  #+BEGIN_SRC emacs-lisp
    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
  #+END_SRC


* Do not allow a parent to be marked DONE, if children are marked TODO
  #+BEGIN_SRC emacs-lisp
    (setq org-enforce-todo-dependencies t)
    (customize-set-variable 'org-enforce-todo-checkbox-dependencies t)
  #+END_SRC


* org-id configuration
** Location of file remembering id locations
   #+BEGIN_SRC emacs-lisp
     (setq org-id-locations-file (iqbal-get-file-in-data-directory ".org-id-locations"))
   #+END_SRC

** Use org-ids for links to org file
   #+BEGIN_SRC emacs-lisp
     ;; Make sure org-id is loaded before org-store-link is invoked
     (defun iqbal-org-load-org-id-maybe (&rest ignored)
       (unless (featurep 'org-id)
         (require 'org-id)))

     (advice-add 'org-store-link :before #'iqbal-org-load-org-id-maybe)

     (setq org-id-link-to-org-use-id 'use-existing)
   #+END_SRC

** Command to quickly assign ids to entries in current org-mod buffer
   Credits: http://stackoverflow.com/a/16247032/5285712
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-org-add-ids-to-headlines-in-file ()
       "Add ID properties to all headlines in the current file which
     do not already have one."
       (interactive)
       (if (derived-mode-p 'org-mode)
           (org-map-entries 'org-id-get-create)
         (user-error "Not in an org-mode buffer")))
   #+END_SRC


* Enable org-ditaa if ditaa is installed
  #+BEGIN_SRC emacs-lisp
    (setq org-ditaa-jar-path (executable-find "ditaa"))

    (when org-ditaa-jar-path
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((ditaa . t))))
  #+END_SRC


* Org mode integration for graphviz
** Install graphviz-dot-mode
   #+BEGIN_SRC emacs-lisp
     (when (executable-find "dot")
       (iqbal-install-package 'graphviz-dot-mode))
   #+END_SRC

** Associate 'dot' extension with graphviz-dot-mode
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'org-src
      (when (locate-library "graphviz-dot-mode")
        (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))))
  #+END_SRC

** Enable org-babel for graphviz
  #+BEGIN_SRC emacs-lisp
    (when (executable-find "dot") 
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((dot . t))))
  #+END_SRC


* Enable company mode and company-math in org-mode files
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-org-enable-company-mode ()
      (with-eval-after-load 'company
        (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)
        (add-to-list 'company-backends
                     '(company-capf
                       company-math-symbols-unicode
                       company-ispell
                       :with company-dabbrev))))

    (add-hook 'org-mode-hook #'iqbal-org-enable-company-mode)
  #+END_SRC


* org-export configuration
** Export backends that should always be available
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org
       (add-to-list 'org-export-backends 'md)
       (add-to-list 'org-export-backends 'odt)
       (add-to-list 'org-export-backends 'gfm))
   #+END_SRC

** Do not include tags in export
   #+BEGIN_SRC emacs-lisp
     (setq org-export-with-tags nil)
   #+END_SRC


* Enable org-autolist
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook #'org-autolist-mode)
  #+END_SRC


* toc-org configuration
** By default use org-mode links
   #+BEGIN_SRC emacs-lisp
     (setq toc-org-hrefify-default "org")
   #+END_SRC

** Enable org-toc
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook #'toc-org-enable)
  #+END_SRC

** Exclude trees with TOC tag
   org already exports a better table of contents, I find org-toc useful for
   org documents that are do not need to be exported
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'ox
       (add-to-list 'org-export-exclude-tags "TOC")
       (add-to-list 'org-export-exclude-tags "TOC_2")
       (add-to-list 'org-export-exclude-tags "TOC_2_org")
       (add-to-list 'org-export-exclude-tags "TOC_2_gh")
       (add-to-list 'org-export-exclude-tags "TOC_3")
       (add-to-list 'org-export-exclude-tags "TOC_3_org")
       (add-to-list 'org-export-exclude-tags "TOC_3_gh"))
   #+END_SRC


* Throw error if editing invisible regions
  #+BEGIN_SRC emacs-lisp
    (setq org-catch-invisible-edits 'show-and-error)
  #+END_SRC


* Enable eldoc mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook 'turn-on-eldoc-mode)
  #+END_SRC


* Log things in a drawer always
  #+BEGIN_SRC emacs-lisp
    (setq org-log-into-drawer t)
  #+END_SRC


* Convert csv to org-table
  #+BEGIN_SRC emacs-lisp
    (defun yf/lisp-table-to-org-table (table &optional function)
      "Convert a lisp table to `org-mode' syntax, applying FUNCTION to each of its elements.
    The elements should not have any more newlines in them after
    applying FUNCTION ; the default converts them to spaces. Return
    value is a string containg the unaligned `org-mode' table."
      (unless (functionp function)
        (setq function (lambda (x) (replace-regexp-in-string "\n" " " x))))
      (mapconcat (lambda (x)                ; x is a line.
                   (concat "| " (mapconcat function x " | ") " |"))
                 table "\n"))

    (defun yf/csv-to-table (beg end)
      "Convert a csv file to an `org-mode' table."
      (interactive "r")
      (require 'pcsv)
      (insert (yf/lisp-table-to-org-table (pcsv-parse-region beg end)))
      (delete-region beg end)
      (org-table-align))
  #+END_SRC


* Notify about appointments using notify-send
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-notify-appt (time-to-appt new-time msg)
      (if (equal (type-of time-to-appt) 'cons)
          (mapcar* #'iqbal-notify-appt time-to-appt new-time 'msg)
        (notify (format "Appointment in %s minutes" time-to-appt)
                msg)))

    (setq appt-disp-window-function #'iqbal-notify-appt)
    (setq appt-delete-window-function #'ignore)
  #+END_SRC


* Use org speed commands
  #+BEGIN_SRC emacs-lisp
    (setq org-use-speed-commands t)
  #+END_SRC


* Make `C-c RET` keybinding consistent with rest of emacs (open link at point)
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'org
      (org-defkey org-mode-map iqbal-open-link #'org-open-at-point))
  #+END_SRC


* Free up keybindings for expanding snippets
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'org
      (org-defkey org-mode-map iqbal-expand-snippet nil))
  #+END_SRC


* Keybindings to store link and insert link at point
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'org
      (org-defkey org-mode-map (kbd "C-c l") #'org-insert-link))

    (global-set-key (kbd "C-c k") #'org-store-link)
  #+END_SRC


* Keybinding to save edits in org-src mode
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'org-src
      (define-key org-src-mode-map (kbd "C-c C-c") #'org-edit-src-exit))
  #+END_SRC


* Use M-n and M-p to change priority in org-mode unless there is an error buffer open
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-org-previous-error-or-priority-up ()
      (interactive)
      (call-interactively (if (eq (next-error-find-buffer) (current-buffer))
                              #'org-priority-up
                            #'previous-error)))

    (defun iqbal-org-next-error-or-priority-down ()
      (interactive)
      (call-interactively (if (eq (next-error-find-buffer) (current-buffer))
                              #'org-priority-down
                            #'next-error)))

    (with-eval-after-load 'org
      (org-defkey org-mode-map (kbd "M-p") #'iqbal-org-previous-error-or-priority-up)
      (org-defkey org-mode-map (kbd "M-n") #'iqbal-org-next-error-or-priority-down))
 #+END_SRC


* DWIM binding for C-c SPC in org-mode
  Since org-mode binds `C-c SPC` to the command `org-table-blank-field` (which
  is useful only if point is in a table) the ace-jump-mode's binding is
  overshadowed, the following sets the keybinding to a DWIM version which calls
  ace-jump-mode unless the point is inside a table
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-dwim-org-table-blank-field ()
      (interactive)
      (call-interactively (if (and (not current-prefix-arg)
                                   (org-at-table-p))
                              #'org-table-blank-field
                            (global-key-binding (kbd "C-c SPC")))))

    (with-eval-after-load 'org
      (org-defkey org-mode-map (kbd "C-c SPC") #'iqbal-dwim-org-table-blank-field))
  #+END_SRC
