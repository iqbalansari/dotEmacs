* Prompt user to create directory when visiting a non-existent directory
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-create-non-existent-directory ()
      (when buffer-file-name
        (let ((parent-directory (file-name-directory buffer-file-name)))
          (when (and (not (file-exists-p parent-directory))
                     (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
            (make-directory parent-directory t)))))

    (add-to-list 'find-file-not-found-functions #'iqbal-create-non-existent-directory)
  #+END_SRC


* Instruct ffap to not ping to remote hosts
  #+BEGIN_SRC emacs-lisp
    (setq ffap-machine-p-known 'reject)
  #+END_SRC


* Open a file using sudo
  Credits: [[https://github.com/fniessen/emacs-leuven][emacs-leuven]]
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-find-file-sudo-header-warning ()
      "*Display a warning in header line of the current buffer."
      (let* ((warning "WARNING: EDITING FILE WITH ROOT PRIVILEGES!")
             (space (+ 6 (- (frame-width) (length warning))))
             (bracket (make-string (/ space 2) ?-))
             (warning (concat bracket warning bracket)))
        (setq header-line-format
              (propertize warning 'face 'header-line))))

    (defun iqbal-find-file-sudo (filename)
      "Open FILENAME with root privileges."
      (interactive (list (read-file-name "File name: ")))
      (set-buffer (find-file (concat "/sudo::" filename)))
      (iqbal-find-file-sudo-header-warning))
  #+END_SRC


* Open current file in sudo
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-sudo-open-this-file ()
      (interactive)
      (if (buffer-file-name)
          (iqbal-find-file-sudo (buffer-file-name))
        (message "Current buffer is not visiting a file")))
  #+END_SRC


* Keybinding to save current file's name to kill-ring
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-copy-file-path (arg)
      "With prefix argument copy the name of current buffer
    Else if we are in dired mode copy the path to directory,
    Otherwise copy the path to the file the current buffer is
    visiting"
      (interactive "P")
      (let (kill-text what)
        (cond
         (current-prefix-arg (setq kill-text (buffer-name))
                             (setq what " buffer's name"))
         ((eq major-mode 'dired-mode) (setq kill-text (expand-file-name default-directory)) (setq what " directory's path"))
         ((buffer-file-name) (setq kill-text (buffer-file-name)) (setq what " file's path"))
         (t (setq kill-text (buffer-name))
            (setq what " buffer's name")))
        (when kill-text
          (kill-new kill-text)
          (message (concat "Copied" what)))))

    (global-set-key (kbd "C-c f") 'iqbal-copy-file-path)
  #+END_SRC


* Function to rename current buffer and associated file
  Credits: [[http://whattheemacsd.com/file-defuns.el-01.html][whattheemacsd]].
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-rename-current-buffer-file ()
      "Renames current buffer and file it is visiting."
      (interactive)
      (let ((name (buffer-name))
            (filename (buffer-file-name)))
        (if (not (and filename (file-exists-p filename)))
            (error "Buffer '%s' is not visiting a file!" name)
          (let ((new-name (read-file-name "New name: " filename)))
            (if (get-buffer new-name)
                (error "A buffer named '%s' already exists!" new-name)
              (if (vc-backend filename)
                  (vc-rename-file filename new-name)
                (rename-file filename new-name 1))
              (rename-buffer new-name)
              (set-visited-file-name new-name)
              (set-buffer-modified-p nil)
              (message "File '%s' successfully renamed to '%s'"
                       name (file-name-nondirectory new-name)))))))

    (global-set-key (kbd "C-x C-r") 'iqbal-rename-current-buffer-file)
  #+END_SRC


* Function to delete current buffer and its associated file
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-delete-file-and-buffer ()
      "Kill the current buffer and deletes the file it is visiting."
      (interactive)
      (let* ((filename (buffer-file-name))
             (delete-confirmed-p (y-or-n-p (format "Are you sure you want to delete %s?" filename))))
        (when (and filename delete-confirmed-p)
          (if (vc-backend filename)
              (vc-delete-file filename)
            (when (file-exists-p filename)
              (delete-file filename)
              (message "Deleted file %s" filename))
            (kill-buffer)))))
  #+END_SRC


* Do not prompt to apply local vars if user has said no once
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-local-vars-file (locate-user-emacs-file ".disabled-local-vars")
      "Directories with ignore local vars are stored here")

    (defvar iqbal-ignored-local-vars (when (file-exists-p iqbal-local-vars-file)
                                       (read (iqbal-read-file iqbal-local-vars-file)))
      "Local copy of directories for which local vars are ignored")

    (defun iqbal-store-ignored-local-vars ()
      "Write the local copy of ignored directories to disk wiil be
    restored on startup"
      (iqbal-write-to-file iqbal-local-vars-file
                           (prin1-to-string iqbal-ignored-local-vars)))

    (defun iqbal-enable-local-vars-for (dir)
      "Re-enable local vars for directory"
      (interactive (list (completing-read "Enable local vars for: "
                                          iqbal-ignored-local-vars)))
      (setq iqbal-ignored-local-vars (delete dir iqbal-ignored-local-vars)))

    (defun iqbal-cache-local-vars-resp (orig &rest args)
      (unless (member dir-name iqbal-ignored-local-vars)
        (let ((user-resp (apply orig args)))
          )))

    (defun iqbal-cache-local-vars-resp (orig &rest args)
      (let ((dir-name (last args)))
        (unless (member dir-name iqbal-ignored-local-vars)
          (let ((user-resp (apply orig args)))
            (unless user-resp (add-to-list 'iqbal-ignored-local-vars dir-name))
            user-resp))))

    ;; Activate the advice
    (advice-add 'hack-local-variables-confirm :around #'iqbal-cache-local-vars-resp)

    ;; Store the user choices when emacs exists
    (add-hook 'kill-emacs-hook #'iqbal-store-ignored-local-vars)
  #+END_SRC


* Delete files by moving to trash
  #+BEGIN_SRC emacs-lisp
    (setq delete-by-moving-to-trash t)
  #+END_SRC
