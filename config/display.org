* Ensure that the required packages are installed
  #+begin_src emacs-lisp
    (defvar my-display-packages
      '(diminish
        eval-sexp-fu
        smooth-scrolling
        volatile-highlights
        solarized-theme
        page-break-lines
        highlight-thing))

    (my-install-packages my-display-packages)
  #+end_src


* Do not show the startup screen
  #+begin_src emacs-lisp
    (setq inhibit-startup-screen t)
  #+end_src


* Use solarized theme
** Do not use different font sizes
   #+begin_src emacs-lisp
     (setq solarized-use-variable-pitch nil
           solarized-height-minus-1 1.0
           solarized-height-plus-1 1.0
           solarized-height-plus-2 1.0
           solarized-height-plus-3 1.0
           solarized-height-plus-4 1.0)
   #+end_src

** Fix underline position in X
   The default makes the mode-line appear broken in solarized theme
   #+begin_src emacs-lisp
     (setq x-underline-at-descent-line t)
   #+end_src

** Use dark or light theme according time
  #+begin_src emacs-lisp
    (defun my-load-solarized-theme (&optional frame)
      (interactive)
      (let ((current-hour (third (decode-time)))
            (current-minute (second (decode-time))))
        (if (and (< current-hour 19)
                 (> current-hour 7))
            (load-theme 'solarized-light t)
          (load-theme 'solarized-dark t))

        (set-face-attribute 'company-tooltip-common frame
                            :underline nil
                            :background (face-background 'company-tooltip)
                            :foreground (face-foreground 'company-tooltip)
                            :bold t)

        (set-face-attribute 'company-tooltip-common-selection frame
                            :underline nil
                            :background (face-background 'company-tooltip-selection)
                            :foreground (face-foreground 'company-tooltip-selection)
                            :bold t)))

    (when (display-graphic-p)
      (add-hook 'after-init-hook #'my-load-solarized-theme))
  #+end_src


* Don't show menubar, scrollbar and toolbar
  #+begin_src emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+end_src


* Enable visual line mode
  #+begin_src emacs-lisp
    (global-visual-line-mode)
  #+end_src


* Use DejaVu Sans Mono / Source Code Pro / Consolas font if available
  #+begin_src emacs-lisp
    (defun my-set-font (&optional frame)
      (set-frame-font (cond ((member "DejaVu Sans Mono" (font-family-list)) "DejaVu Sans Mono-09.5")
                            ((member "Source Code Pro" (font-family-list)) "Source Code Pro-10.90")
                            ((member "Consolas" (font-family-list)) "Consolas-11.7:light"))
                      t
                      (list (or frame (selected-frame)))))

    (add-hook 'after-make-frame-functions #'my-set-font)
    (my-set-font)
  #+end_src


* Customizations for linum-mode
** Make custom linum consistent [http://www.emacswiki.org/emacs/LineNumbers#toc6]
   #+begin_src emacs-lisp
     (eval-after-load "linum"
       '(progn (defface linum-leading-zero
                 `((t :inherit 'linum
                      :foreground ,(face-attribute 'linum :background nil t)))
                 "Face for displaying leading zeroes for line numbers in display margin."
                 :group 'linum)
     
               (defun linum-format-func (line)
                 (let ((w (length
                           (number-to-string (count-lines (point-min) (point-max))))))
                   (concat
                    (propertize (make-string (- w (length (number-to-string line))) ?0)
                                'face 'linum-leading-zero)
                    (propertize (concat " " (number-to-string line) " ") 'face 'linum))))
     
               ;; Line numbers in margin
                                             ;(global-linum-mode t)
               (setq linum-format 'linum-format-func)))
   #+end_src


* Customizations for modeline
** Show date time in modeline
   #+begin_src emacs-lisp
     (display-time-mode 1)
     (setq display-time-day-and-date t)
   #+end_src
** Display current column number
   #+begin_src emacs-lisp
     (column-number-mode)
   #+end_src


* Highlight changes in the buffer
  #+begin_src emacs-lisp
    (setq highlight-changes-visibility-initial-state nil)
    (global-highlight-changes-mode t)
    (set-face-foreground 'highlight-changes nil)
    (set-face-background 'highlight-changes "#382f2f")
    (set-face-foreground 'highlight-changes-delete nil)
    (set-face-background 'highlight-changes-delete "#916868")
  #+end_src


* Highlight current line
  #+begin_src emacs-lisp
    (when (display-graphic-p)
      (global-hl-line-mode) )
  #+end_src


* Temporarily highlight yanks and undos
  #+begin_src emacs-lisp
    (load "volatile-highlights")
    (volatile-highlights-mode 1)
  #+end_src


* Display the keys pressed the minibuffer
  #+begin_src emacs-lisp
    (setq echo-keystrokes 0.01)
  #+end_src


* Customizations for cursor
** Display cursor as bar
   #+begin_src emacs-lisp
     (setq-default cursor-type 'box)
   #+end_src

** Don't blink the cursor
   #+begin_src emacs-lisp
     (blink-cursor-mode 0)
   #+end_src


* Change the cursor display according to minor modes
  #+begin_src emacs-lisp
    (defvar my-set-cursor-color-color nil)
    (defvar my-set-cursor-color-buffer nil)

    (defun my-set-cursor-color-according-to-mode ()
      "Change cursor color according to some minor modes."
      (let ((color (cond (buffer-read-only "purple1")
                         (overwrite-mode "red")
                         (t "#38B4D2"))))
        (unless (and (string= color my-set-cursor-color-color)
                     (string= (buffer-name) my-set-cursor-color-buffer))
          (set-cursor-color (setq my-set-cursor-color-color color))
          (setq my-set-cursor-color-buffer (buffer-name)))))

    (add-hook 'post-command-hook 'my-set-cursor-color-according-to-mode)
  #+end_src


* Key for toggling fullscreen
  A simple function to toggle fullscreen, which works on windows as well as Linux
  borrowed from emacswiki
  #+begin_src emacs-lisp
    (defvar my-fullscreen-p t "Check if fullscreen is on or off")

    (defun my-non-fullscreen ()
      (interactive)
      (if (fboundp 'w32-send-sys-command)
          ;; WM_SYSCOMMAND restore #xf120
          (w32-send-sys-command 61728)
        (progn (set-frame-parameter nil 'width 82)
               (set-frame-parameter nil 'fullscreen 'fullheight))))

    (defun my-fullscreen ()
      (interactive)
      (if (fboundp 'w32-send-sys-command)
          ;; WM_SYSCOMMAND maximaze #xf030
          (w32-send-sys-command 61488)
        (set-frame-parameter nil 'fullscreen 'fullboth)))

    (defun my-toggle-fullscreen ()
      (interactive)
      (setq my-fullscreen-p (not my-fullscreen-p))
      (if my-fullscreen-p
          (my-non-fullscreen)
        (my-fullscreen)))

    (global-set-key (kbd "<f11>") 'my-toggle-fullscreen)
  #+end_src


* Use smooth-scrolling for better scrolling
  #+begin_src emacs-lisp
    (when (eq system-type 'windows-nt)
      (setq smooth-scroll-margin 1))
  #+end_src


* Better scrolling with mouse
  #+begin_src emacs-lisp
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  #+end_src


* Indicate size in modeline
  #+begin_src emacs-lisp
    (size-indication-mode)
  #+end_src


* Flash the currently executed sexp
** Load eval-sexp-fu
  #+begin_src emacs-lisp
    (load "eval-sexp-fu")
  #+end_src

** Custom colors
   #+begin_src emacs-lisp
     (set-face-attribute 'eval-sexp-fu-flash nil :background "#38B4D2" :foreground nil)
   #+end_src


* Not ringing and dinging please!
  #+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
  #+end_src


* Fix scroll lagging on windows not very good but better than earlier
  #+begin_src emacs-lisp
    (setq redisplay-dont-pause t
          scroll-margin 1
          scroll-step 1
          scroll-conservatively 10000
          scroll-preserve-screen-position 1)
  #+end_src


* Show form feed characters as horizontal lines
  #+begin_src emacs-lisp
    (global-page-break-lines-mode)
  #+end_src


* Display buffer name in frame title
  #+begin_src emacs-lisp
    (setq frame-title-format
          '(:eval (if (buffer-file-name)
                      (abbreviate-file-name (buffer-file-name))
                    "%b")))
  #+end_src


* Highlight thing configuration
  #+begin_src emacs-lisp
    (setq highlight-thing-limit-to-defun t)
    (add-hook 'prog-mode-hook #'highlight-thing-mode)
  #+end_src


* Diminsh some minor modes
  #+begin_src emacs-lisp
    ;; Apparently package.el fails to autoload this sometimes
    (load "diminish")

    (diminish 'visual-line-mode)
    (eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
    (eval-after-load "smartparens" '(diminish 'smartparens-mode))
    (eval-after-load "volatile-highlights" '(diminish 'volatile-highlights-mode))
    (eval-after-load "projectile" '(diminish 'projectile-mode))
    (eval-after-load "auto-complete" '(diminish 'auto-complete-mode))
    (eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
    (eval-after-load "guide-key" '(diminish 'guide-key-mode))
    (eval-after-load "back-button" '(diminish 'back-button-mode))
    (eval-after-load "el-spice" '(diminish 'el-spice-mode))
    (eval-after-load "eldoc" '(diminish 'eldoc-mode))
    (eval-after-load "hideshow" '(diminish 'hs-minor-mode))
    (eval-after-load "autopair" '(diminish 'autopair-mode))
    (eval-after-load "hilit-chg" '(diminish 'highlight-changes-mode))
    (eval-after-load "tern" '(diminish 'tern-mode))
    (eval-after-load "company" '(diminish 'company-mode))
    (eval-after-load "page-break-lines" '(diminish 'page-break-lines-mode))
    (eval-after-load "merlin" '(diminish 'merlin-mode))
    (eval-after-load "auto-complete" '(diminish 'auto-complete-mode))    
    (eval-after-load "magit" '(diminish 'magit-auto-revert-mode))
    (eval-after-load "flyspell" '(diminish 'flyspell-mode))
    (eval-after-load "ggtags" '(diminish 'ggtags-mode))
    (eval-after-load "subword" '(diminish 'subword-mode))
    (eval-after-load "abbrev" '(diminish 'abbrev-mode))
  #+end_src
