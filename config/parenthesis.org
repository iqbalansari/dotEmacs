* Packages for working with paranthesis
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-paranthesis-packages
      '(smartparens))

    (iqbal-install-packages iqbal-paranthesis-packages)

    (smartparens-global-mode t)
  #+END_SRC


* Diable smartparens in some modes
** We don't need smartparens in RE builder
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'sp-ignore-modes-list 'reb-mode)
     (add-to-list 'sp-ignore-modes-list 'artist-mode)
   #+END_SRC

** smartparens slows down artist mode, turn it off in artist-mode
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-artist-mode-toggle-smartparens ()
       (if (eq major-mode 'picture-mode)
           (turn-off-smartparens-mode)
         (turn-on-smartparens-mode)))

     (add-hook 'artist-mode-hook #'iqbal-artist-mode-toggle-smartparens)
   #+END_SRC


* Enable smartparens in minibuffer
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-in-eldoc-eval-p (id action context)
      (when (minibufferp)
        (member 'eldoc-in-minibuffer-mode minor-mode-list)))

    (defun iqbal-eldoc-eval-hook ()
      (when (eq this-command 'eldoc-eval-expression)
        (smartparens-mode +1)
        ;; Seems smartparens overrides this if set globally
        (sp-pair "'" nil :unless '(iqbal-in-eldoc-eval-p))))

    (add-hook 'minibuffer-setup-hook #'iqbal-eldoc-eval-hook)
  #+END_SRC


* Extra configuration for some modes
** Load smartparens config for extra configuration
  #+BEGIN_SRC emacs-lisp
    (require 'smartparens-config)
  #+END_SRC

** Enable strict mode in all lispy modes
   #+BEGIN_SRC emacs-lisp
     (dolist (mode sp--lisp-modes)
       (add-hook (intern (concat (symbol-name mode) "-hook"))
                 #'smartparens-strict-mode))
   #+END_SRC


* Do not autoescape string
  #+BEGIN_SRC emacs-lisp
    (setq sp-autoescape-string-quote nil)
  #+END_SRC


* Display configuration for smartparens
  #+BEGIN_SRC emacs-lisp
    (setq sp-highlight-pair-overlay nil)
    (setq sp-highlight-wrap-overlay nil)
    (setq sp-highlight-wrap-tag-overlay nil)
  #+END_SRC


* Always skip closing parenthesis
  #+BEGIN_SRC emacs-lisp
    (setq sp-autoskip-closing-pair 'always)
  #+END_SRC


* Keybindings for navigating around sexps using smartparens
  #+BEGIN_SRC emacs-lisp
    (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
    (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)

    (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
    (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

    (define-key sp-keymap (kbd "C-M-u") 'sp-up-sexp)
    (define-key sp-keymap (kbd "C-M-S-u") 'sp-backward-up-sexp)
    (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
    (define-key sp-keymap (kbd "C-M-S-d") 'sp-backward-down-sexp)
  #+END_SRC


* Keybindings for manipulating sexps using smartparens
  #+BEGIN_SRC emacs-lisp
    (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
    (define-key sp-keymap (kbd "C-M-S-k") 'sp-backward-kill-sexp)
    (define-key sp-keymap (kbd "C-M-;") 'sp-kill-hybrid-sexp)

    (define-key sp-keymap (kbd "C-M-r") 'sp-rewrap-sexp)
    (define-key sp-keymap (kbd "C-M-S-r") 'sp-swap-enclosing-sexp)

    (define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)
    (define-key sp-keymap (kbd "C-M-S-w") 'sp-backward-copy-sexp)

    (define-key sp-keymap (kbd "C-M-j") 'sp-join-sexp)
    (define-key sp-keymap (kbd "C-M-S-j") 'sp-split-sexp)
    (define-key sp-keymap (kbd "C-M-S-t") 'sp-transpose-sexp)

    (define-key sp-keymap (kbd "M-S-<delete>") 'sp-unwrap-sexp)
    (define-key sp-keymap (kbd "M-S-<backspace>") 'sp-backward-unwrap-sexp)

    (define-key sp-keymap (kbd "C-M-s") 'sp-splice-sexp)
    (define-key sp-keymap (kbd "C-{") 'sp-splice-sexp-killing-forward)
    (define-key sp-keymap (kbd "C-}") 'sp-splice-sexp-killing-backward)
    (define-key sp-keymap (kbd "C-M-|") 'sp-splice-sexp-killing-around)

    (define-key sp-keymap (kbd "C-M->") 'sp-forward-slurp-sexp)
    (define-key sp-keymap (kbd "C-M-<") 'sp-backward-slurp-sexp)
    (define-key sp-keymap (kbd "C-M-.") 'sp-forward-barf-sexp)
    (define-key sp-keymap (kbd "C-M-,") 'sp-backward-barf-sexp)

    (define-key sp-keymap (kbd "<C-left_bracket>") 'sp-select-previous-thing)
    (define-key sp-keymap (kbd "C-]") 'sp-select-next-thing)

    (define-key sp-keymap (kbd "C->") 'sp-add-to-next-sexp)
    (define-key sp-keymap (kbd "C-<") 'sp-add-to-previous-sexp)
  #+END_SRC


* Highlight matching parenthesis
** Enable highlighting
  #+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
  #+END_SRC

** Show matching paranthesis immediately
   #+BEGIN_SRC emacs-lisp
     (setq show-paren-delay 0)
   #+END_SRC

** Highlight only the paranthesis
   #+BEGIN_SRC emacs-lisp
     (setq show-paren-style 'parenthesis)
   #+END_SRC

** Custom colors for parenthesis
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'show-paren-mismatch nil :foreground "white" :background "red")
   #+END_SRC
