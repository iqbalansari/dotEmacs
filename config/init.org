* Code to speed up the loading of modules
  Loading all of the config files at the startup is expensive since
  each file first converted from .org to .el files and then loaded
  separately. To speed up the process, we do the following
  1) Convert the org mode files to el files
  2) Combine their code in one file and load it

  Now at subsequent emacs startups we first check if any org
  file is newer then the compiled file, if so repeat step 1) and 2)
  This way the startup will be slow only when any of the org files
  are modified or there is some new org file, otherwise it will be
  faster since we load a single file
  #+BEGIN_SRC emacs-lisp
    (require 'cl-lib)
    (defvar iqbal-modules-dir (locate-user-emacs-file "config/"))
    (defvar iqbal-modules-compiled-dir (expand-file-name ".compiled/" iqbal-modules-dir))

    (defvar iqbal-tangled-modules (expand-file-name ".combined.el" iqbal-modules-compiled-dir))
    (defvar iqbal-previous-modules-file (expand-file-name ".previous-modules" iqbal-modules-compiled-dir))

    (defvar iqbal-previous-modules (when (file-exists-p iqbal-previous-modules-file)
                                     (read (iqbal-read-file iqbal-previous-modules-file))))

    (defun iqbal-get-module-org-file (module)
      (concat iqbal-modules-dir (symbol-name module) ".org"))

    (defun iqbal-get-module-el-file (module)
      (concat iqbal-modules-compiled-dir (symbol-name module) ".el"))

    (defun iqbal-get-changed-module-files (modules)
      (if (file-exists-p iqbal-tangled-modules)
          (cl-remove-if-not (lambda (module)
                       (file-newer-than-file-p (iqbal-get-module-org-file module)
                                               (iqbal-get-module-el-file module)))
                     modules)
        modules))

    (defun iqbal-combine-modules (modules target)
      (iqbal-write-to-file target
                           (cl-reduce (lambda (code module)
                                     (concat code
                                             (iqbal-read-file (iqbal-get-module-el-file module))))
                                     modules :initial-value ""))
      (byte-compile-file target))

    (defun iqbal-compile-modules (modules)
      (dolist (module modules)
        (org-babel-tangle-file (iqbal-get-module-org-file module)
                               (iqbal-get-module-el-file module)
                               "emacs-lisp")))

    (defun iqbal-regenerate-compiled-file-maybe (current-modules previous-modules target)
      (let ((stale-modules (iqbal-get-changed-module-files current-modules))
            (module-list-changed-p (cl-set-exclusive-or previous-modules current-modules)))
        (when (or stale-modules module-list-changed-p)
          (require 'bytecomp)
          ;; Delete previously compiled file
          (when (file-exists-p (byte-compile-dest-file iqbal-tangled-modules))
            (delete-file (byte-compile-dest-file iqbal-tangled-modules)))
          (iqbal-compile-modules stale-modules)
          (iqbal-combine-modules current-modules target))))

    (defun iqbal--compile-and-load-modules (current-modules)
      (iqbal-regenerate-compiled-file-maybe current-modules iqbal-previous-modules iqbal-tangled-modules)
      (iqbal-write-to-file iqbal-previous-modules-file
                           (prin1-to-string current-modules))
      (load (file-name-sans-extension iqbal-tangled-modules)))

    (defun iqbal-remove-generated-files ()
      (interactive)
      (let ((compiled-folders (mapcar (lambda (folder)
                                        (concat folder "/.compiled"))
                                      (append (cl-remove-if-not #'file-directory-p
                                                             (directory-files iqbal-langs-dir t "[^.]+"))
                                              (list iqbal-modules-dir)))))

        (dolist (folder compiled-folders)
          (when (file-exists-p folder)
            (delete-directory folder t nil)))))

    (defun iqbal-compile-and-load-modules ()
      (interactive)
      (when (interactive-p)
        (window-configuration-to-register 'w))

      (iqbal--compile-and-load-modules iqbal-modules-list)

      (when (interactive-p)
        (jump-to-register 'w)))
  #+END_SRC


* List of modules to be loaded
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-modules-list '(ui
                                 editing
                                 compile
                                 parenthesis
                                 snippets
                                 navigation
                                 helm
                                 search-replace
                                 completion
                                 syntax-check
                                 buffers
                                 files
                                 dired
                                 version-control
                                 debugging
                                 comint
                                 org
                                 workflow
                                 notes
                                 project
                                 sidebar
                                 eshell
                                 shell
                                 term
                                 backup
                                 spellchecking
                                 windows
                                 session
                                 scratch
                                 web
                                 mail
                                 contacts
                                 rss
                                 news
                                 irc
                                 pdf
                                 info
                                 rfc
                                 media
                                 utilities
                                 exwm))

    (when (eq system-type 'windows-nt)
      (add-to-list 'iqbal-modules-list 'unxutils))
  #+END_SRC


* Load the modules
  #+BEGIN_SRC emacs-lisp
    (iqbal-compile-and-load-modules)
  #+END_SRC
