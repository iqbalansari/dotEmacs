* Install some useful packages
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-editing-packages
      '(undo-tree
        browse-kill-ring
        multiple-cursors
        tiny
        expand-region
        hungry-delete
        zop-to-char
        fold-this
        pos-tip
        phi-search))

    (iqbal-install-packages iqbal-editing-packages)
  #+END_SRC


* Integration with system clipboard
** Use system clipboard, these are helpful only when running GUI emacs
  #+BEGIN_SRC emacs-lisp
    (setq x-select-enable-clipboard t)
    (setq save-interprogram-paste-before-kill t)
  #+END_SRC

** Use 'xsel' for kill and yank on emacs run in terminal
   #+BEGIN_SRC emacs-lisp
     (unless window-system
       (when (getenv "DISPLAY")
         (if (executable-find "xsel")
             (progn
               ;; Callback for when user cuts
               (defun xsel-cut-function (text &optional push)
                 ;; Insert text to temp-buffer, and "send" content to xsel stdin
                 (with-temp-buffer
                   (insert text)
                   ;; I prefer using the "clipboard" selection (the one the
                   ;; typically is used by c-c/c-v) before the primary selection
                   ;; (that uses mouse-select/middle-button-click)
                   (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
               ;; Call back for when user pastes
               (defun xsel-paste-function()
                 ;; Find out what is current selection by xsel. If it is different
                 ;; from the top of the kill-ring (car kill-ring), then return
                 ;; it. Else, nil is returned, so whatever is in the top of the
                 ;; kill-ring will be used.
                 (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
                   (unless (string= (car kill-ring) xsel-output)
                     xsel-output )))
               ;; Attach callbacks to hooks
               (setq interprogram-cut-function 'xsel-cut-function)
               (setq interprogram-paste-function 'xsel-paste-function))
           (message "Install `xsel' for integrating copy-paste between emacs run in terminal and other programs"))))
   #+END_SRC

** Workaround for 'Quit :"empty or unsupported pasteboard type"' bug on OS X
   #+BEGIN_SRC emacs-lisp
     (when (and (eq window-system 'ns)
                (version< emacs-version "24.4")) 
       (defadvice ns-get-pasteboard (around hack-empty-pasteboard compile activate) 
         (condition-case err 
             ad-do-it 
           (quit (message "%s" (cadr err)) 
                 nil))))
   #+END_SRC


* Enable some disabled commands
  #+BEGIN_SRC emacs-lisp
    (put 'narrow-to-region 'disabled nil)
    (put 'scroll-left 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (put 'upcase-region 'disabled nil)
  #+END_SRC


* General configurations for editing
** Always use spaces to indent and use four space
  #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4)
    (setq-default indent-tabs-mode nil)
    (setq tab-stop-list (number-sequence 4 200 4))
  #+END_SRC

** Enable subword mode globally
  #+BEGIN_SRC emacs-lisp
    (global-subword-mode 1)
  #+END_SRC

** Replace selected region with typed text
  #+BEGIN_SRC emacs-lisp
    (delete-selection-mode)
  #+END_SRC
** Set fill-column to 80
  #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 80)
  #+END_SRC


* Command to toggle comment on region or line if no region is selected
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-comment-or-uncomment-region-or-line ()
      "Comments or uncomments the region or the current line if there's no active region."
      (interactive)
      (apply #'comment-or-uncomment-region 
             (if (region-active-p)
                 (list (region-beginning) (region-end))
               (list (line-beginning-position) (line-end-position))))
      (forward-line))
  #+END_SRC


* Command to copy/cut current line if no region is selected, if rectangle is selected use it
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-mark-lines(arg)
      (back-to-indentation)
      (set-mark-command nil)
      (move-end-of-line arg))

    (defun copy-line-or-region (arg)
      "Copy current line, or current text selection."
      (interactive "p")
      (cond ((and (boundp 'cua--rectangle) cua--rectangle)
             (progn (call-interactively 'cua-copy-rectangle)
                    (message "Copied rectangle")))
            ((region-active-p)
             (progn (call-interactively 'kill-ring-save)
                    (indicate-copied-region)))
            (t (let ((cur-pos (point)))
                 (iqbal-mark-lines arg)
                 (call-interactively 'kill-ring-save)
                 (deactivate-mark t)
                 (goto-char cur-pos)
                 (message (concat "Saved "
                                  (number-to-string arg)
                                  " line(s) to kill ring"))))))

    (defun cut-line-or-region (arg)
      "Cut the current line, or current text selection."
      (interactive "p")
      (cond ((and (boundp 'cua--rectangle) cua--rectangle) (progn (call-interactively 'cua-cut-rectangle)
                                                                  (message "Killed rectangle")))
            ((region-active-p) (progn (call-interactively 'kill-region)
                                      (message "Killed region")))
            (t  (progn (iqbal-mark-lines arg)
                       (call-interactively 'kill-region)
                       (message (concat "Killed " (number-to-string arg) " line(s)"))))))
  #+END_SRC


* Commands to duplicate current line or region
  Duplicate current line if region is not selected else duplicate the region
  pressing 'd' immediately after duplicating a line will duplicate the line
  again.
  #+BEGIN_SRC emacs-lisp
    (defun duplicate-current-line-or-region (arg)
      "Duplicates the current line or region ARG times.
    If there's no region, the current line will be duplicated."
      (interactive "p")
      (if (region-active-p)
          (lexical-let ((beg (region-beginning))
                (end (region-end)))
            (duplicate-region arg beg end)
            (one-shot-keybinding "d" (lambda ()
                                       (interactive)
                                       (duplicate-region 1 beg end))))
        (duplicate-current-line arg)
        (one-shot-keybinding "d" 'duplicate-current-line)))

    (defun duplicate-region (&optional num start end)
      "Duplicates the region bounded by START and END NUM times.
    If no START and END is provided, the current region-beginning and
    region-end is used."
      (interactive "p")
      (save-excursion
        (let* ((start (or start (region-beginning)))
               (end (or end (region-end)))
               (region (buffer-substring start end)))
          (goto-char end)
          (dotimes (i num)
            (insert region)))))

    (defun duplicate-current-line (&optional num)
      "Duplicate the current line NUM times."
      (interactive "p")
      (save-excursion
        (when (eq (point-at-eol) (point-max))
          (goto-char (point-max))
          (newline)
          (forward-char -1))
        (duplicate-region num (point-at-bol) (1+ (point-at-eol)))))
  #+END_SRC


* Commands for opening newlines
  Typing shift + return anywhere on a line will create a new line
  below the current line, ctrl + shift + return will open a line above
  M-RET between parenthesis will insert an newline between the parenthesis
  #+BEGIN_SRC emacs-lisp
    ;; Directly calling indent-line-function, since indent-for-tab-command can
    ;; trigger completions (if tab-always-indent is set to complete)
    (defun open-line-below ()
      (interactive)
      (end-of-line)
      (newline)
      (funcall indent-line-function))

    (defun open-line-above ()
      (interactive)
      (beginning-of-line)
      (newline)
      (forward-line -1)
      (funcall indent-line-function))


    (defun new-line-dwim ()
      (interactive)
      (let ((break-open-pair (or (and (looking-back "{") (looking-at "}"))
                                 (and (looking-back ">") (looking-at "<"))
                                 (and (looking-back "\\[") (looking-at "\\]")))))
        (newline)
        (when break-open-pair
          (save-excursion
            (newline)
            (funcall indent-line-function)))
        (funcall indent-line-function)))
  #+END_SRC


* Commands to increment and decrement integers at point
  These were borrowed from prelude
  #+BEGIN_SRC emacs-lisp
    (defun thing-at-point-goto-end-of-integer ()
      "Go to end of integer at point."
      (let ((inhibit-changing-match-data t))
        ;; Skip over optional sign
        (when (looking-at "[+-]")
          (forward-char 1))
        ;; Skip over digits
        (skip-chars-forward "[[:digit:]]")
        ;; Check for at least one digit
        (unless (looking-back "[[:digit:]]")
          (error "No integer here"))))
    (put 'integer 'beginning-op 'thing-at-point-goto-end-of-integer)

    (defun thing-at-point-goto-beginning-of-integer ()
      "Go to end of integer at point."
      (let ((inhibit-changing-match-data t))
        ;; Skip backward over digits
        (skip-chars-backward "[[:digit:]]")
        ;; Check for digits and optional sign
        (unless (looking-at "[+-]?[[:digit:]]")
          (error "No integer here"))
        ;; Skip backward over optional sign
        (when (looking-back "[+-]")
          (backward-char 1))))
    (put 'integer 'beginning-op 'thing-at-point-goto-beginning-of-integer)

    (defun thing-at-point-bounds-of-integer-at-point ()
      "Get boundaries of integer at point."
      (save-excursion
        (let (beg end)
          (thing-at-point-goto-beginning-of-integer)
          (setq beg (point))
          (thing-at-point-goto-end-of-integer)
          (setq end (point))
          (cons beg end))))
    (put 'integer 'bounds-of-thing-at-point 'thing-at-point-bounds-of-integer-at-point)

    (defun thing-at-point-integer-at-point ()
      "Get integer at point."
      (let ((bounds (bounds-of-thing-at-point 'integer)))
        (string-to-number (buffer-substring (car bounds) (cdr bounds)))))
    (put 'integer 'thing-at-point 'thing-at-point-integer-at-point)

    (defun increment-integer-at-point (&optional inc)
      "Increment integer at point by one.

    With numeric prefix arg INC, increment the integer by INC amount."
      (interactive "p")
      (let ((inc (or inc 1))
            (n (thing-at-point 'integer))
            (bounds (bounds-of-thing-at-point 'integer)))
        (delete-region (car bounds) (cdr bounds))
        (insert (int-to-string (+ n inc)))))

    (defun decrement-integer-at-point (&optional dec)
      "Decrement integer at point by one.

    With numeric prefix arg DEC, decrement the integer by DEC amount."
      (interactive "p")
      (increment-integer-at-point (- (or dec 1))))
  #+END_SRC


* Command to prompt for user input during macro execution
  Following was borrowed from [[http://www.emacswiki.org/emacs/KeyboardMacros#toc5][emacswiki]], Pressing ‘C-x Q’ during macro
  definition will present you with a minibuffer prompt (using
  recursive edit). Inserting some text and pressing RET will end
  recursive edit and continue the definition of the macro in the
  minibuffer. Pressing RET again will insert the entered text at
  point. If you don’t want to insert the text right away you can
  instead kill the input at this point (using ‘C-a C-k RET’) and use
  it later in the macro definition.
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-macro-query (arg)
      "Prompt for input using minibuffer during kbd macro execution.  With prefix
       argument, allows you to select what prompt string to use.  If the input is
       non-empty, it is inserted at point."
      (interactive "P")
      (let* ((prompt (if arg (read-from-minibuffer "PROMPT: ") "Input: "))
             (input (minibuffer-with-setup-hook (lambda () (kbd-macro-query t))
                      (read-from-minibuffer prompt))))
        (unless (string= "" input) (insert input))))
  #+END_SRC


* Auto-indent on yanked text taken from [[http://www.emacswiki.org/emacs/AutoIndentation#toc3][emacswiki]]
  #+BEGIN_SRC emacs-lisp
    (dolist (command '(yank yank-pop))
       (eval `(defadvice ,command (after indent-region activate)
                (and (not current-prefix-arg)
                     (member major-mode '(emacs-lisp-mode lisp-mode
                                                          clojure-mode    scheme-mode
                                                          haskell-mode    ruby-mode
                                                          rspec-mode      python-mode
                                                          c-mode          c++-mode
                                                          objc-mode       latex-mode
                                                          plain-tex-mode))
                     (let ((mark-even-if-inactive transient-mark-mode))
                       (indent-region (region-beginning) (region-end) nil))))))
  #+END_SRC


* Code folding configuration
** Enable hs-minor-mode for supported modes
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-enable-hs ()
       (ignore-errors
         (hs-minor-mode)))

     (add-hook 'prog-mode-hook 'iqbal-enable-hs)
   #+END_SRC

** Setup help at point to display local-help
  Setup help-at-pt to display help when idle, in case of folded code
  it will actually execute the code to display the [[folded_code][folded code popup]].
  #+BEGIN_SRC emacs-lisp
       (setq help-at-pt-display-when-idle t)
       (help-at-pt-set-timer)
  #+END_SRC

** Function to display folded area as a popup <<folded_code>>
   hs-mode mode allows us to additional data to the overlay, this can
   be used to set overlay's 'help-echo' property so that 'help-at-pt'
   can then display it after certain delay. In our case we set help
   echo to a function which when called displays a popup with folded code.

   Further we can toggle the folded region with 'C-g' or '<return>' by setting
   keymap property of the overlay

   #+BEGIN_SRC emacs-lisp
     (load "pos-tip")
     (defun iqbal--display-folded-content (window ov pos)
       (pos-tip-show (buffer-substring (overlay-start ov)
                                                (overlay-end ov)))
       nil)
   #+END_SRC

** Unfold code when searching
  #+BEGIN_SRC emacs-lisp
      (setq hs-isearch-open t)
  #+END_SRC

** Keymap for folded content
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-folding-keymap (make-sparse-keymap))
     (define-key iqbal-folding-keymap (kbd "<return>") 'hs-toggle-hiding)
     (define-key iqbal-folding-keymap (kbd "C-g") 'hs-toggle-hiding)
   #+END_SRC

** Show folded code in a pos-tip
*** With fold this
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'fold-this
        (defadvice fold-this (after fold-this-show-help (start end))
          (let ((overlays (overlays-in start end)))
            (dolist (ov overlays)
              (when (eq (overlay-get ov  'type) 'fold-this)
                (overlay-put ov 'help-echo 'iqbal--display-folded-content)
                (define-key (overlay-get ov 'keymap) (kbd "C-x C-\\") 'fold-this-unfold-at-point)))))

        (ad-activate 'fold-this))
    #+END_SRC
*** With hs-minor-mode
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-display-folded-content (ov)
        (overlay-put ov 'display "...")
        (overlay-put ov 'keymap iqbal-folding-keymap)
        (overlay-put ov 'help-echo 'iqbal--display-folded-content))

      (setq hs-set-up-overlay 'iqbal-display-folded-content)
    #+END_SRC

** Function to fold code at current indentation <<fold_indentation>>
   The following code was borrowed from [[http://www.emacswiki.org/emacs/HideShow#toc5][EmacsWiki]] and modified a bit
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-hide-current-indentation ()
       (interactive)
       (set-selective-display
        (unless selective-display
          (progn
            (back-to-indentation)
            (current-column)))))
   #+END_SRC

** Combining fold-this and hs-minor-mode
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-fold-this-hs-hide ()
       "Folds the region if mark is active otherwise fold the current indent"
       (interactive)
       (if (region-active-p)
           (fold-this (region-beginning)
                          (region-end))
         (when (and (boundp 'hs-minor-mode) hs-minor-mode)
           (hs-toggle-hiding))))
   #+END_SRC


* Multiple cursors setup
** Load mc-cycle-cursors and mc-hide-unmatched-lines-mode for extra functionality
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'multiple-cursors-core
       (load "mc-mark-more")
       (load "mc-hide-unmatched-lines-mode")
       (load "mc-cycle-cursors"))
   #+END_SRC

** Location for mc/list-file
   #+BEGIN_SRC emacs-lisp
     (setq mc/list-file (locate-user-emacs-file ".mc-lists.el"))
   #+END_SRC


* Undo tree setup
** Keep the region active when undoing in a region
   #+BEGIN_SRC emacs-lisp
     (defadvice undo-tree-undo (around keep-region activate)
       (if (use-region-p)
           (let ((m (set-marker (make-marker) (mark)))
                 (p (set-marker (make-marker) (point))))
             ad-do-it
             (goto-char p)
             (set-mark m)
             (set-marker p nil)
             (set-marker m nil))
         ad-do-it))
   #+END_SRC

** Enable undo-tree globally
  #+BEGIN_SRC emacs-lisp
    (global-undo-tree-mode)
  #+END_SRC


* Browse kill ring setup
** Do not show duplicates in kill-ring
   #+BEGIN_SRC emacs-lisp
     (setq browse-kill-ring-display-duplicates nil)
   #+END_SRC

** Don't highlight current candidate in kill-ring
   #+BEGIN_SRC emacs-lisp
     (setq browse-kill-ring-highlight-inserted-item nil)
   #+END_SRC

** Display maximum of 100 characters per entry in kill-ring
   #+BEGIN_SRC emacs-lisp
     (setq browse-kill-ring-maximum-display-length 100)
   #+END_SRC

** Do not add duplicates to kill-ring
   #+BEGIN_SRC emacs-lisp
     (setq browse-kill-ring-no-duplicates t)
   #+END_SRC

** Always keep the current entry in kill ring at the top
   #+BEGIN_SRC emacs-lisp
     (setq browse-kill-ring-recenter t)
   #+END_SRC


* Cleanup whitespace in the buffer
  #+BEGIN_SRC emacs-lisp
    (defun cleanup-buffer-safe ()
      "Perform a bunch of safe operations on the whitespace content of a buffer.
    Does not indent buffer, because it is used for a before-save-hook, and that
    might be bad."
      (interactive)
      (untabify (point-min) (point-max))
      (delete-trailing-whitespace)
      (set-buffer-file-coding-system 'utf-8))
  #+END_SRC


* Convert buffer from DOS end-of-lines to Unix end-of-lines and vice versa
  #+BEGIN_SRC emacs-lisp
    (defun dos-to-unix ()
      "Cut all visible ^M from the current buffer."
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\r" nil t)
          (replace-match ""))))

    (defun unix-to-dos ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward "\n" nil t)
          (replace-match "\r\n"))))
  #+END_SRC


* Require final newlines
  #+BEGIN_SRC emacs-lisp
    (setq require-final-newline 'ask)
  #+END_SRC


* Do not ask before saving abbrevs
  #+BEGIN_SRC emacs-lisp
    (setq save-abbrevs 'silently)
  #+END_SRC


* DWIM versions of upcase-word and friends
  These operate on region if active otherwise operate on current word
  #+BEGIN_SRC emacs-lisp
    (defmacro iqbal-work-on-region-or-word (func docstring word-func region-func)
      `(defun ,func ()
         ,docstring
         (interactive)
         (let ((command (if (region-active-p)
                            ',region-func
                          ',word-func)))
           (call-interactively  (or (command-remapping command)
                                    command)))))

    (iqbal-work-on-region-or-word iqbal-upcase-dwim "Upcase word or region" upcase-word upcase-region)
    (iqbal-work-on-region-or-word iqbal-downcase-dwim "Downcase word or region" downcase-word downcase-region)
    (iqbal-work-on-region-or-word iqbal-capitalize-dwim "Capitalize word or region" capitalize-word capitalize-region)
  #+END_SRC


* Keybindings
** Keybinding to prompt user for value during recording macro
   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-xQ" 'iqbal-macro-query)
   #+END_SRC

** Keybindings for DWIM versions of copy/cut versions
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-w") 'copy-line-or-region)
     (global-set-key (kbd "C-w") 'cut-line-or-region)
   #+END_SRC

** Keybinding to duplicate current line or region
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x d") 'duplicate-current-line-or-region)
   #+END_SRC

** Keybindings to open newlines
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-o") 'open-line-below)
     (global-set-key (kbd "C-S-o") 'open-line-above)
     (define-key prog-mode-map (kbd "<M-return>") 'new-line-dwim)
   #+END_SRC

** Keybindings to increment/decrement integers at point
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c +") 'increment-integer-at-point)
     (global-set-key (kbd "C-c -") 'decrement-integer-at-point)
   #+END_SRC

** Keybinding to toggle comment on line or region
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-;") 'iqbal-comment-or-uncomment-region-or-line)
   #+END_SRC

** Keybindings for multiple cursors
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-S-m") 'mc/mark-more-like-this-extended)
    (global-set-key (kbd "C-S-l") 'mc/edit-lines)
    (global-set-key (kbd "C-S-c") 'mc/mark-all-like-this-dwim)
    (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
    (global-set-key (kbd "C-S-r") 'set-rectangular-region-anchor)
    (global-set-key (kbd "C-S-a") 'mc/mark-all-in-region)
  #+END_SRC

** Extra keybindings enabled in multiple cursors mode
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-additional-mc-keybindings ()
       (define-key mc/keymap (kbd "C-s") #'phi-search)
       (define-key mc/keymap (kbd "C-r") #'phi-search-backward)
       (define-key mc/keymap (kbd "M-i") #'mc/insert-numbers)
       (define-key mc/keymap (kbd "M-s") #'mc/sort-regions)
       (define-key mc/keymap (kbd "M-r") #'mc/reverse-regions)
       ;; Explicitly setting in mc/keymap so that is not overridden by lisp-interaction-mode-map
       (define-key mc/keymap (kbd "C-j") #'newline))

     (add-hook 'multiple-cursors-mode-hook #'iqbal-additional-mc-keybindings)
   #+END_SRC

** Keybindings for expanding tiny expressions
  #+BEGIN_SRC emacs-lisp
    (autoload 'tiny-expand "tiny")
    (global-set-key (kbd "C-:") 'tiny-expand)
  #+END_SRC

** Keybindings for browse kill ring
  #+BEGIN_SRC emacs-lisp
    (autoload 'browse-kill-ring "browse-kill-ring")
    (global-set-key (kbd "C-c M-y") 'browse-kill-ring)
  #+END_SRC

** Keybindings for expand region
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-=") 'er/expand-region)
    (global-set-key (kbd "C--") 'er/contract-region)
  #+END_SRC

** Keybindings to highlight text according to regexp
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c h l") 'highlight-lines-matching-regexp)
    (global-set-key (kbd "C-c h w") 'highlight-regexp)
    (global-set-key (kbd "C-c h r") 'unhighlight-regexp)
  #+END_SRC

** Keybindings for killing backwards
  Pressing shift with usual keys will reverse the operations
  #+BEGIN_SRC emacs-lisp
    (defun backward-kill-line (arg)
      "Kill ARG lines backward."
      (interactive "p")
      (kill-line (- 1 arg)))

    (global-set-key (kbd "C-S-k") 'backward-kill-line)

    (global-set-key (kbd "M-D") 'backward-kill-word)

    (global-set-key (kbd "C-S-d") 'backward-delete-char-untabify)
  #+END_SRC

** Keybindings for code folding
  #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-\\") 'iqbal-fold-this-hs-hide)
  #+END_SRC

** Keybindings for hungry deletion
  #+BEGIN_SRC emacs-lisp
    (autoload 'hungry-delete-forward "hungry-delete")
    (autoload 'hungry-delete-backward "hungry-delete")
    (global-set-key (kbd "C-c DEL") 'hungry-delete-backward)
    (global-set-key (kbd "C-c <deletechar>") 'hungry-delete-forward)
  #+END_SRC

** Keybinding for zop-to-char
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-z") 'zop-to-char)
   #+END_SRC

** Keybindings for DWIM versions upcase-word and friends
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-u") #'iqbal-upcase-dwim)
     (global-set-key (kbd "M-l") #'iqbal-downcase-dwim)
     (global-set-key (kbd "M-c") #'iqbal-capitalize-dwim)
   #+END_SRC
   
** Unset C-z, I don't find it useful
   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))
     (global-unset-key (kbd "C-x C-z"))
   #+END_SRC
