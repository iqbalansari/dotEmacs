* Install bongo
  #+begin_src emacs-lisp
    (iqbal-install-packages '(bongo volume))
  #+end_src


* Prefer playlist buffers
  #+begin_src emacs-lisp
    (setq bongo-prefer-library-buffers nil)
  #+end_src


* Use VLC to play https streams
  #+begin_src emacs-lisp
    (setq bongo-custom-backend-matchers '((vlc . ("https:" . t))))
  #+end_src


* Hacks around vlc backend
  Would eventually report these upstream
** And '--play-and-stop' to vlc process 
   Without this --play-and-exit does not seem to have any effect
   #+begin_src emacs-lisp
     (setq bongo-vlc-extra-arguments '("--play-and-stop"))
   #+end_src

** Fetch timing data when bongo player starts or seeks
   #+begin_src emacs-lisp
     (defun iqbal-bongo-start-vlc-timer (player)
       (when (eq (bongo-player-backend-name bongo-player) 'vlc)
         (bongo-vlc-player-start-timer player)))

     (add-hook 'bongo-player-sought-functions #'iqbal-bongo-start-vlc-timer)
     (add-hook 'bongo-player-started-functions #'iqbal-bongo-start-vlc-timer)
   #+end_src


* Other minor configurations
** Do not display bongo logo
  #+begin_src emacs-lisp
    (setq bongo-logo nil)
  #+end_src

** Mark played tracks
   #+begin_src emacs-lisp
     (setq bongo-mark-played-tracks t)
   #+end_src

** Update references to renamed files without asking
   #+begin_src emacs-lisp
     (setq bongo-update-references-to-renamed-files t)
   #+end_src


* Bongo keybindings
** Keybinding to start bongo
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c M") #'bongo)
  #+end_src

** Keybindings for bongo-dired-library-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'bongo
       (define-key bongo-dired-library-mode-map (kbd "C-c C-e") nil))
   #+end_src


* Setup auto-mode-alist entries
  #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist
                 '("\\.bongo-library$" . bongo-library-mode))
    (add-to-list 'auto-mode-alist
                 '("\\.bongo-playlist$" . bongo-playlist-mode))

    (autoload 'bongo-library-mode "bongo" "bongo library mode" t)
    (autoload 'bongo-playlist-mode "bongo" "bongo playlist mode" t)
    (autoload 'bongo-dired-library-mode "bongo" "bongo dired library mode" t)
  #+end_src


* Add elfeed enclosures to bongo library
  #+begin_src emacs-lisp
    (defun iqbal-resolve-redirects-url (url)
      (let ((url-request-method "HEAD"))
        (with-current-buffer (url-retrieve-synchronously url)
          (url-recreate-url url-http-target-url))))

    (defun iqbal-resolve-redirects-curl (url)
      (let ((curl-command (format "curl -L -I -s -o /dev/null %s -w '%%{url_effective}'"
                                  (shell-quote-argument url))))
        (with-temp-buffer
          (when (shell-command curl-command (current-buffer))
            (buffer-string)))))

    (defun iqbal-resolve-redirects (url)
      (if (executable-find "curl")
          (iqbal-resolve-redirects-curl url)
        (iqbal-resolve-redirects-url url)))

    (defun iqbal-add-enclosure-to-bongo (elfeed-entry bongo-buffer)
      (let* ((enclosures (elfeed-entry-enclosures elfeed-entry))
             (enclosure (when enclosures (car enclosures))))
        (if (and enclosure
                 (or (string-prefix-p "audio" (cadr enclosure))
                     (string-prefix-p "video" (cadr enclosure))))
            (with-current-buffer bongo-buffer
              (message "Resolving redirects in enclosure url ... ")
              (let ((url (or (iqbal-resolve-redirects (car enclosure))
                             (and (y-or-n-p "Could not resolve redirects use the original url?")
                                  url))))
                (if url
                    (progn (bongo-insert-uri url (elfeed-entry-title elfeed-entry))
                           (message "Enclosure added to bongo library"))
                  (user-error "Could not add enclosure to bongo library!"))))
          (user-error "No playable enclousures found in current feed!"))))

    (defun iqbal-elfeed-show-add-enclosure-to-bongo ()
      (interactive)
      (when (eq major-mode 'elfeed-show-mode)
        (iqbal-add-enclosure-to-bongo elfeed-show-entry
                                      (find-file-noselect (iqbal-get-file-in-data-directory "podcasts.bongo-library")))))

    (with-eval-after-load 'elfeed-show
      (define-key elfeed-show-mode-map (kbd "M") #'iqbal-elfeed-show-add-enclosure-to-bongo))
  #+end_src


* Enqueuing tracks from arbitrary dired buffers
  #+begin_src emacs-lisp
    (autoload 'bongo-dired-append-enqueue-lines "bongo" "Enqueue tracks in bongo" t)
    (autoload 'bongo-dired-insert-enqueue-lines "bongo" "Enqueue tracks in bongo" t)

    (with-eval-after-load 'dired
      (define-key dired-mode-map "e" 'bongo-dired-append-enqueue-lines)
      (define-key dired-mode-map "E" 'bongo-dired-insert-enqueue-lines))
  #+end_src


* Integration with org-mode
  #+begin_src emacs-lisp
    (defun iqbal-seconds-as-minutes (seconds)
      (format "%02d:%02d"(/ seconds 60)
              (mod seconds 60)))

    (defun iqbal-player-state-org-description (player)
      (let* ((description (or (ignore-errors (cdr (assoc 'title (assoc 'track player))))
                              (file-name-base (bongo-player-file-name player))))
             (elapsed-time (bongo-player-elapsed-time player))
             (time-string (when elapsed-time (format " - %s"(iqbal-seconds-as-minutes elapsed-time)))))
        (concat (string-trim description) time-string)))

    (defun iqbal-store-bongo-link ()
      (when (and (bongo-buffer-p (current-buffer))
                 bongo-player)
        (let* ((elapsed-time (bongo-player-elapsed-time bongo-player))
               (file-name (bongo-player-file-name bongo-player))
               (description (iqbal-player-state-org-description bongo-player))
               (link (concat "bongo:"
                             (url-hexify-string file-name)
                             (when elapsed-time
                               (format "::%d" elapsed-time)))))
          (org-store-link-props :type "bongo"
                                :link link
                                :description description))))

    (add-hook 'org-store-link-functions 'iqbal-store-bongo-link)
  #+end_src
