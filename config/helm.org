* Install helm packages
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-packages '(helm helm-descbinds helm-projectile helm-company helm-mu org-linkany helm-gitignore wgrep-helm))

    (when (executable-find "ag")
      (iqbal-install-package 'helm-ag))

    (when (locate-library "yasnippet")
      (iqbal-install-package 'helm-c-yasnippet))
  #+END_SRC


* Make helm more like ido
** Enable fuzzy-match where appropriate
   #+BEGIN_SRC emacs-lisp
     (setq helm-mode-fuzzy-match t)
     (setq helm-recentf-fuzzy-match t)
     (setq helm-buffers-fuzzy-matching t)
     (setq helm-locate-fuzzy-match nil)
     (setq helm-M-x-fuzzy-match t)
     (setq helm-semantic-fuzzy-match t)
     (setq helm-imenu-fuzzy-match t)
     (setq helm-apropos-fuzzy-match t)
     (setq helm-lisp-fuzzy-completion t)
     (setq helm-completion-in-region-fuzzy-match t)
   #+END_SRC

** Use enter the current directory (if we are at a directory file) or open the file
*** Remap RET in helm-find-file map
    Inspired by http://emacs.stackexchange.com/questions/3798/how-do-i-make-pressing-ret-in-helm-find-files-open-the-directory
    and https://github.com/emacs-helm/helm/issues/776
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-ff-find-file-or-expand ()
        (interactive)
        (if (and (file-directory-p (helm-get-selection))
                 (< (length (helm-marked-candidates)) 2)
                 ;; Open a directory if we are '.'
                 (not (string= (file-name-nondirectory (helm-get-selection)) ".")))
            (helm-execute-persistent-action)
          (helm-exit-minibuffer)))

      (with-eval-after-load 'helm-files
        (define-key helm-find-files-map (kbd "RET") 'iqbal-helm-ff-find-file-or-expand))
    #+END_SRC

*** TODO Remap RET in helm-read-file-map
    `helm-read-file-name` is used by helm to replace `read-file-name`. The
    following makes it consistent with `helm-find-files`. Unfortunately this
    isn't as simple as adding a keybinding to `helm-read-file-map`, since helm
    adds an `minor-mode-overriding-map-alist` which binds `RET` to
    `helm-confirm-and-exit-minibuffer` which takes precedence over the
    keybindings in `helm-read-file-map`. So we advice the code adding the
    `minor-mode-overriding-map-alist` entry and add our own overriding entry :).

    Ideally the keybinding added by `helm--maybe-update-keymap` should be
    customizable, I should report a bug upstream.

    See also [[help:minor-mode-overriding-map-alist][documentation of minor-mode-overriding-map-alist]]
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-read-file-override-RET (orig &rest args)
        (let* ((results (apply orig args))
               (helm-overriding-map (cdar minor-mode-overriding-map-alist)))
          (when minibuffer-completing-file-name
            (define-key helm-overriding-map (kbd "C-j") #'helm-confirm-and-exit-minibuffer)
            (define-key helm-overriding-map (kbd "RET") 'iqbal-helm-ff-find-file-or-expand))
          helm-overriding-map))

      (advice-add 'helm--maybe-update-keymap :around #'iqbal-helm-read-file-override-RET)
    #+END_SRC

** Use backspace to either delete current character or go up a directory (if looking at a directory)
   Inspired by https://github.com/syl20bnr/spacemacs/pull/1524
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-helm-ff-backward-char-or-updir ()
       (interactive)
       (if (string= (file-name-nondirectory helm-pattern) "")
           (helm-find-files-up-one-level 1)
         (call-interactively #'helm-ff-delete-char-backward)))

     (with-eval-after-load 'helm-files
       (define-key helm-read-file-map (kbd "<backspace>") 'iqbal-helm-ff-backward-char-or-updir)
       (define-key helm-find-files-map (kbd "<backspace>") 'iqbal-helm-ff-backward-char-or-updir))
   #+END_SRC

** Swap C-z and tab
   Stolen from http://tuhdo.github.io/helm-intro.html
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'helm
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "C-z")  'helm-select-action))
   #+END_SRC


* Enable helm
  #+BEGIN_SRC emacs-lisp
    (require 'helm-config)
    (define-key 'iqbal-launcher-map "h" 'helm-command-prefix)
    (add-hook 'after-init-hook #'helm-mode)
  #+END_SRC


* Enable helm-adaptive-mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook #'helm-adaptive-mode)
  #+END_SRC


* Turn on helm-projectile
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'projectile
      (helm-projectile-on)
      (setq projectile-switch-project-action #'helm-projectile))
  #+END_SRC


* Instruct projectile to use helm for completing read
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'projectile
      (setq projectile-completion-system 'helm))
  #+END_SRC


* Add projectile sources to helm-mini
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'helm-projectile
      (setq helm-mini-default-sources '(helm-source-buffers-list
                                        helm-source-projectile-buffers-list
                                        helm-source-projectile-files-list 
                                        helm-source-buffer-not-found
                                        helm-source-recentf)))
  #+END_SRC


* Sources for helm-files
** The default list for `helm-for-files`
   Remove source for buffers and move source for current directory to the top
   #+BEGIN_SRC emacs-lisp
    (setq helm-for-files-preferred-list '(helm-source-files-in-current-dir
                                          helm-source-find-files
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-locate))

    (with-eval-after-load 'helm-projectile
      (setq helm-for-files-preferred-list '(helm-source-files-in-current-dir
                                            helm-source-projectile-files-list 
                                            helm-source-find-files
                                            helm-source-recentf
                                            helm-source-bookmarks
                                            helm-source-locate)))
   #+END_SRC

** Keybinding to toggle helm-locate source in `helm-multi-files` 
   #+BEGIN_SRC emacs-lisp
     (setq helm-multi-files-toggle-locate-binding "C-c C-l")
   #+END_SRC


* Command to open info using helm
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'helm-info
      (setf (cdr (assoc 'requires-pattern helm-source-info-pages)) 0)

      (defun helm-info ()
        (interactive)
        (helm :sources helm-source-info-pages))

      (define-key iqbal-launcher-map "i" 'helm-info))
  #+END_SRC


* Echo input in header line
  Credits: http://www.reddit.com/r/emacs/comments/3asbyn/new_and_very_useful_helm_feature_enter_search/
  #+BEGIN_SRC emacs-lisp
    (when (display-graphic-p)
      (setq helm-echo-input-in-header-line t
            helm-split-window-in-side-p t)
      (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe))
  #+END_SRC


* Helm integration for other modes
** helm-grep configuration
*** Use C-c C-c to save grep results
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-grep-save-results ()
        (interactive)
        (helm-exit-and-execute-action 'helm-grep-save-results))

      (with-eval-after-load 'helm-grep
        (define-key helm-grep-map (kbd "C-c C-c") #'iqbal-helm-grep-save-results))
    #+END_SRC

*** Default to recursive grep
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-grep-recurse-by-default (args)
        (setf (cadr args) (not (cadr args)))
        args)

      (advice-add 'helm-do-grep-1 :filter-args #'iqbal-helm-grep-recurse-by-default)
    #+END_SRC

*** Replace rgrep and zrgrep with helm equivalents
    #+BEGIN_SRC emacs-lisp
      (global-set-key [remap rgrep] #'helm-do-grep)
    #+END_SRC

** helm-occur configuration
*** Use C-c C-c to open a regular occur buffer
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-occur-save-results ()
        (interactive)
        (apply #'helm-run-after-exit
               (if (string= (cdr (assoc 'name (helm-get-current-source))) "occur")
                   `(occur ,helm-pattern)
                 `(multi-occur ,(mapcar #'get-buffer (helm-attr 'moccur-buffers)) ,helm-pattern))))

      (with-eval-after-load 'helm-regexp
        (define-key helm-moccur-map (kbd "C-c C-c") #'iqbal-helm-occur-save-results))
    #+END_SRC

*** Replace occur with helm-occur
    #+BEGIN_SRC emacs-lisp
      (global-set-key [remap occur] #'helm-occur)
      (global-set-key [remap multi-occur] #'helm-multi-occur)
    #+END_SRC

** helm-descbinds configuration
   #+BEGIN_SRC emacs-lisp
     (setq helm-descbinds-window-style 'split-window)
     (helm-descbinds-mode +1)
   #+END_SRC

** Helm kill-ring configuration
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-show-helm-kill-ring-unless-mc-active ()
       (interactive)
       (call-interactively (if (bound-and-true-p multiple-cursors-mode)
                               #'yank-pop
                             #'helm-show-kill-ring)))

     (global-set-key [remap yank-pop] #'iqbal-show-helm-kill-ring-unless-mc-active)
   #+END_SRC

** Use helm to search comint history
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'comint
       (define-key comint-mode-map (kbd "M-r") #'helm-comint-input-ring))
   #+END_SRC

** Helm imenu configuration
*** Keybinding to quickly jump to a symbol in buffer
    #+BEGIN_SRC emacs-lisp
      (global-set-key [remap imenu] 'helm-imenu)
    #+END_SRC

*** Do not directly jump to the definition even if there is just on candidate
    #+BEGIN_SRC emacs-lisp
      (setq helm-imenu-execute-action-at-once-if-one nil)
    #+END_SRC

** Helm company configuration
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "C-<return>") 'helm-company))
   #+END_SRC

** Helm yasnippet integration
   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap yas-insert-snippet] #'helm-yas-complete)
   #+END_SRC

** helm-mu configuration
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'mu4e
       (define-key mu4e-main-mode-map (kbd "/") #'helm-mu)
       (define-key mu4e-headers-mode-map (kbd "/") #'helm-mu)
       (define-key search-map "m" #'helm-mu)
       (define-key search-map "c" #'helm-mu-contacts))
   #+END_SRC

** Integration with emacs bookmarks
   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap bookmark-jump] #'helm-bookmarks)
   #+END_SRC

** Use helm for completing in haskell mode
  #+BEGIN_SRC emacs-lisp
    (setq haskell-completing-read-function #'helm--completing-read-default)
  #+END_SRC

** Enable additional completion in org-store-link
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org
       (require 'org-linkany))
   #+END_SRC

** Do not complete in step while org-refiling
  Otherwise only the top level completions are shown by helm
  #+BEGIN_SRC emacs-lisp
    (setq org-outline-path-complete-in-steps nil)
  #+END_SRC


* Do not restore helm-mode using desktop  
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-minor-mode-table '(helm-mode nil)))
  #+END_SRC


* Global keybindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x b") #'helm-mini)
    (global-set-key [remap locate] #'helm-locate)
    (global-set-key (kbd "C-c o") #'helm-org-agenda-files-headings)
  #+END_SRC
