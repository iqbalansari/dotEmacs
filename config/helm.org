* Install helm packages
  #+begin_src emacs-lisp
    (iqbal-install-packages '(helm helm-descbinds helm-projectile helm-company wgrep-helm))

    (when (executable-find "ag")
      (iqbal-install-package 'helm-ag))
  #+end_src


* Enable fuzzy-match everywhere
  #+begin_src emacs-lisp
    (setq helm-mode-fuzzy-match t)
    (setq helm-recentf-fuzzy-match t)
    (setq helm-buffers-fuzzy-matching t)
    (setq helm-locate-fuzzy-match t)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-semantic-fuzzy-match t)
    (setq helm-imenu-fuzzy-match t)
    (setq helm-apropos-fuzzy-match t)
    (setq helm-lisp-fuzzy-completion t)
    (setq helm-completion-in-region-fuzzy-match t)
  #+end_src


* Enable helm
  #+begin_src emacs-lisp
    (helm-mode +1)
  #+end_src


* Turn on helm-projectile
  #+begin_src emacs-lisp
    (with-eval-after-load 'projectile
      (helm-projectile-on))

    (setq projectile-switch-project-action #'helm-projectile)
  #+end_src


* Add projectile sources to helm-mini
  #+begin_src emacs-lisp
    (with-eval-after-load 'helm-projectile
      (setq helm-mini-default-sources '(helm-source-buffers-list
                                        helm-source-projectile-buffers-list
                                        helm-source-projectile-files-list 
                                        helm-source-buffer-not-found
                                        helm-source-recentf)))
  #+end_src


* helm-descbinds configuration
  #+begin_src emacs-lisp
    (setq helm-descbinds-window-style 'split-window)
    (helm-descbinds-mode +1)
  #+end_src


* Echo input in header line
  Taken from http://www.reddit.com/r/emacs/comments/3asbyn/new_and_very_useful_helm_feature_enter_search/
  #+begin_src emacs-lisp
    (defun helm-hide-minibuffer-maybe ()
      (when helm-echo-input-in-header-line
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                  `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))

    (when (display-graphic-p)
      (setq helm-echo-input-in-header-line t)
      (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe))
  #+end_src


* Do not prompt when creating new file
  #+begin_src emacs-lisp
    (setq helm-ff-newfile-prompt-p nil)
  #+end_src


* Helm company configuration
  #+begin_src emacs-lisp
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-<return>") 'helm-company))
  #+end_src


* Various mode settings
  #+begin_src emacs-lisp
    (setq haskell-completing-read-function #'helm--completing-read-default)
  #+end_src


* Helm kill-ring configuration
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-y") #'helm-show-kill-ring)
  #+end_src


* Sources for helm-files
  Remove source for buffers and move source for current directory to the top
  #+begin_src emacs-lisp
    (setq helm-for-files-preferred-list '(helm-source-files-in-current-dir
                                          helm-source-find-files
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-locate))

    (with-eval-after-load 'helm-projectile
      (setq helm-for-files-preferred-list '(helm-source-files-in-current-dir
                                            helm-source-projectile-files-list 
                                            helm-source-find-files
                                            helm-source-recentf
                                            helm-source-bookmarks
                                            helm-source-locate)))
  #+end_src


* Helm Imenu configuration
** Keybinding to quickly jump to a symbol in buffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c s") 'helm-imenu)
   #+end_src

** Do not directly jump to the definition even if there is just on candidate
   #+begin_src emacs-lisp
     (setq helm-imenu-execute-action-at-once-if-one nil)
   #+end_src


* Keybindings
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x b") #'helm-mini)
    (global-set-key [remap locate] #'helm-locate)
  #+end_src
