* Install helm packages
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-packages '(helm helm-descbinds helm-projectile
                                   helm-swoop helm-company
                                   helm-mu org-linkany
                                   helm-gitignore wgrep-helm
                                   helm-flx helm-fuzzier))

    (when (executable-find "ag")
      (iqbal-install-package 'helm-ag))

    (when (locate-library "yasnippet")
      (iqbal-install-package 'helm-c-yasnippet))
  #+END_SRC


* Make helm more like ido
** Enable fuzzy-match where appropriate
   #+BEGIN_SRC emacs-lisp
     (setq helm-mode-fuzzy-match t)
     (setq helm-recentf-fuzzy-match t)
     (setq helm-buffers-fuzzy-matching t)
     (setq helm-locate-fuzzy-match nil)
     (setq helm-M-x-fuzzy-match t)
     (setq helm-semantic-fuzzy-match t)
     (setq helm-imenu-fuzzy-match t)
     (setq helm-apropos-fuzzy-match t)
     (setq helm-lisp-fuzzy-completion t)
     (setq helm-completion-in-region-fuzzy-match t)
   #+END_SRC

** Use C-j to select current candidate in helm-comp-read-must-match-map
   #+BEGIN_SRC emacs-lisp
     (setq helm-comp-read-must-match-map (make-sparse-keymap))
   #+END_SRC

** Use enter the current directory (if we are at a directory file) or open the file
*** Remap RET in helm-find-file map
    Inspired by http://emacs.stackexchange.com/questions/3798/how-do-i-make-pressing-ret-in-helm-find-files-open-the-directory
    and https://github.com/emacs-helm/helm/issues/776
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-ff-find-file-or-expand ()
        (interactive)
        (if (and (file-directory-p (helm-get-selection))
                 (< (length (helm-marked-candidates)) 2)
                 ;; Open a directory if we are '.'
                 (not (string= (file-name-nondirectory (helm-get-selection)) ".")))
            (helm-execute-persistent-action)
          (helm-exit-minibuffer)))

      (with-eval-after-load 'helm-files
        (define-key helm-find-files-map (kbd "RET") 'iqbal-helm-ff-find-file-or-expand))
    #+END_SRC

*** Remap RET in helm-read-file-map
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'helm-files
        (define-key helm-read-file-map (kbd "RET") 'iqbal-helm-ff-find-file-or-expand))
    #+END_SRC

** Use backspace to either delete current character or go up a directory (if looking at a directory)
   Inspired by https://github.com/syl20bnr/spacemacs/pull/1524
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-helm-ff-backward-char-or-updir ()
       (interactive)
       (if (string= (file-name-nondirectory helm-pattern) "")
           (helm-find-files-up-one-level 1)
         (call-interactively #'helm-ff-delete-char-backward)))

     (with-eval-after-load 'helm-files
       (define-key helm-read-file-map (kbd "<backspace>") 'iqbal-helm-ff-backward-char-or-updir)
       (define-key helm-find-files-map (kbd "<backspace>") 'iqbal-helm-ff-backward-char-or-updir))
   #+END_SRC

** Swap C-z and tab
   Stolen from http://tuhdo.github.io/helm-intro.html
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'helm
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "C-z")  'helm-select-action))
   #+END_SRC


* Helm flx integration
  #+BEGIN_SRC emacs-lisp
    (helm-flx-mode +1)
    ;;(helm-fuzzier-mode +1)
  #+END_SRC


* Enable helm
  #+BEGIN_SRC emacs-lisp
    (require 'helm-config)
    (define-key 'iqbal-launcher-map "h" 'helm-command-prefix)
    (add-hook 'after-init-hook #'helm-mode)
  #+END_SRC


* Enable helm-adaptive-mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook #'helm-adaptive-mode)
  #+END_SRC


* Suppress displaying sources that are not on screen
  #+BEGIN_SRC emacs-lisp
    (setq helm-quick-update t)
  #+END_SRC


* helm-projectile configuration
** Turn on helm-projectile
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'projectile
       (helm-projectile-on)
       (setq projectile-switch-project-action #'helm-projectile))
   #+END_SRC

** Instruct projectile to use helm for completing read
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'projectile
       (setq projectile-completion-system 'helm))
   #+END_SRC

** Add projectile sources to helm-mini
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'helm-projectile
       (setq helm-mini-default-sources '(helm-source-buffers-list
                                         helm-source-ido-virtual-buffers
                                         helm-source-projectile-buffers-list
                                         helm-source-projectile-files-list
                                         helm-source-projectile-projects
                                         helm-source-recentf
                                         helm-source-buffer-not-found
                                         helm-source-locate)))
   #+END_SRC

** Keybinding to switch to helm mini from helm-buffers-list
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-helm-buffers-toggle-helm-mini ()
       (interactive)
       (require 'cl-lib)
       (let ((helm-buffer-list-sources '(helm-source-buffers-list
                                         helm-source-ido-virtual-buffers
                                         helm-source-buffer-not-found)))
         (with-current-buffer (helm-buffer-get)
           (when (string= (buffer-name) "*helm buffers*")
             (if (equal helm-buffer-list-sources helm-sources)
                 (helm-set-sources (cl-remove-if (lambda (source) (member source helm-buffer-list-sources))
                                                 helm-mini-default-sources))
               (helm-set-sources helm-buffer-list-sources))))))

     (with-eval-after-load 'helm
       (define-key helm-map (kbd "C-x C-p") #'iqbal-helm-buffers-toggle-helm-mini)
       (define-key helm-map (kbd "C-x p") #'iqbal-helm-buffers-toggle-helm-mini))
   #+END_SRC


* Sources for helm-files
** The default list for `helm-for-files`
   Remove source for buffers and move source for current directory to the top
   #+BEGIN_SRC emacs-lisp
    (setq helm-for-files-preferred-list '(helm-source-files-in-current-dir
                                          helm-source-find-files
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-locate))

    (with-eval-after-load 'helm-projectile
      (setq helm-for-files-preferred-list '(helm-source-files-in-current-dir
                                            helm-source-projectile-files-list 
                                            helm-source-find-files
                                            helm-source-recentf
                                            helm-source-bookmarks
                                            helm-source-locate)))
   #+END_SRC

** Keybinding to toggle helm-locate source in `helm-multi-files` 
   #+BEGIN_SRC emacs-lisp
     (setq helm-multi-files-toggle-locate-binding "C-x C-p")
   #+END_SRC


* Command to open info using helm
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'helm-info
      (setf (cdr (assoc 'requires-pattern helm-source-info-pages)) 0)

      (defun helm-info ()
        (interactive)
        (helm :sources helm-source-info-pages))

      (define-key iqbal-launcher-map "i" 'helm-info))
  #+END_SRC


* Echo input in header line
  Credits: http://www.reddit.com/r/emacs/comments/3asbyn/new_and_very_useful_helm_feature_enter_search/
  #+BEGIN_SRC emacs-lisp
    (when (display-graphic-p)
      (setq helm-echo-input-in-header-line t)
      (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe))
  #+END_SRC


* Display helm inside current window unless it is too small
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-helm-show-inside-window-if-large-enough (orig &rest args)
      (let ((helm-split-window-in-side-p (> (window-height) 20)))
        (apply orig args)))

    (advice-add 'helm :around #'iqbal-helm-show-inside-window-if-large-enough)
  #+END_SRC


* Helm integration for other modes
** helm-grep configuration
*** Use C-c C-c to save grep results
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-grep-save-results ()
        (interactive)
        (require 'subr-x)
        (let* ((patterns (split-string (with-current-buffer "*helm grep*"
                                         helm-grep-include-files)))
               (quoted-extensions (mapcar (lambda (pattern)
                                            (car (last (split-string pattern "="))))
                                          patterns))
               (extensions  (mapcar (lambda (extension)
                                      ;; TODO: Poor man's shell unquoting
                                      (replace-regexp-in-string "\\\\" "" extension))
                                    quoted-extensions)))
          (grep-compute-defaults)
          (helm-run-after-exit 'rgrep
                               helm-pattern
                               (string-join extensions " ")
                               helm-ff-default-directory)))

      (with-eval-after-load 'helm-grep
        (define-key helm-grep-map (kbd "C-c C-c") #'iqbal-helm-grep-save-results))
    #+END_SRC

*** Default to recursive grep
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'helm-grep
        '(setq helm-grep-default-command helm-grep-default-recurse-command))
    #+END_SRC

*** Replace rgrep helm equivalents
    #+BEGIN_SRC emacs-lisp
      (defun helm-do-grep ()
        "Copied from older helm (https://github.com/emacs-helm/helm/blob/4d4b9d63c5fbe33fe472cf75ac83167d8d82c8e5/helm-grep.el)

      The latest versions do not come with it."
        (interactive)
        (require 'helm-mode)
        (let* ((only (helm-read-file-name
                      "Search in file(s): "
                      :marked-candidates t))
               (prefarg (or current-prefix-arg helm-current-prefix-arg)))
          (helm-do-grep-1 only prefarg)))

      (global-set-key [remap rgrep] #'helm-do-grep)
    #+END_SRC

** helm-occur configuration
*** Use C-c C-c to open a regular occur buffer
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-occur-save-results ()
        (interactive)
        (apply #'helm-run-after-exit
               (if (string= (cdr (assoc 'name (helm-get-current-source))) "occur")
                   `(occur ,helm-pattern)
                 `(multi-occur ,(mapcar #'get-buffer (helm-attr 'moccur-buffers)) ,helm-pattern))))

      (with-eval-after-load 'helm-regexp
        (define-key helm-moccur-map (kbd "C-c C-c") #'iqbal-helm-occur-save-results))
    #+END_SRC

*** Replace occur with helm-occur
    #+BEGIN_SRC emacs-lisp
      (global-set-key [remap occur] #'helm-occur)
      (global-set-key [remap multi-occur] #'helm-multi-occur)
    #+END_SRC
** helm-ag
*** Use C-c C-c to save ag results
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-ag-save-results ()
        (interactive)
        (if (fboundp 'ag-regexp)
            (helm-run-after-exit #'ag-regexp helm-pattern helm-ag--default-directory)
          (helm-exit-and-execute-action 'helm-ag--action-save-buffer)))

      (with-eval-after-load 'helm-ag
        (define-key helm-ag-map (kbd "C-c C-c") #'iqbal-helm-ag-save-results))
    #+END_SRC
*** Replace ag with helm-do-ag
    #+BEGIN_SRC emacs-lisp
      (global-set-key [remap ag] #'helm-do-ag)
      (global-set-key [remap ag-project] #'helm-projectile-ag)
    #+END_SRC

*** Use thing at point while searching
    #+BEGIN_SRC emacs-lisp
      (setq helm-ag-insert-at-point 'symbol)
    #+END_SRC

** helm-swoop configuration
   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap swoop] #'helm-swoop)
     (global-set-key [remap swoop-multi] #'helm-multi-swoop)
   #+END_SRC

** helm-descbinds configuration
   #+BEGIN_SRC emacs-lisp
     (setq helm-descbinds-window-style 'split-window)
     (helm-descbinds-mode +1)
   #+END_SRC

** Helm kill-ring configuration
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-show-helm-kill-ring-unless-mc-active ()
       (interactive)
       (call-interactively (if (bound-and-true-p multiple-cursors-mode)
                               #'yank-pop
                             #'helm-show-kill-ring)))

     (global-set-key [remap yank-pop] #'iqbal-show-helm-kill-ring-unless-mc-active)
   #+END_SRC

** Use helm to search comint history
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'comint
       (define-key comint-mode-map (kbd "M-r") #'helm-comint-input-ring))
   #+END_SRC

** Helm imenu configuration
*** Keybinding to quickly jump to a symbol in buffer
    #+BEGIN_SRC emacs-lisp
      (global-set-key [remap imenu] 'helm-imenu)
    #+END_SRC

*** Do not directly jump to the definition even if there is just on candidate
    #+BEGIN_SRC emacs-lisp
      (setq helm-imenu-execute-action-at-once-if-one nil)
    #+END_SRC

** Helm company configuration
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "C-\\") 'helm-company))
   #+END_SRC

** Helm yasnippet integration
   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap yas-insert-snippet] #'helm-yas-complete)
   #+END_SRC

** helm-M-x configuration
*** Save command history even on errors
    #+BEGIN_SRC emacs-lisp
      (setq helm-M-x-always-save-history t)
    #+END_SRC

** helm-mu configuration
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'mu4e
       (define-key mu4e-main-mode-map (kbd "/") #'helm-mu)
       (define-key mu4e-headers-mode-map (kbd "/") #'helm-mu)
       (define-key search-map "m" #'helm-mu)
       (define-key search-map "c" #'helm-mu-contacts))
   #+END_SRC

** Integration with emacs bookmarks
   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap bookmark-jump] #'helm-bookmarks)
   #+END_SRC

** Use helm for completing in haskell mode
  #+BEGIN_SRC emacs-lisp
    (setq haskell-completing-read-function #'helm--completing-read-default)
  #+END_SRC

** Rebind apropos to helm-apropos
   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap apropos] #'helm-apropos)
   #+END_SRC

** org-mode integration
*** Enable additional completion in org-store-link
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'org
        (require 'org-linkany))
    #+END_SRC

*** Use `helm-org-in-buffer-headings` instead of imenu in org-mode
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'org
        (org-defkey org-mode-map [remap imenu] #'helm-org-in-buffer-headings))
    #+END_SRC

*** Add action to clock in directly from helm-org session
    CREDITS: https://github.com/dfeich/org-clock-convenience#tip-using-helm-for-efficient-clocking-into-tasks
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-helm-org-clock-in (marker)
        "Clock into the item at MARKER"
        (with-current-buffer (marker-buffer marker)
          (goto-char (marker-position marker))
          (org-clock-in)))

      (with-eval-after-load 'helm-org
        (nconc helm-org-headings-actions
               (list (cons "Clock into task" #'iqbal-helm-org-clock-in))))
    #+END_SRC

** Do not complete in step while org-refiling
  Otherwise only the top level completions are shown by helm
  #+BEGIN_SRC emacs-lisp
    (setq org-outline-path-complete-in-steps nil)
  #+END_SRC


* Global keybindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x b") #'helm-buffers-list)
    (global-set-key (kbd "C-x p") #'helm-mini)
    (global-set-key [remap locate] #'helm-locate)
    (global-set-key (kbd "C-c o") #'helm-org-agenda-files-headings)
    (global-set-key (kbd "C-c m") #'helm-all-mark-rings)
  #+END_SRC
