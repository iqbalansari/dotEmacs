* Ensure that autocomplete packages are installed
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-auto-complete-packages
      '(company company-quickhelp auto-complete pos-tip))

    (iqbal-install-packages iqbal-auto-complete-packages)
  #+END_SRC


* Auto-complete configurations
** How sensitive is autocompletion
   #+BEGIN_SRC emacs-lisp
     (setq ac-auto-start 3)
     (setq ac-auto-show-menu 0.5)
   #+END_SRC

** Enable fuzzy completion
   #+BEGIN_SRC emacs-lisp
     (setq ac-use-fuzzy t)
   #+END_SRC

** Enable menu mode-map when autocomplete menu is displayed
   #+BEGIN_SRC emacs-lisp
     (setq ac-use-menu-map t)
   #+END_SRC

** Display completion correctly
   #+BEGIN_SRC emacs-lisp
     (setq popup-use-optimized-column-computation nil)
   #+END_SRC

** Use auto-complete with flyspell
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'auto-complete
       (define-key ac-menu-map [backtab] 'ac-previous)
       (ac-flyspell-workaround))
   #+END_SRC

** To get pop-ups with docs even if a word is uniquely completed from Steve Purcell's config
   #+BEGIN_SRC emacs-lisp
     (setq-default ac-dwim nil)
   #+END_SRC

** Maximum width of auto-complete menu
   #+BEGIN_SRC emacs-lisp
     (setq ac-max-width 0.5)
   #+END_SRC

** Try to complete, if line already indented on hitting tab
   #+BEGIN_SRC emacs-lisp
     (setq tab-always-indent 'complete)
   #+END_SRC

** Do not use pos-tip
   #+BEGIN_SRC emacs-lisp
     (setq ac-quick-help-prefer-pos-tip nil)
   #+END_SRC


* Use M-/ for hippie-expand
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-/") 'hippie-expand)

    (setq hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-expand-all-abbrevs
            try-expand-list
            try-expand-line))
  #+END_SRC


* Configuration for using tab for autocompletion taken from [[https://github.com/purcell/emacs.d][Steve Purcell's config]]
  Trigger autocompletion using <tab>
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-auto-complete-at-point ()
      (when (and (not (minibufferp))
                 auto-complete-mode
                 (looking-back "\\(\\sw\\|\\s_\\)")
                 (not (looking-at "\\sw\\|\\s_")))
        (auto-complete)))

    (defun set-auto-complete-as-completion-at-point-function ()
      (setq completion-at-point-functions
            (cons 'iqbal-auto-complete-at-point
                  (remove 'iqbal-auto-complete-at-point completion-at-point-functions))))

    (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
  #+END_SRC


* Company mode configuration
** Align annotations
   #+BEGIN_SRC emacs-lisp
     (setq company-tooltip-align-annotations t)
   #+END_SRC

** Wrap around popup menu on reaching end
  #+BEGIN_SRC emacs-lisp
    (setq company-selection-wrap-around t)
  #+END_SRC

** Allow non-matching input when company-mode is active
   #+BEGIN_SRC emacs-lisp
     (setq company-require-match nil)
   #+END_SRC

** Complete if only preview is being displayed
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-complete-if-just-one-candidate ()
       (interactive)
       ;; This might fail sometimes since, it checks whether
       ;; inline preview CAN be displayed rather than whether it
       ;; IS displayed
       (call-interactively (if (company--show-inline-p)
                               'company-complete-selection
                             'company-abort)))
   #+END_SRC

** Keybindings
   Remap company-complete-common to company-complete-common-or-cycle
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (define-key company-active-map [remap company-complete-common] #'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "<backtab>") #'company-select-previous)
       (define-key company-active-map (kbd "C-e") #'iqbal-complete-if-just-one-candidate)
       (define-key company-active-map (kbd "C-f") #'iqbal-complete-if-just-one-candidate)
       (define-key company-active-map (kbd "<right>") #'iqbal-complete-if-just-one-candidate)
       (define-key company-active-map (kbd "C-n") #'company-select-next)
       (define-key company-active-map (kbd "C-p") #'company-select-previous))
   #+END_SRC


* Enable company-mode globally
  #+BEGIN_SRC emacs-lisp
    (setq company-global-modes '(not erlang-mode python-mode))
    (setq iqbal-default-company-backends '(company-capf company-dabbrev company-files))
    (setq-default company-backends iqbal-default-company-backends)
    (make-variable-buffer-local 'company-backends)
    (global-company-mode)
  #+END_SRC


* Enable quick help for company-mode
  #+BEGIN_SRC emacs-lisp
    (when (display-graphic-p)
      (company-quickhelp-mode +1))
  #+END_SRC


* Enable company-ispell in all text/fundamental mode buffers
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-text-mode-enable-completion ()
      (setq company-backends '(company-capf company-ispell company-dabbrev)))

    (add-hook 'text-mode-hook #'iqbal-text-mode-enable-completion)
    (add-hook 'fundamental-mode #'iqbal-text-mode-enable-completion)
  #+END_SRC
