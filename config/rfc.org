* Autoload irfc entry points
  #+BEGIN_SRC emacs-lisp
    (autoload 'irfc-mode "irfc" "Major mode for IETF RFC documents." t nil)

    (autoload 'irfc-follow "irfc" "Open RFC document around point.
    Download and open RFC document if it does not exist in `irfc-directory'." t nil)

    (autoload 'irfc-visit "irfc" "Open RFC document RFC-NUMBER.
    Download and open RFC document if it does not exist in `irfc-directory'." t nil)
  #+END_SRC


* Location of RFC files
  #+BEGIN_SRC emacs-lisp
    (setq irfc-directory (iqbal-get-file-in-data-directory "RFCs" t))
  #+END_SRC


* Integration with org-mode
** Helper functions to get info about currently viewed RFC
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-irfc-get-title ()
      (save-excursion
        (goto-char (irfc-render-buffer-hide-blank-line (or (irfc-render-buffer-hide-whitespace-at-start)
                                                           (point-min))))
        (when (re-search-forward (concat
                                  "\\([^ \t\f\r\n].*[^ \t\f\r\n]\\)"
                                  "\\(\r?\n[ \t]*[^ \t\f\r\n].*[^ \t\f\r\n]\\)*"))
          (replace-regexp-in-string "[\r\n\t\f ]+" " " (match-string 0)))))

    (defun iqbal-irfc-get-number ()
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward "^\\(request for comments\\|updates\\|obsoletes\\):\\( RFCs\\)?[ \t]+\\(\\([0-9X]+\\)\\(,[ \t]+[0-9]+\\)*\\)"
                                 (save-excursion
                                   (irfc-render-buffer-hide-blank-line (or (irfc-render-buffer-hide-whitespace-at-start)
                                                                           (point-min))))
                                 t)
          (buffer-substring (match-beginning 3) (match-end 3)))))
  #+END_SRC

** Function to store an org link to given RFC
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-store-irfc-link ()
       (when (eq major-mode 'irfc-mode)
         (let ((rfc-number (iqbal-irfc-get-number))
               (rfc-title (iqbal-irfc-get-title)))
           (org-store-link-props :type "rfc"
                                 :link (concat "rfc:" rfc-number)
                                 :description rfc-title
                                 :rfcnumber rfc-number)
           rfc-number)))
   #+END_SRC

** Function to export irfc links
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-irfc-export (rfc-number desc format)
       "Export a irfc link from Org files."
       (let* ((web-link (format "https://tools.ietf.org/html/rfc%s" rfc-number))
              (desc (or desc web-link)))
         (cond
          ((eq format 'html) (format "<a href=\"%s\">%s</a>" web-link desc))
          ((eq format 'latex) (format "\href{%s}{%s}" web-link desc))
          ((eq format 'ascii) (format "%s (%s)" desc web-link))
          ((eq format 'md) (format "[%s](%s)" desc web-link))
          (t web-link))))
   #+END_SRC

** Function to open org RFC link
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-open-rfc-file (path)
      (irfc-visit (string-to-number path)))
  #+END_SRC

** Hook the above to org-mode
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-open-rfc-file (path)
       (irfc-visit (string-to-number path)))

     (with-eval-after-load 'org
       (org-add-link-type "rfc" #'iqbal-open-rfc-file #'iqbal-irfc-export))

     (add-hook 'org-store-link-functions 'iqbal-store-irfc-link)
   #+END_SRC
