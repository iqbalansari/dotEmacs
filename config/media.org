* Install bongo
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-packages '(bongo volume org-player))
  #+END_SRC


* Prefer playlist buffers
  #+BEGIN_SRC emacs-lisp
    (setq bongo-prefer-library-buffers nil)
  #+END_SRC


* Custom backend matchers
  #+BEGIN_SRC emacs-lisp
    (setq bongo-custom-backend-matchers '((vlc . ("https:" . t)) (vlc . (local-file . ("webm")))))
  #+END_SRC


* Other minor configurations
** Do not display bongo logo
  #+BEGIN_SRC emacs-lisp
    (setq bongo-logo nil)
  #+END_SRC

** Update references to renamed files without asking
   #+BEGIN_SRC emacs-lisp
     (setq bongo-update-references-to-renamed-files t)
   #+END_SRC

** Insert intermediate headers
   #+BEGIN_SRC emacs-lisp
     (setq bongo-insert-intermediate-headers t)
   #+END_SRC

** Insert directories without asking
   #+BEGIN_SRC emacs-lisp
     (setq bongo-insert-whole-directory-trees t)
   #+END_SRC


* Setup auto-mode-alist entries
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist
                 '("\\.bongo-library$" . bongo-library-mode))
    (add-to-list 'auto-mode-alist
                 '("\\.bongo-playlist$" . bongo-playlist-mode))

    (autoload 'bongo-library-mode "bongo" "bongo library mode" t)
    (autoload 'bongo-playlist-mode "bongo" "bongo playlist mode" t)
    (autoload 'bongo-dired-library-mode "bongo" "bongo dired library mode" t)
  #+END_SRC


* Add elfeed enclosures to bongo library
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-add-enclosure-to-bongo (elfeed-entry bongo-buffer)
      (let* ((enclosures (elfeed-entry-enclosures elfeed-entry))
             (enclosure (when enclosures (car enclosures))))
        (if (and enclosure
                 (or (string-prefix-p "audio" (cadr enclosure))
                     (string-prefix-p "video" (cadr enclosure))))
            (with-current-buffer bongo-buffer
              (message "Resolving redirects in enclosure url ... ")
              (let ((url (or (iqbal-resolve-redirects (car enclosure))
                             (and (y-or-n-p "Could not resolve redirects use the original url?")
                                  url))))
                (if url
                    (progn (bongo-insert-uri url (elfeed-entry-title elfeed-entry))
                           (message "Enclosure added to bongo library"))
                  (user-error "Could not add enclosure to bongo library!"))))
          (user-error "No playable enclousures found in current feed!"))))

    (defun iqbal-elfeed-show-add-enclosure-to-bongo ()
      (interactive)
      (when (eq major-mode 'elfeed-show-mode)
        (iqbal-add-enclosure-to-bongo elfeed-show-entry
                                      (find-file-noselect (iqbal-get-file-in-data-directory "podcasts.bongo-library")))))

    (with-eval-after-load 'elfeed-show
      (define-key elfeed-show-mode-map (kbd "M") #'iqbal-elfeed-show-add-enclosure-to-bongo))
  #+END_SRC


* Enqueuing tracks from arbitrary dired buffers
** Helper functions to enqueue files from dired 
*** Autoload required function
    #+BEGIN_SRC emacs-lisp
      (autoload 'bongo-dired-enqueue-lines "bongo")
    #+END_SRC

*** Enqueuing files from dired marks
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (require 'dired))
      
     (defun iqbal-bongo-dired-enqueue-files-from-marks-or-point (mode)
       (dired-map-over-marks (bongo-dired-enqueue-lines mode 0 t) nil))
    #+END_SRC

*** Enqueuing files from region 
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-bongo-dired-enqueue-files-from-region (mode)
        (let ((start (region-beginning))
              (end (region-end)))
          (save-excursion
            (goto-char start)
            (while (< (point) end)
              (bongo-dired-enqueue-lines mode 0 t)
              (forward-line +1)))))
   #+END_SRC

*** Tying them together
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-bongo-dired-enqueue (mode)
        (if (region-active-p)
            (iqbal-bongo-dired-enqueue-files-from-region mode)
          (iqbal-bongo-dired-enqueue-files-from-marks-or-point mode)))

      (defun iqbal-bongo-dired-append-enqueue-lines ()
        (interactive)
        (iqbal-bongo-dired-enqueue 'append))

      (defun iqbal-bongo-dired-insert-enqueue-lines ()
        (interactive)
        (iqbal-bongo-dired-enqueue 'insert))
    #+END_SRC

** Keybindings
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'dired
       (define-key dired-mode-map "e" 'iqbal-bongo-dired-append-enqueue-lines)
       (define-key dired-mode-map "E" 'iqbal-bongo-dired-insert-enqueue-lines))

     (with-eval-after-load 'bongo
       (define-key bongo-dired-library-mode-map "e" 'iqbal-bongo-dired-append-enqueue-lines)
       (define-key bongo-dired-library-mode-map "E" 'iqbal-bongo-dired-insert-enqueue-lines))
   #+END_SRC


* Follow marked tracks (if available) in random playback mode
  Stolen from [[http://www.emacswiki.org/emacs/BongoHacks#toc5]]
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-play-only-marked-tracks (orig-func &optional point)
      (let ((play-this-track-p (funcall orig-func point)))
        (and play-this-track-p
             (or (null bongo-marking)
                 (bongo-marked-track-line-p point)))))

    (with-eval-after-load 'bongo
        (advice-add 'bongo-randomly-playable-track-line-p :around #'iqbal-play-only-marked-tracks))
  #+END_SRC


* Integration with org-mode
** Storing link to currently playing media in bongo
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-seconds-as-minutes (seconds)
      (format "%02d:%02d"(/ seconds 60)
              (mod seconds 60)))

    (defun iqbal-get-player-state-org-description (player &optional elapsed-time stop-time)
      (require 'subr-x)
      (let* ((description (or (ignore-errors (cdr (assoc 'title
                                                         (assoc 'track (bongo-player-infoset player)))))
                              (file-name-base (bongo-player-file-name player))))
             (time-string (when elapsed-time
                            (concat (format " - %s" (iqbal-seconds-as-minutes elapsed-time))
                                    (when stop-time
                                      (format " to %s" (iqbal-seconds-as-minutes stop-time)))))))
        (concat (string-trim description) time-string)))


    (defun iqbal-store-bongo-link ()
      (save-window-excursion
        (when (bongo-buffer-p)
          (when (bongo-library-buffer-p)
            (bongo-switch-buffers))
          (when bongo-player
            (let* ((start-time (bongo-player-elapsed-time bongo-player))
                   (file-name (bongo-player-file-name bongo-player))
                   (description (iqbal-get-player-state-org-description bongo-player start-time))
                   (link (concat "bongo:"
                                 (url-hexify-string file-name)
                                 (when start-time
                                   (concat (format "::%d" start-time))))))
              (org-store-link-props :type "bongo"
                                    :link link
                                    :description description))))))

    (add-hook 'org-store-link-functions 'iqbal-store-bongo-link)
  #+END_SRC

** Opening links to media in bongo
   #+BEGIN_SRC emacs-lisp
     (defvar iqbal-bongo-playlist-file (make-temp-file "playlist" nil ".bongo-playlist")
       "Temporary bongo playlist to be used for playing bongo links")

     (defun iqbal-get-file-name-and-time (link)
       (if (string-match-p ".*::[0-9]+\\(-[0-9]+\\)?$" link)
           (let* ((components (split-string link "::"))
                  (path (url-unhex-string (car components)))
                  (time (mapcar #'string-to-int (split-string (cadr components) "-"))))
             (cons path time))
         (cons (url-unhex-string link) nil)))

     (defun iqbal-compute-bongo-vlc-options (time)
       (if (not time)
           bongo-vlc-extra-arguments
         (append bongo-vlc-extra-arguments
                 (list "--start-time" (int-to-string (car time)))
                 (when (cdr time)
                   (list "--stop-time" (int-to-string (cadr time)))))))

     (defun iqbal-open-bongo-link (link)
       (let* ((bongo-playlist-buffer (find-file-noselect iqbal-bongo-playlist-file))
              (parsed-link (iqbal-get-file-name-and-time link))
              (path (car parsed-link))
              (time (cdr parsed-link))
              ;; If vlc is available force bongo to use it
              (bongo-enabled-backends (if (member 'vlc bongo-enabled-backends)
                                          '(vlc)
                                        bongo-enabled-backends))
              (bongo-vlc-extra-arguments (iqbal-compute-bongo-vlc-options time)))
         (with-current-buffer bongo-playlist-buffer
           ;; Do not play any track after this
           (bongo-start/stop-playback-mode)
           (bongo-insert-file path)
           (forward-line -1)
           (bongo-play-line)
           (when (and time (not (eq (car bongo-player) 'vlc)))
             (bongo-seek-to (car time))))))

     (with-eval-after-load 'org
       (org-add-link-type "bongo" #'iqbal-open-bongo-link))
   #+END_SRC


* Keybindings
** Keybinding to start bongo
  #+BEGIN_SRC emacs-lisp
    (define-key iqbal-launcher-map "b" #'bongo)
  #+END_SRC

** Keybinding to change volume
   #+BEGIN_SRC emacs-lisp
     (define-key iqbal-launcher-map "v" #'volume)
   #+END_SRC

** Keybinding to quit bongo
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'bongo
       (define-key bongo-mode-map iqbal-hide-app #'bongo-quit))
   #+END_SRC

** Keybindings for bongo-dired-library-mode
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'bongo
       (define-key bongo-dired-library-mode-map (kbd "C-c C-e") nil))
   #+END_SRC
