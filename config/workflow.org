* Install some useful packages
  #+BEGIN_SRC emacs-lisp
    (iqbal-install-packages '(org-journal org-dashboard org-pomodoro orgbox orgit calfw async))
  #+END_SRC


* Directory for storing notes
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-notes-dir (iqbal-get-file-in-notes-directory "notes" t))
  #+END_SRC


* List of tags with shorter keys for set them
  #+BEGIN_SRC emacs-lisp
    (setq org-tag-alist '((:startgroup)
                          ("work" . ?W)
                          ("personal" . ?P)
                          ("javascript" . ?j)
                          ("python" . ?p)
                          ("emacs" . ?e)
                          ("org" . ?o)
                          (:endgroup)
                          (:startgroup)
                          ("drill" . ?D)
                          (:endgroup)
                          ("crypt" . ?E)))
  #+END_SRC


* Custom TODO keywords and priority levels
  Copied from [[http://doc.norang.ca/org-mode.html#TodoKeywords]]
** Define some extra keywords
  #+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "STARTED(s!)" "IN PROCESS(p@)"  "DONE(d@/!)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "CANCELLED(c@/!)")
                  (sequence "UNREAD(u!)" "READING(r!)" "READ(f@/!)"))))
  #+END_SRC

** Colors for TODO keywords
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keyword-faces
           (quote (("TODO" :foreground "red" :weight bold)
                   ("NEXT" :foreground "blue" :weight bold)
                   ("DONE" :foreground "forest green" :weight bold)
                   ("WAITING" :foreground "orange" :weight bold)
                   ("HOLD" :foreground "magenta" :weight bold)
                   ("CANCELLED" :foreground "forest green" :weight bold)
                   ("UNREAD" :foreground "red" :weight bold)
                   ("READING" :foreground "blue" :weight bold)
                   ("READ" :foreground "forest green" :weight bold))))
   #+END_SRC

** Custom task priorities
   #+BEGIN_SRC emacs-lisp
     (setq org-default-priority ?E)
     (setq org-lowest-priority ?E)
   #+END_SRC


* Automatically mark a task as DONE, when all checkboxes are checked
  Credits: [[http://orgmode.org/worg/org-hacks.html]]
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'org-list
      (add-hook 'org-checkbox-statistics-hook #'iqbal-checkbox-list-complete))

    (defun iqbal-checkbox-list-complete ()
      (save-excursion
        (when (ignore-errors (org-back-to-heading t))
          (let ((beg (point))
                (current-state (org-get-todo-state))
                end)
            (end-of-line)
            (setq end (point))
            (goto-char beg)
            (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
                (if (match-end 1)
                    (if (equal (match-string 1) "100%")
                        ;; all done - do the state change
                        (org-todo 'done)
                      (when (and current-state
                                 (string= current-state "DONE"))
                        (org-todo 'todo)))
                  (if (and (> (match-end 2) (match-beginning 2))
                           (equal (match-string 2) (match-string 3)))
                      (org-todo 'done)
                    (when (and current-state
                               (string= current-state "DONE"))
                      (org-todo 'todo)))))))))
  #+END_SRC


* Org refile configuration
** Allow creating parent nodes while refiling
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-allow-creating-parent-nodes 'confirm)
   #+END_SRC

** Allow refiling to agenda files and org files in current directory
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-get-project-org-files ()
       (require 'cl-lib)
       (when (and (featurep 'projectile)
                  (ignore-errors (projectile-project-root)))
         (let ((project-root (projectile-project-root)))
           (when (mapcar (lambda (file) (expand-file-name file project-root))
                         (cl-remove-if-not (lambda (file) (string-suffix-p ".org" file))
                                           (projectile-current-project-files)))))))

     (defun iqbal-get-refile-targets ()
       (require 'cl-lib)
       (let ((files (cl-delete-duplicates (mapcar #'file-truename
                                                  ;; Files in current directory
                                                  (append (directory-files default-directory t "\\.org$")
                                                          ;; Files in the current project
                                                          (iqbal-get-project-org-files)
                                                          ;; and agenda files
                                                          (org-agenda-files)
                                                          (when (bound-and-true-p iqbal-notes-dir)
                                                            (list iqbal-notes-dir))))
                                          :test #'string=))
             (current-file (when buffer-file-name (file-truename buffer-file-name))))
         ;; Make sure current file is first
         (if current-file
             (cons current-file (delq current-file files))
           files)))

     (setq org-refile-targets (list (cons 'iqbal-get-refile-targets '(:maxlevel . 3))))
   #+END_SRC

** Use outline path while refiling
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-use-outline-path 'file)
   #+END_SRC


* Command to call org-capture in a separate frame
  Useful for invoking org-capture from a window manager
  like xmonad using emacsclient
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-org-capture-delete-frame (&rest ignored)
      (when (equal "*Org Capture*" (frame-parameter nil 'name))
        (delete-frame)))

    (advice-add #'org-capture-finalize :after #'iqbal-org-capture-delete-frame)

    (defun make-capture-frame ()
      "Create a new frame and run org-capture. Useful for calling from
    an external program, using emacsclient eg. xmonad
    Credits: Alexander Vorobiev
    http://lists.gnu.org/archive/html/emacs-orgmode/2013-10/msg00150.html and        http://www.glassberg-powell.com/blog/20140709/emacs-org-mode-capture-anywhere"
      (interactive)
      (require 'cl-lib)
      ;; Instruct desktop to not save org capture frame
      (make-frame '((name . "*Org Capture*") (desktop-dont-save . t)))
      (select-frame-by-name "*Org Capture*")
      (delete-other-windows)
      (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
        ;; Handle any error so that subsequent frame cleanup code
        ;; gets a chance to run
        (condition-case err
            (org-capture)
          (error (message (format "Caught exception: [%s]" err))
                 (when (equal "*Org Capture*" (frame-parameter nil 'name))
                   ;; Delete the frame even if the user cancelled or there
                   ;; was some error, TODO: this can be potentially confusing
                   ;; if there is some bug in the configuration which cause
                   ;; the capture to fail and the frame disappears with out
                   ;; proper error message (messages would still be there
                   ;; in messages buffer tough)
                   (delete-frame)
                   ;; Otherwise main frame keeps listening for
                   ;; input
                   (keyboard-quit))))))
  #+END_SRC


* Command to toggle org-dashboard
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-toggle-org-dashboard ()
      (interactive)
      (let ((dashboard-window (get-buffer-window "*Org Dashboard*")))
        (if dashboard-window
            (delete-window dashboard-window)
          (call-interactively #'org-dashboard-display))))
  #+END_SRC


* Directory for org-journal
  #+BEGIN_SRC emacs-lisp
    (setq org-journal-dir (iqbal-get-file-in-data-directory "journal/" t))
  #+END_SRC


* Configurations for emacs diary
** Store diary file in org folder
  #+BEGIN_SRC emacs-lisp
    (setq diary-file (iqbal-get-file-in-data-directory "diary"))
  #+END_SRC

** Let diary entries be included in agenda buffer
  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-include-diary t)
  #+END_SRC


* Enable notifications for appointments
** Do not show diary on initial appt setup
   #+BEGIN_SRC emacs-lisp
     (setq appt-display-diary nil)
   #+END_SRC

** Warn 15 min in advance
  #+BEGIN_SRC emacs-lisp
    (setq appt-message-warning-time 15)
  #+END_SRC

** Show remaining time in the modeline
   #+BEGIN_SRC emacs-lisp
     (setq appt-display-mode-line t)
   #+END_SRC

** Show notification in a separate window
   #+BEGIN_SRC emacs-lisp
     (setq appt-display-format 'window)
   #+END_SRC

** Enable appt and activate appointments found in org-agenda files
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-appt-activate ()
       "(Re)initialize appt, also add agenda items to appt"
       (interactive)
       (setq appt-time-msg-list nil)
       (appt-activate +1)
       (org-agenda-to-appt))

     (add-hook 'after-init-hook #'iqbal-appt-activate)
   #+END_SRC

** Reinitialize appt on finishing capture and displaying agenda
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-capture-after-finalize-hook #'iqbal-appt-activate)
     (add-hook 'org-agenda-finalize-hook #'iqbal-appt-activate)
   #+END_SRC

** Refresh appt at midnights
   #+BEGIN_SRC emacs-lisp
     (run-at-time "24:01" nil #'iqbal-appt-activate)
   #+END_SRC


* Configurations for org-agenda
** Enable org-habits
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org-agenda
       (require 'org-habit))
   #+END_SRC
** Do not display symbols in org-habit process
   #+begin_src emacs-lisp
     (setq org-habit-today-glyph 32
           org-habit-completed-glyph 32)
   #+end_src
** Directory for agenda files
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-org-agenda-dir (iqbal-get-file-in-notes-directory "agenda" t))
  #+END_SRC

** Path to default org-captured file
  #+BEGIN_SRC emacs-lisp
    (setq org-default-notes-file (expand-file-name "captured.org" iqbal-org-agenda-dir))
  #+END_SRC

** Any files in org folder will be added to agenda files
 #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files (list iqbal-org-agenda-dir (iqbal-get-file-in-notes-directory "projects" t)))
 #+END_SRC

** Add a note when task is marked as DONE
  #+BEGIN_SRC emacs-lisp
    (setq org-log-done 'note)
  #+END_SRC

** `q` should bury agenda rather then killing it
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-sticky t)
   #+END_SRC

** Ignore scheduled items or deadlines if they have been marked 'DONE'
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-skip-scheduled-if-done t)
   #+END_SRC

** Do not display tasks from past in org-agenda
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-start-on-weekday nil)
   #+END_SRC

** Use date at point when capturing from agenda
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-use-agenda-date t)
   #+END_SRC

** Do not show entries with timestamp in agenda
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org-agenda
       (setq org-agenda-entry-types '(:deadline :scheduled :sexp)))
   #+END_SRC

** Customizations for org-agenda-current-time
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org-faces
       (set-face-attribute 'org-agenda-current-time nil :foreground "green"))

     (when (char-displayable-p ?─)
       (setq org-agenda-current-time-string (concat (make-string 23 ?─) "> now <" (make-string 23 ?─))))
   #+END_SRC


* org-id configuration
** Location of file remembering id locations
   #+BEGIN_SRC emacs-lisp
     (setq org-id-locations-file (iqbal-get-file-in-notes-directory ".org-id-locations"))
   #+END_SRC

** Use org-ids for links to org file
   #+BEGIN_SRC emacs-lisp
     ;; Make sure org-id is loaded before org-store-link is invoked
     (defun iqbal-org-load-org-id-maybe (&rest ignored)
       (unless (featurep 'org-id)
         (require 'org-id)))

     (advice-add 'org-store-link :before #'iqbal-org-load-org-id-maybe)

     (setq org-id-link-to-org-use-id 'use-existing)
   #+END_SRC

** Command to quickly assign ids to entries in current org-mod buffer
   Credits: http://stackoverflow.com/a/16247032/5285712
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-org-add-ids-to-headlines-in-file ()
       "Add ID properties to all headlines in the current file which
     do not already have one."
       (interactive)
       (if (derived-mode-p 'org-mode)
           (org-map-entries 'org-id-get-create)
         (user-error "Not in an org-mode buffer")))
   #+END_SRC

** Add ids to headlines created in org agenda buffers
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-org-agenda-add-id ()
       (when (or (bound-and-true-p org-capture-mode)
                 (and (buffer-file-name)
                      (org-agenda-file-p (buffer-file-name))))
         (org-id-get-create)))

     (add-hook 'org-insert-heading-hook #'iqbal-org-agenda-add-id)
   #+END_SRC

** Add id to each captured item
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-create-id-for-org-capture ()
       (when (derived-mode-p 'org-mode)
         (save-excursion
           (goto-char (point-min))
           (if (not (string= (org-capture-get :key) "l"))
               (org-id-get-create)
             ;; For link captures use the link as the id
             (let ((link (car (org-offer-links-in-entry (current-buffer) (point) 1))))
               (org-entry-put (point) "ID" link)
               (org-id-add-location link (buffer-file-name (buffer-base-buffer))))))))

     (add-hook 'org-capture-prepare-finalize-hook 'iqbal-create-id-for-org-capture)
   #+END_SRC

** Automatically save org-id locations file after update org ids
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-org-id-save-after-update (&rest ignored)
       (org-id-locations-save))

     (advice-add 'org-id-update-id-locations :after #'iqbal-org-id-save-after-update)
   #+END_SRC


* org-expiry configuration
** Use inactive timestamps
   #+BEGIN_SRC emacs-lisp
     (setq org-expiry-inactive-timestamps t)
   #+END_SRC

** Add creation time whenever an entry is created
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'org
        (require 'org-expiry)
        (org-expiry-insinuate)
        (add-hook 'org-capture-prepare-finalize-hook #'org-expiry-insert-created))
    #+END_SRC

** Do not add created time for non-agenda buffers
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-org-avoid-creation-property-in-non-agenda-files (orig &rest args)
       (let ((file (buffer-file-name (if (bound-and-true-p org-capture-mode)
                                         (buffer-base-buffer (current-buffer))
                                       (current-buffer)))))
         (when (and file (org-agenda-file-p file))
           (apply orig args))))

     (advice-add 'org-expiry-insert-created :around #'iqbal-org-avoid-creation-property-in-non-agenda-files)
   #+END_SRC


* orgbox configuration
  #+BEGIN_SRC emacs-lisp
    (autoload 'orgbox-schedule "orgbox" "Schedule using orgbox" t)
    (autoload 'orgbox-agenda-schedule "orgbox" "Schedule using orgbox" t)

    (with-eval-after-load 'org
      (org-defkey org-mode-map (kbd "C-c C-s") 'orgbox-schedule))

    (with-eval-after-load 'org-agenda
      (org-defkey org-agenda-mode-map (kbd "C-c C-s") 'orgbox-agenda-schedule))
  #+END_SRC


* Org capture templates
** Helper functions
*** Get url at point where org capture was called
    We need to switch to previous buffer since, the function is executed in
    context of org-capture buffer, not the buffer where org-capture was invoked
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-org-capture-url-at-point ()
        (require 'thingatpt)
        (with-current-buffer (org-capture-get :original-buffer)
          (thing-at-point-url-at-point)))
    #+END_SRC

*** Get current url of w3m-buffer
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-org-capture-get-w3m-url ()
        (with-current-buffer (org-capture-get :original-buffer)
          (when (equal major-mode 'w3m-mode)
            (or (get-text-property (point) 'w3m-href-anchor)
                w3m-current-url))))
    #+END_SRC

*** Get url of current elfeed buffer
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-org-capture-get-elfeed-url ()
        (with-current-buffer (org-capture-get :original-buffer)
          (cond ((eq major-mode 'elfeed-show-mode) (elfeed-entry-link elfeed-show-entry))
                ((eq major-mode 'elfeed-search-mode) (elfeed-entry-link (elfeed-search-selected t))))))
    #+END_SRC

*** Get url from point or clipboard
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-org-capture-url-at-point-or-from-clipboard ()
        (or (iqbal-org-capture-url-at-point)
            (iqbal-org-capture-get-w3m-url)
            (iqbal-org-capture-get-elfeed-url)
            (iqbal-get-url-from-clipboard)))
    #+END_SRC

*** Get name of major mode of buffer from which org-capture was called
    The returned value can be uses as language in '#+BEGIN_SRC' markup. We need
    to switch to previous buffer since, the function is executed in context of
    org-capture buffer, not the buffer where org-capture was invoked
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-get-source-buffers-mode ()
        (with-current-buffer (org-capture-get :original-buffer)
          (substring (symbol-name major-mode) 0 -5)))
    #+END_SRC

*** Read date from user using calender widget and convert it to format diary can understand
    #+BEGIN_SRC emacs-lisp
      (defun iqbal--time-to-am/pm (hours minutes)
        (when (and hours minutes)
          (let* ((hours-int (string-to-number hours))
                 (hours-string (int-to-string (if (<= hours-int 12) 
                                                  hours-int
                                                (- hours-int 12))))
                 (suffix (if (< hours-int 12) 
                             "am"
                           "pm")))
            (concat hours-string ":" minutes suffix))))

      (defun iqbal-read-date-for-diary ()
        (let* ((date-read (org-read-date))
               (date-components (split-string date-read))
               (date-string (split-string (car date-components) "-"))
               (time-components (when (cadr date-components)
                                  (split-string (cadr date-components) ":")))
               (hours (car time-components))
               (minutes (cadr time-components)))
          (concat (calendar-month-name (string-to-number (cadr date-string)))
                  " "
                  (caddr date-string)
                  ", "
                  (car date-string)
                  " "
                  (iqbal--time-to-am/pm hours minutes))))
    #+END_SRC

*** Get the projectile project of the buffer from which capture was invoked
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-get-source-buffers-project ()
        (with-current-buffer (org-capture-get :original-buffer)
          (projectile-project-name)))
    #+END_SRC

*** Get active region in previous buffer as quote and org link to it
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-get-source-buffers-region-and-link ()
        (with-current-buffer (org-capture-get :original-buffer)
          (let ((fill-prefix "  "))
            (iqbal-indent-text (concat (when (region-active-p)
                                         (concat "#+begin_quote\n"
                                                 (iqbal-indent-text (iqbal-justify-paragraph-text (iqbal-fix-newlines (buffer-substring (region-beginning)
                                                                                                                                        (region-end))))
                                                                    2)
                                                 "\n#+end_quote\n"))
                                       (org-store-link nil))
                               (when (region-active-p) 4 2)))))
    #+END_SRC

*** Function to get journal file
    #+BEGIN_SRC emacs-lisp
      (defun iqbal-find-journal-file ()
        (org-journal-dir-check-or-create)
        (let ((file-name (concat org-journal-dir
                                 (format-time-string org-journal-file-format))))
          (find-file file-name)
          (when (= 1 (point-max))
            (insert org-journal-date-prefix
                    (format-time-string org-journal-date-format)
                    "\n"))
          (goto-char (point-max))))
    #+END_SRC

*** Function to the get the ledger file
    #+begin_src emacs-lisp
      (defun iqbal-get-current-ledger-file ()
        (let* ((date (calendar-current-date))
               (month (car date))
               (year (caddr date))
               (active-years (if (< month 3)
                                 (list (1- year) year)
                               (list year (1+ year))))
               (file-name (apply #'format "finances/%d-%d.ledger" active-years))
               (file-location (iqbal-get-file-in-data-directory file-name)))
          (find-file file-location)
          (goto-char (point-max))))
    #+end_src

** The templates
*** org-capture is not yet loaded, so initialize org-capture templates to empty list
    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates nil)
    #+END_SRC

*** Template for capturing todos
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates (list "t"
                                              "TODO"
                                              'entry
                                              (list 'file+headline
                                                    (expand-file-name "todos.org" iqbal-org-agenda-dir)
                                                    "Unfiled")
                                              "* TODO %? %^G\n\n"
                                              :empty-lines-after 2))
  #+END_SRC

*** Template for capturing todos linked to current buffer
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates (list "T"
                                              "TODO linked to current buffer"
                                              'entry
                                              (list 'file+headline
                                                    (expand-file-name "todos.org" iqbal-org-agenda-dir)
                                                    "Unfiled")
                                              "* TODO %? %^G\n%(iqbal-get-source-buffers-region-and-link)\n\n"
                                              :empty-lines-after 2))
  #+END_SRC

*** Template for capturing links
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "l"
                                                "Interesting links"
                                                'entry
                                                (list 'file+headline
                                                      (expand-file-name "links.org" iqbal-notes-dir)
                                                      "To read")
                                                "* UNREAD %? %^g\n  %(iqbal-org-capture-url-at-point-or-from-clipboard)\n\n"
                                                :empty-lines-after 2))
    #+END_SRC

*** Template for capturing notes
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "n"
                                                "Note"
                                                'entry
                                                (list 'file+headline
                                                      (expand-file-name "notes.org" iqbal-notes-dir)
                                                      "Unfiled")
                                                "* %? %^G\n\n"
                                                :empty-lines-after 2))
    #+END_SRC
    
*** Template for capturing notes linked to current buffer
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "N"
                                                "Note linked to current buffer"
                                                'entry
                                                (list 'file+headline
                                                      (expand-file-name "notes.org" iqbal-notes-dir)
                                                      "Unfiled")
                                                "* %? %^G\n%(iqbal-get-source-buffers-region-and-link)\n\n"
                                                :empty-lines-after 2))
    #+END_SRC

*** Add some data to currently clocked task
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "c"
                                                "Append to current task"
                                                'entry
                                                '(clock)
                                                "* %?"))
    #+END_SRC

*** Template for capturing code snippets
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "s"
                                                "Code snippets"
                                                'entry
                                                (list 'file
                                                      (expand-file-name "snippets.org" iqbal-notes-dir))
                                                "* %? \n  #+BEGIN_SRC %(iqbal-get-source-buffers-mode)\n    %i\n  #+END_SRC\n\n"
                                                :empty-lines-after 2))
    #+END_SRC

*** Template for capturing appointments
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "a"
                                                "Appointment"
                                                'plain
                                                (list 'file
                                                      (expand-file-name "appt.org" iqbal-org-agenda-dir))
                                                "* TODO %? %^g\n  SCHEDULED: <%(org-read-date)>"))
    #+END_SRC

*** Template for capturing appointments linked to current buffer
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "A"
                                                "Appointment linked to current buffer"
                                                'plain
                                                (list 'file
                                                      (expand-file-name "appt.org" iqbal-org-agenda-dir))
                                                "* TODO %? %^g\n%(iqbal-get-source-buffers-region-and-link)\n  SCHEDULED: <%(org-read-date)>"))
    #+END_SRC

*** Template to capture a diary entry
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "d"
                                                "Diary"
                                                'plain
                                                (list 'file
                                                      (iqbal-get-file-in-data-directory "diary"))
                                                "%(iqbal-read-date-for-diary) %?\n\n"))
    #+END_SRC

*** Template for capturing habit
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "h" 
                                                "Habit" 
                                                'entry 
                                                (list 'file 
                                                      (expand-file-name "habits.org" iqbal-org-agenda-dir))
                                                "* TODO %?\n SCHEDULED: <%<%Y-%m-%d .+1d/2d>>\n :PROPERTIES:\n :STYLE: habit\n :REPEAT_TO_STATE: NEXT\n :END:\n"))
    #+END_SRC

*** Template for capturing journal entry
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "j"
                                                "Journal entry"
                                                'plain
                                                (list 'function #'iqbal-find-journal-file)
                                                "** %(format-time-string org-journal-time-format)%?\n"))
    #+END_SRC

*** Template for capturing journal entry linked to given buffer
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "J"
                                                "Journal entry linked to current buffer"
                                                'plain
                                                (list 'function #'iqbal-find-journal-file)
                                                "** %(format-time-string org-journal-time-format)%?\n%(iqbal-get-source-buffers-region-and-link 1)"))
    #+END_SRC

*** Template to capture an expense
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-capture-templates (list "e"
                                                "Record a expense in the current ledger file"
                                                'plain
                                                (list 'function #'iqbal-get-current-ledger-file)
                                                "\n%(format-time-string \"%Y/%m/%d\") %^{Purpose of the expense?}\n    %?"))
    #+END_SRC


* Check captured links for duplicates
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-org-check-captured-link-dup ()
      "For link captures check that we are not capturing an already captured link"
      (when (string= (org-capture-get :key) "l")
        (let ((link (car (org-offer-links-in-entry (current-buffer) (point) 1))))
          (when (org-id-find link)
            (let ((user-input (condition-case error
                                  (read-char-choice "This link has been captured already, [a] abort the capture, [j] abort capture and jump to the existing entry, [c] continue capturing: "
                                                    '(?a ?j ?c))
                                ((error quit) nil))))
              (when (memq user-input '(?a ?j))
                ;; org-capture-kill looks for local value of org-capture-plist but is
                ;; set after this hook is run, so set it locally in current buffer.
                ;; Should not cause any issues since this buffer is going to be killed
                ;; anyways
                (org-set-local 'org-capture-current-plist org-capture-plist)
                (org-capture-kill)
                (ignore-errors
                  (when (eq user-input ?j)
                    (org-id-goto link)
                    (run-hooks 'iqbal-org-link-capture-aborted-and-jumped)))))))))

    (add-hook 'org-capture-mode-hook #'iqbal-org-check-captured-link-dup)
  #+END_SRC


* View pending tasks
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-view-overdue-tasks ()
      (interactive)
      (let ((time (if current-prefix-arg (read-string "For time: " "now") "now"))
            (not-done-matcher "TODO<>\"DONE\"+TODO<>\"CANCELLED\"+TODO<>\"STARTED\"")
            (org-agenda-overriding-header "OVERDUE TASKS")
            org-agenda-sticky)
        (org-tags-view nil (format "%s+DEADLINE<=\"<%s>\"|%s+SCHEDULED<=\"<%s>\""
                                   not-done-matcher
                                   time
                                   not-done-matcher
                                   time))))
  #+END_SRC


* Custom agenda commands
  The timesheet command are taken from
  https://github.com/fniessen/emacs-leuven/blob/master/org-custom-agenda-views.el
** Add a dedicated section for custom agenda commands
   #+BEGIN_SRC emacs-lisp
     (defvar org-agenda-custom-commands nil)
     (add-to-list 'org-agenda-custom-commands '("c" . "Custom commands ... ") t)
     (add-to-list 'org-agenda-custom-commands '("ct" . "Timesheets ... ") t)
     (add-to-list 'org-agenda-custom-commands '("ca" . "Agenda ... ") t)
   #+END_SRC

** Command to view daily timesheets
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
                  '("ctd" "Daily Timesheet"
                    ((agenda ""))
                    ((org-agenda-log-mode-items '(clock closed))
                     (org-agenda-overriding-header "DAILY TIMESHEET")
                     (org-agenda-show-log 'clockcheck)
                     (org-agenda-span 'day)
                     (org-agenda-start-with-clockreport-mode t)
                     (org-agenda-time-grid nil))) t)
   #+END_SRC

** Command to view daily agenda along with DONE items and log
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
                  '("ca." "Daily log"
                    ((agenda ""))
                    ((org-agenda-overriding-header "DAILY LOG")
                     (org-agenda-span 'day)
                     (org-agenda-show-log t)
                     (org-agenda-skip-deadline-if-done nil)
                     (org-agenda-skip-scheduled-if-done nil)
                     (org-agenda-sticky nil)
                     (org-deadline-warning-days 0))) t)
   #+END_SRC

** Command to view weekly timesheets
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
                  '("ctw" "Weekly Timesheet"
                    ((agenda ""))
                    ((org-agenda-overriding-header "WEEKLY TIMESHEET")
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                     (org-agenda-span 'week)
                     (org-agenda-start-on-weekday 1)
                     (org-agenda-start-with-clockreport-mode t)
                     (org-agenda-time-grid nil))) t)
   #+END_SRC

** Command to view calfw-org
   #+BEGIN_SRC emacs-lisp
     (autoload 'cfw:open-org-calendar "calfw-org" "Open an Org schedule calendar." t)

     (add-to-list 'org-agenda-custom-commands
                  '("cc" "Calendar for current month"
                    (lambda (&rest ignore)
                      (cfw:open-org-calendar))) t)
   #+END_SRC

** Command to view org-dashboard
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
                  '("cd" "Calendar for current month"
                    (lambda (&rest ignore)
                      (call-interactively #'org-dashboard-display))) t)
   #+END_SRC

** Command to view overdue tasks
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
                  '("co" "View overdue tasks"
                    (lambda (&rest ignore)
                      (call-interactively #'iqbal-view-overdue-tasks))) t)
   #+END_SRC

** Command to view link log
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
                  `("cl" "View link log" ((tags-todo "SCHEDULED<>{^$}"
                                                     ((org-agenda-overriding-header "SCHEDULED")
                                                      (org-agenda-sorting-strategy '(time-up priority-down))))
                                          (todo "UNREAD"
                                                ((org-agenda-overriding-header "UNREAD")))
                                          (todo "READING"
                                                ((org-agenda-overriding-header "READING")))
                                          (todo "READ"
                                                ((org-agenda-overriding-header "READ"))))
                    ((org-agenda-files '(,(expand-file-name "links.org" iqbal-notes-dir))))))
   #+END_SRC


* Change TODO state to READING when opening a UNREAD link
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-org-mark-link-as-reading-on-follow ()
      (let ((todo-state (save-excursion (when (ignore-errors (org-back-to-heading t))
                                          (org-get-todo-state)))))
        (when (string= todo-state "UNREAD")
          (org-todo "READING"))))

    (add-hook 'org-follow-link-hook #'iqbal-org-mark-link-as-reading-on-follow)
  #+END_SRC


* Clock in automatically if TODO state changes to STARTED or READING
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-org-clock-in-on-todo-change ()
      (when (and org-state
                 (or (string= org-state "STARTED")
                     (string= org-state "READING"))
                 ;; The todo change can also occur because of user clocking in
                 ;; (see `org-clock-in-switch-to-state' and `org-clock-out-switch-to-state')
                 ;; in which case we need to avoid re-clocking in, however since org-mode
                 ;; might not have completed clocked in when this todo change occurs we
                 ;; need to ensure we are not clocked in by comparing `org-clock-current-task'
                 ;; to current task
                 (not (string= org-clock-current-task (nth 4 (org-heading-components)))))
        ;; Disable state change on clock in (since we are in middle of a state change)
        (let (org-clock-in-switch-to-state) (org-clock-in))))

    (add-hook 'org-after-todo-state-change-hook #'iqbal-org-clock-in-on-todo-change)
  #+END_SRC


* Clock into a task interactively
  This queries for a tag for searching (similar to org-tag-view) and list all
  the matching pending tasks. This is different from `C-u org-clock-in` which
  prompts only for recent tasks
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-extract-todos (file matcher)
      (let ((existing-buffer (find-buffer-visiting file))
            (org-agenda-buffer nil))
        (save-window-excursion
          (with-current-buffer (if existing-buffer existing-buffer (find-file file))
            (org-scan-tags 'agenda matcher t)))))

    (defun iqbal-clock-in-interactive (prefix)
      (interactive "p")
      (if (and (org-clocking-p)
               (not (equal prefix 16)))
          (cond ((equal prefix 4) (save-window-excursion
                                    (org-clock-goto)
                                    (org-todo 'done)))
                ((y-or-n-p "Are you sure you want to clock out?") (progn (org-clock-out)
                                                                         (message "Clocked out of existing task"))))
        (let* ((todo-only t)
               (matcher (cdr (org-make-tags-matcher nil)))
               (org-clock-history (mapcar (lambda (todo) (get-text-property 0 'org-marker todo))
                                          (loop for agenda-file in (org-agenda-files)
                                                append (iqbal-extract-todos agenda-file matcher)))))
          (org-clock-in '(4)))))
  #+END_SRC


* Configurations for org clocking
** Capture a note while clocking out
   #+BEGIN_SRC emacs-lisp
     (setq org-log-note-clock-out t)
   #+END_SRC

** Better display of clocked in task, also indicate if not currently clocked in
   #+BEGIN_SRC emacs-lisp
     (setq org-clock-clocked-in-display nil)

     (defface iqbal-org-not-clocked-in
       `((t :background "red" :foreground "white" :weight bold))
       "Face for when you are not clocked in to an org task")

     (defface iqbal-org-clocked-in
       `((t :background "LimeGreen" :foreground "white" :weight bold))
       "Face for when you are not clocked in to an org task")

     (defun iqbal-org-clock-mode-line ()
       (let ((clocking-p (and (fboundp 'org-clocking-p)
                              (org-clocking-p))))
         (when clocking-p
             (org-clock-update-mode-line))
         (let ((mode-line-string (format " %s "
                                         (if clocking-p
                                             org-mode-line-string
                                           (org-propertize "Not clocked in"
                                                           'help-echo "You are not clocked in to any task\nmouse-1 allows searching for task to clock in (similar to `org-tag-view`)\nmouse-2 allows clocking in to a recent task"
                                                           'keymap '(mode-line keymap
                                                                               (mouse-1 . iqbal-clock-in-interactive)
                                                                               (mouse-2 . (lambda () (interactive) (org-clock-in '(4))))
                                                                               (mouse-3 . (lambda () (interactive) (org-clock-in '(4)))))))))
               (mode-line-face (if clocking-p
                                   'iqbal-org-clocked-in
                                 'iqbal-org-not-clocked-in)))
           (format "%s " (propertize mode-line-string 'face mode-line-face 'mouse-face 'mode-line-highlight)))))

     (setq global-mode-string (remove '(:eval (iqbal-org-clock-mode-line)) global-mode-string))
     (push '(:eval (iqbal-org-clock-mode-line)) global-mode-string)
   #+END_SRC

** Store persistence info inside org directory
   #+BEGIN_SRC emacs-lisp
     (setq org-clock-persist-file (expand-file-name "org-clock-save.el" (iqbal-get-file-in-notes-directory "misc" t)))
   #+END_SRC

** Save both the running clock, and the entire clock history on exiting emacs
  #+BEGIN_SRC emacs-lisp
    (setq org-clock-persist t)
  #+END_SRC

** Always insert clocking info in *CLOCK* drawer
   #+BEGIN_SRC emacs-lisp
     (setq org-clock-into-drawer "CLOCK")
   #+END_SRC

** Remove clock line if resulting time is zero
   #+BEGIN_SRC emacs-lisp
     (setq org-clock-out-remove-zero-time-clocks t)
   #+END_SRC

** Do not find a recent task, if there is no current clocked in task in org-clock-goto
   #+BEGIN_SRC emacs-lisp
     (setq org-clock-goto-may-find-recent-task nil)
   #+END_SRC

** Setup clock persistence
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'org-clock-persistence-insinuate)
   #+END_SRC

** Automatically change todo states on clock-in and clock-out
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-org-clock-in-switch (state)
       (cond ((string= state "UNREAD") "READING")
             ((string= state "READ") "READING")
             (t "STARTED")))

     (defun iqbal-org-clock-out-switch (state)
       (cond ((string= state "READING") "UNREAD")
             ((string= state "STARTED") "TODO")))

     (setq org-clock-in-switch-to-state #'iqbal-org-clock-in-switch)
     (setq org-clock-out-switch-to-state #'iqbal-org-clock-out-switch)
   #+END_SRC

** View currently clocked in task
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-org-hide/show-current-task ()
      (interactive)
      (let ((task-buffer-name "*Current Task*"))
        (if (string= (buffer-name) task-buffer-name)
            (ignore-errors (delete-window))
          (if (not (org-clocking-p))
              (error "Not clocked in to any task")
            (org-save-all-org-buffers)
            (when (get-buffer task-buffer-name)
              (kill-buffer (get-buffer task-buffer-name)))
            (pop-to-buffer nil t)
            (org-clock-goto)
            (switch-to-buffer (clone-indirect-buffer task-buffer-name nil) t)
            (org-narrow-to-subtree)))))
  #+END_SRC

** Automatically clock out if task is marked as 'non-started' state
   #+BEGIN_SRC emacs-lisp
     (setq org-clock-out-when-done '("TODO"
                                      "NEXT"
                                      "DONE"
                                      "WAITING"
                                      "HOLD"
                                      "CANCELLED"
                                      "READ"
                                      "UNREAD"))
   #+END_SRC


* Display count of overdue tasks in mode-line
** Helper function to get overdue tasks
   Most of this is copied from org-mode
   #+BEGIN_SRC emacs-lisp
     (require 'async)

     (defvar iqbal-get-overdue-task-count-process nil)

     (defun iqbal-get-overdue-task-count-async (callback)
       (unless (process-live-p iqbal-get-overdue-task-count-process)
         (let ((async-func `(lambda ()
                              (require 'package)
                              (package-initialize)
                              (require 'org)
                              (require 'org-agenda)
                              ,(async-inject-variables "org-agenda-files")
                              (let* ((time "now")
                                     (files (org-agenda-files nil 'ifmode))
                                     (todo-only t)
                                     (matcher (cdr (org-make-tags-matcher (format "DEADLINE<=\"<%s>\"|SCHEDULED<=\"<%s>\""
                                                                                  time
                                                                                  time))))
                                     rtnall)
                                (while (setq file (pop files))
                                  (catch 'nextfile
                                    (org-check-agenda-file file)
                                    (setq buffer (if (file-exists-p file)
                                                     (org-get-agenda-file-buffer file)
                                                   (error "No such file %s" file)))
                                    (when buffer
                                      (with-current-buffer buffer
                                        (unless (derived-mode-p 'org-mode)
                                          (error "Agenda file %s is not in `org-mode'" file))
                                        (save-excursion
                                          (save-restriction
                                            (widen)
                                            (setq rtnall (append rtnall (org-scan-tags 'agenda matcher todo-only)))))))))
                                (length rtnall)))))
           (setq iqbal-get-overdue-task-count-process (async-start async-func callback)))))
   #+END_SRC

** Function to get modeline format
   #+BEGIN_SRC emacs-lisp
     (defface iqbal-overdue-task-face
       `((t :weight bold :inherit error))
       "Face for when you are not clocked in to an org task")

     (defvar iqbal-overdue-tasks-mode-line "")
     (add-to-list 'global-mode-string '(:eval iqbal-overdue-tasks-mode-line) t)

     (defun iqbal-get-overdue-tasks-mode-line-string (no-overdue-tasks)
       (unless (zerop no-overdue-tasks)
         (concat " "
                 (propertize
                  "Tasks"
                  'face 'iqbal-overdue-task-face
                  'help-echo (concat (if (= no-overdue-tasks 1)
                                         "You have an overdue task"
                                       (format "You have %s overdue tasks" no-overdue-tasks))
                                     "\nClick here to view "
                                     (if (= no-overdue-tasks 1) "it" "them"))
                  'mouse-face 'mode-line-highlight
                  'keymap '(mode-line keymap
                                      (mouse-1 . iqbal-view-overdue-tasks)
                                      (mouse-2 . iqbal-view-overdue-tasks)
                                      (mouse-3 . iqbal-view-overdue-tasks)))
                 (format " [%d] " no-overdue-tasks))))
   #+END_SRC

** Setup update of overdue tasks update every 60 seconds
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-update-overdue-task-mode-line ()
       (iqbal-get-overdue-task-count-async (lambda (task-count)
                                             (setq iqbal-overdue-tasks-mode-line (iqbal-get-overdue-tasks-mode-line-string task-count)))))

     (defvar iqbal-overdue-tasks-mode-line-timer (run-at-time 1 60 #'iqbal-update-overdue-task-mode-line))
   #+END_SRC

** Update task count on saving agenda file
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-org-setup-overdue-task-count-update ()
       (when (and (buffer-file-name)
                  (org-agenda-file-p (buffer-file-name)))
         (add-hook 'after-save-hook #'iqbal-update-overdue-task-mode-line t t)))

     (add-hook 'find-file-hook #'iqbal-org-setup-overdue-task-count-update)
   #+END_SRC


* Goto to a random task from global TODO list
  #+BEGIN_SRC emacs-lisp
    (defun org-random-entry (&optional arg)
      "Select and goto a random todo item from the global agenda"
      (interactive "P")
      (if org-agenda-overriding-arguments
          (setq arg org-agenda-overriding-arguments))
      (if (and (stringp arg) (not (string-match "\\S-" arg))) (setq arg nil))
      (let* ((today (org-today))
             (date (calendar-gregorian-from-absolute today))
             (kwds org-todo-keywords-for-agenda)
             (lucky-entry nil)
             (completion-ignore-case t)
             (org-agenda-buffer (when (buffer-live-p org-agenda-buffer)
                                  org-agenda-buffer))
             (org-select-this-todo-keyword
              (if (stringp arg) arg
                (and arg (integerp arg) (> arg 0)
                     (nth (1- arg) kwds))))
             rtn rtnall files file pos marker buffer)
        (when (equal arg '(4))
          (setq org-select-this-todo-keyword
                (org-icompleting-read "Keyword (or KWD1|K2D2|...): "
                                      (mapcar 'list kwds) nil nil)))
        (and (equal 0 arg) (setq org-select-this-todo-keyword nil))
        (catch 'exit
          (org-compile-prefix-format 'todo)
          (org-set-sorting-strategy 'todo)
          (setq files (org-agenda-files nil 'ifmode)
                rtnall nil)
          (while (setq file (pop files))
            (catch 'nextfile
              (org-check-agenda-file file)
              (setq rtn (org-agenda-get-day-entries file date :todo))
              (setq rtnall (append rtnall rtn))))
          
          (when rtnall
            (setq lucky-entry
                  (nth (random
                        (safe-length
                         (setq entries rtnall)))
                       entries))
            
            (setq marker (or (get-text-property 0 'org-marker lucky-entry)
                             (org-agenda-error)))
            (setq buffer (marker-buffer marker))
            (setq pos (marker-position marker))
            (org-pop-to-buffer-same-window buffer)
            (widen)
            (goto-char pos)
            (when (derived-mode-p 'org-mode)
              (org-show-context 'agenda)
              (save-excursion
                (and (outline-next-heading)
                     (org-flag-heading nil))) ; show the next heading
              (when (outline-invisible-p)
                (show-entry))                 ; display invisible text
              (run-hooks 'org-agenda-after-show-hook))))))
  #+END_SRC


* Keybindings
** Global keybindings for org-mode
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "C-c c") #'org-capture)

    (global-set-key (kbd "<f5>") #'org-capture)
    (global-set-key (kbd "<f6>") #'iqbal-clock-in-interactive)
    (global-set-key (kbd "<f7>") #'iqbal-toggle-org-dashboard)
    (global-set-key (kbd "<f8>") #'iqbal-org-hide/show-current-task)
    (global-set-key (kbd "<f9>") #'org-tags-view)
    (global-set-key (kbd "<f10>") #'iqbal-view-overdue-tasks)
    (global-set-key (kbd "<f11>") #'org-todo-list)
    (global-set-key (kbd "<f12>") #'org-agenda-list)
  #+END_SRC

** Keybinding to view diary
   #+BEGIN_SRC emacs-lisp
     (define-key iqbal-launcher-map "d" #'diary)
   #+END_SRC
