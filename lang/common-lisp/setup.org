* Choose lisp implementation
  #+begin_src emacs-lisp
    (unless (and (boundp 'inferior-lisp-program)
                 inferior-lisp-program
                 (executable-find inferior-lisp-program))
      (setq inferior-lisp-program (or (executable-find "lisp")
                                      (executable-find "sbcl")
                                      (executable-find "clisp")
                                      (progn (warn "No suitable lisp implementation found, slime may not work")
                                             nil))))

    (when (and inferior-lisp-program
               (string-match-p " " inferior-lisp-program))
      (warn (format "Path to `inferior-lisp-program' contains spaces (%s), slime may fail!"
                    inferior-lisp-program)))
  #+end_src


* Setup slime
  #+begin_src emacs-lisp
    (unless (featurep 'slime)
      (load "slime")
      (setq slime-contribs '(slime-fancy))

      (slime-setup))
  #+end_src


* Enable redshank mode
  #+begin_src emacs-lisp
    (redshank-mode)
  #+end_src


* Start slime if not connected yet
  #+begin_src emacs-lisp
    ;; Ensures slime is loaded after entire config has loaded
    (run-at-time 0.1 nil (lambda ()
                           (unless (slime-connected-p)
                             (slime))))
  #+end_src


* Enable slime-mode
  #+begin_src emacs-lisp
    (slime-mode)
  #+end_src


* Setup auto-completion for slime
  #+begin_src emacs-lisp
    (load "ac-slime")
    (set-up-slime-ac)
    
    (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
    
    (eval-after-load "auto-complete"
      '(add-to-list 'ac-modes 'slime-repl-mode))
  #+end_src


* Flash the current line after jump to definition
  #+begin_src emacs-lisp
    (my-highlight-line-after-func slime-edit-definition)
  #+end_src


* Setup code folding
  Enable "hs-minor-mode"
  #+begin_src emacs-lisp
    (hs-minor-mode)
  #+end_src
