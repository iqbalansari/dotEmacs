* Set the path to boris
  #+begin_src emacs-lisp
    (unless (boundp 'php-boris-command)
      (setq php-boris-command (or (executable-find "boris")
                                  (executable-find "boris.phar"))))
  #+end_src


* Enable php-boris-mode
  #+begin_src emacs-lisp
    (when (locate-library "php-boris-minor-mode")
      (php-boris-minor-mode))
  #+end_src


* Some extra configurations for boris repl
  #+begin_src emacs-lisp
    (defun my-boris-enable-extra-settings ()
      (auto-complete-mode +1)
      (php-extras-autocomplete-setup)
      (eldoc-mode +1)
      (php-extras-eldoc-setup))

    (add-hook 'php-boris-mode-hook #'my-boris-enable-extra-settings)
  #+end_src


* Configuration for jump to definition
** Enable gtags mode
   #+begin_src emacs-lisp
     (when my-gtags-available
       (ggtags-mode +1))

     (setq ggtags-enable-navigation-keys nil)
   #+end_src

** Generate tags file for project if not already generated 
  #+begin_src emacs-lisp
    (defvar my-project-root nil)
    (when my-gtags-available
      (let ((project-root (or (ignore-errors (projectile-project-root))
                              (locate-dominating-file (or buffer-file-name default-directory)
                                                      "GTAGS"))))
        
        (make-variable-buffer-local 'my-project-root)
        (setq my-project-root project-root)
        (if (and project-root
                 (not (or (string-equal (expand-file-name project-root)
                                        (expand-file-name "~/"))
                          (string-equal (file-truename project-root)
                                        (file-truename "~/.emacs.d/")))))
            (when (and (not (file-exists-p (concat project-root "/GTAGS")))
                       (y-or-n-p (format "GTAG files not present for project [%s], generate them?"
                                         project-root)))
              (message "Generating TAGS for project")
              (shell-command (format "cd %s && gtags" project-root)))
          (warn "Could not locate project root! Skipping generation of TAGS!"))))

  #+end_src

** Regenerate tags for project on saving buffer
   #+begin_src emacs-lisp
     (defun my-php-regenerate-tags ()
       (when (and my-project-root buffer-file-name)
         (shell-command (format "cd %s && global --single-update %s" my-project-root buffer-file-name))
         (message "TAGS regenerated!")))

     (add-hook (make-variable-buffer-local 'after-save-hook) #'my-php-regenerate-tags)
   #+end_src

** Regex to match included/required files this helps jumping to the files easily using ggtags-find-tag-dwim
   #+begin_src emacs-lisp
     (make-variable-buffer-local 'ggtags-include-pattern)
     (setq ggtags-include-pattern  '("^\\s-*\\(?:include\\|include_once\\|require_once\\|require\\)\\s-*\\((\\)?\\s\"\\(.+\\)\\s\"\\()\\)?\\s-*;" . 2))
   #+end_src


* Get documentation at point
** Load php-extra for documentation of builtin php functions
   #+begin_src emacs-lisp
     (load "php-extras")
   #+end_src

** Helper functions to retrieve and format documentation for function using gtags output
   #+begin_src emacs-lisp
     (defun my-php-format-doc-string (docstring)
       "Strip comments from php DOCSTRING"
       (with-current-buffer (get-buffer-create " *php-ggtags-doc-format*")
         (erase-buffer)
         (insert docstring)
         (goto-char (point-min))
         
         (html2text)
         (while (re-search-forward "^\\s-*\\(?:\\*/\\|/\\*\\|\\*\\|//\\)\\s-*" nil t)
           (replace-match "" nil nil))

         (delay-mode-hooks (php-mode))
         (font-lock-default-function 'php-mode)
         (goto-char (point-min))
         (let ((font-lock-keywords '(("@[a-z]+" 0 'php-annotations-annotation-face)))
               (font-lock-string-face nil))
           (font-lock-mode)
           (font-lock-default-fontify-region (point-min) (point-max) nil))
         
         (string-trim (buffer-string))))


     (defun my-php-grab-comments (location)
       "Get the comments for the function starting at location"
       (let (comments)
         (goto-char location)
         (while (and (zerop (forward-line -1))
                     (string-match-p "^\\s-*\\(?:/\\*\\|\\*\\|//\\|\\*/\\).*"
                                     (buffer-substring (line-beginning-position)
                                                       (line-end-position))))
           (push (buffer-substring-no-properties (line-beginning-position) (line-end-position))
                 comments))
         (mapconcat 'identity comments "\n")))

     (defun my-php-retrieve-and-format-docstring (location)
       "Retrieve the docstring for the function at LOCATION and return formatted docstring
     LOCATION is assumed to be a list having file location, symbol name, line number and function
     signature in same order"
       (with-current-buffer (get-buffer-create " *php-ggtags-doc*")
         (erase-buffer)
         (insert-file-contents-literally (car location))
         (goto-line (string-to-int (caddr location)))
         (string-trim (format "%s\n\n%s\n\nUser defined function in %s"
                              (my-php-format-doc-string (my-php-grab-comments (point)))
                              (my-php-format-eldoc-string (apply #'mapconcat (list 'identity (cdddr location) " ")) 0)
                              (abbreviate-file-name (car location))))))
   #+end_src

** Helper function to format the documentation retrieved using php-extras
   #+begin_src emacs-lisp
     (defun my-php-format-php-extras-doc (doc)
       "Format the doc returned by php-extras this fontifies the function signature in the doc"
       (with-current-buffer (get-buffer-create " *php-doc-format")
         (erase-buffer)
         (insert doc)
         (goto-char (point-min))
         (delay-mode-hooks (php-mode))
         (font-lock-default-function 'php-mode)
         (forward-paragraph)
         (forward-line)
         (font-lock-default-fontify-region (line-beginning-position)
                                           (line-end-position)
                                           nil)
         (buffer-string)))
   #+end_src

** Function to retrieve documentation for symbol using gtags or php-extras
   #+begin_src emacs-lisp
     (defun my-php-get-doc (symbol)
       "Try fetching documentation for symbol using gtags otherwise fallback to php-extras"
       (let* ((doc (php-extras-function-documentation symbol))
              (location (when (and (not doc) my-gtags-available)
                          (shell-command-to-string (format "global -a -d %s --result cscope"
                                                           (shell-quote-argument symbol))))))
         (if doc
             (my-php-format-php-extras-doc doc)
           (when (and location
                      (not (string= location "global: GTAGS not found.\n"))
                      (not (string= location "")))
             (my-php-retrieve-and-format-docstring (split-string location " "))))))
   #+end_src

** Function to show documentation for symbol at point
  #+begin_src emacs-lisp
    (defun my-php-doc-at-point (symbol)
      "Show documentation for symbol at point"
      (interactive (list (symbol-at-point)))
      (if (not symbol)
          (error "No symbol at point")
        (let ((doc (my-php-get-doc (symbol-name symbol))))
          (if doc
              (with-electric-help (lambda () (insert doc)) "*php-doc*")
            (error (format "No doc found for %s" (symbol-name symbol)))))))
  #+end_src


* Enable eldoc
** Custom function to combine eldoc from ggtags and php-extra eldoc
   #+begin_src emacs-lisp
     (defun my-php-count-args (arglist)
       ;; Count the number of arguments in given argument list
       (with-current-buffer (get-buffer-create " *php-eldoc*")
         (erase-buffer)
         (setq count 1)
         (insert arglist)
         (goto-char 0)
         ;; Count the number of (toplevel) , except for commas
         ;; not inside nested function calls or strings
         (while (search-forward "," nil t)
           (let ((context (syntax-ppss)))
             ;; We are not inside possibly other function call
             (when (and (zerop (car context))
                        ;; we are not in  a string
                        (not (cadddr context)))
               (setq count (+ 1 count)))))
         count))

     (defun my-php-format-eldoc-string (doc arg-number)
       (with-current-buffer (get-buffer-create " *php-eldoc*")
         (erase-buffer)
         (insert doc)
         ;; Fontify the doc
         (delay-mode-hooks (php-mode))
         (font-lock-default-function 'php-mode)
         (font-lock-default-fontify-region (point-min) (point-max) nil)
         (goto-char 0)
         ;; Delete trailing braces
         (when (re-search-forward "\\s-*{?\\s-*$" nil t)
           (replace-match "" nil nil))

         (goto-char 0)
         ;; Highlight the arg-numberth argument
         (when (and (> arg-number 0)
                    ;; Search successive arg-number , or (
                    (search-forward-regexp ",\\|(" nil t arg-number))
           (skip-chars-forward " ")
           (add-face-text-property (point) (- (search-forward-regexp ",\\|)$") 1) '(:weight bold :inherit highlight)))
         (string-trim (buffer-string))))

     (defun my-php-extras-eldoc-at-pt ()
       (when (eq php-extras-function-arguments 'not-loaded)
         (php-extras-load-eldoc))
       (when (hash-table-p php-extras-function-arguments)
         (php-extras-get-function-property (php-get-pattern) 'prototype)))

     (defun my-php-eldoc-function ()
       (interactive)
       ;; Find the position of opening bracket for current expression
       (let* ((open-paren (cadr (syntax-ppss)))
              ;; If the opening paren is a ( then we are probably in a function
              ;; call
              (in-function-call-maybe (and
                                       open-paren
                                       (equal (char-after open-paren) ?\()
                                       (save-excursion
                                         (goto-char (- open-paren 1))
                                         (not (equal (get-text-property (point) 'face) 'font-lock-keyword-face)))))
              ;; Get the doc current function call
              (doc (save-excursion
                     (when in-function-call-maybe
                       (goto-char open-paren))
                     (or (my-php-extras-eldoc-at-pt) (when my-gtags-available
                                                       (ignore-errors (ggtags-eldoc-function))))))
              ;; If we have documentation for the function try finding the argument
              ;; at point
              (arg-number (if (and in-function-call-maybe doc)
                              (my-php-count-args (buffer-substring (+ open-paren 1) (point)))
                            0)))
         (when doc
           ;; Format the doc and return
           (ignore-errors (my-php-format-eldoc-string doc arg-number)))))
   #+end_src

** Enable eldoc
  #+begin_src emacs-lisp
    (eldoc-mode)
    (make-local-variable 'eldoc-documentation-function)
    (setq eldoc-documentation-function #'my-php-eldoc-function)
    (when (fboundp 'remove-function)
      (remove-function :after-until #'my-php-eldoc-function))
  #+end_src


* Function to quickly start debugging a script
  Copied from [[https://blogs.oracle.com/opal/entry/quick_debugging_of_php_scripts]]
  #+begin_src emacs-lisp
    (defun my-php-debug ()
      "Run current PHP script for debugging with geben"
      (interactive)
      (if (locate-library "geben")
          (progn (call-interactively 'geben)
                 (async-shell-command
                  (format "XDEBUG_CONFIG='idekey=emacs-geben' %s -d xdebug.remote_enable=on -d xdebug.remote_host=127.0.0.1 -d xdebug.remote_port=9000  %s"
                          (executable-find "php")
                          (buffer-file-name))))
        (message "`geben' is not installed")))
  #+end_src


* Setup auto-complete to use php-auto-yasnippets
  #+begin_src emacs-lisp
    (payas/ac-setup)
  #+end_src


* Remove yasnippets from ac-sources
  auto-complete becomes unbearably slow since there are large
  number of snippets for php
  #+begin_src emacs-lisp
    (make-variable-buffer-local 'ac-sources)
    (setq ac-sources (remove 'ac-source-yasnippet ac-sources))
  #+end_src


* Enable syntax checking
** Enable flycheck mode
  #+begin_src emacs-lisp
    (flycheck-mode)
  #+end_src

** Check if phpmd is installed
   #+begin_src emacs-lisp
     (unless (executable-find "phpmd")
       (warn "`phpmd' not found! Install it for better syntax checking"))
   #+end_src
