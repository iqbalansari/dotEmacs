* Set the path to boris
  #+begin_src emacs-lisp
    (unless (boundp 'php-boris-command)
      (setq php-boris-command (or (executable-find "boris")
                                  (executable-find "boris.phar"))))
  #+end_src


* Enable php-boris-mode
  #+begin_src emacs-lisp
    (when (locate-library "php-boris-minor-mode")
      (php-boris-minor-mode))
  #+end_src


* Some extra configurations for boris repl
  #+begin_src emacs-lisp
    (defun my-boris-enable-extra-settings ()
      (auto-complete-mode +1)
      (php-extras-autocomplete-setup)
      (eldoc-mode +1)
      (php-extras-eldoc-setup))

    (add-hook 'php-boris-mode-hook #'my-boris-enable-extra-settings)
  #+end_src


* Get documentation at point
  #+begin_src emacs-lisp
    (defun my-php-doc-at-point ()
      (interactive)
      (let* ((symbol (symbol-at-point))
             (result (if symbol
                         (php-extras-function-documentation (symbol-name symbol))
                       (error "No symbol at point"))))
        (if result
            (with-electric-help (lambda () (insert result)) "*php-help*")
          (error (concat "No documentation found for `" (symbol-name symbol) "'")))))
  #+end_src


* Enable eldoc
** Load php-extra for documentation of builtin php functions
   #+begin_src emacs-lisp
     (load "php-extras")
   #+end_src

** Function to fetch eldoc string
   Try getting eldoc string using ggtags falling back to php-extras eldoc function
   #+begin_src emacs-lisp
     (defun my-php-eldoc-function ()
       (let* ((gtags-doc (when my-gtags-available
                           (ggtags-eldoc-function)))
              (doc (when gtags-doc
                     (replace-regexp-in-string (rx (: bos (zero-or-more (any " \t\n")))) "" gtags-doc))))
         (or doc
             (php-extras-eldoc-documentation-function))))
   #+end_src

** Enable eldoc
  #+begin_src emacs-lisp
    (eldoc-mode)
    (make-local-variable 'eldoc-documentation-function)
    (setq eldoc-documentation-function #'my-php-eldoc-function)
  #+end_src


* Configuration for jump to definition
** Enable gtags mode
   #+begin_src emacs-lisp
     (when my-gtags-available (ggtags-mode +1))
   #+end_src

** Generate tags file for project if not already generated 
  #+begin_src emacs-lisp
    (defvar my-project-root nil)
    (when my-gtags-available
      (let ((project-root (or (ignore-errors (projectile-project-root))
                              (locate-dominating-file (or buffer-file-name default-directory)
                                                      "GTAGS"))))
        
        (make-variable-buffer-local 'my-project-root)
        (setq my-project-root project-root)
        (if (and project-root
                 (not (or (string-equal (expand-file-name project-root)
                                        (expand-file-name "~/"))
                          (string-equal (file-truename project-root)
                                        (file-truename "~/.emacs.d/")))))
            (when (and (not (file-exists-p (concat project-root "/GTAGS")))
                       (y-or-n-p (format "GTAG files not present for project [%s], generate them?"
                                         project-root)))
              (message "Generating TAGS for project")
              (shell-command (format "cd %s && gtags" project-root)))
          (warn "Could not locate project root! Skipping generation of TAGS!"))))

  #+end_src

** Regenerate tags for project on saving buffer
   #+begin_src emacs-lisp
     (when my-gtags-available
       (add-hook (make-variable-buffer-local 'after-save-hook) #'ggtags-update-tags))
   #+end_src



* Function to quickly start debugging a script
  Copied from [[https://blogs.oracle.com/opal/entry/quick_debugging_of_php_scripts]]
  #+begin_src emacs-lisp
    (defun my-php-debug ()
      "Run current PHP script for debugging with geben"
      (interactive)
      (if (locate-library "geben")
          (progn (call-interactively 'geben)
                 (async-shell-command
                  (format "XDEBUG_CONFIG='idekey=emacs-geben' %s -d xdebug.remote_enable=on -d xdebug.remote_host=127.0.0.1 -d xdebug.remote_port=9000  %s"
                          (executable-find "php")
                          (buffer-file-name))))
        (message "`geben' is not installed")))
  #+end_src


* Setup auto-complete to use php-auto-yasnippets
  #+begin_src emacs-lisp
    (payas/ac-setup)
  #+end_src


* Remove yasnippets from ac-sources
  auto-complete becomes unbearably slow since there are large
  number of snippets for php
  #+begin_src emacs-lisp
    (make-variable-buffer-local 'ac-sources)
    (setq ac-sources (remove 'ac-source-yasnippet ac-sources))
  #+end_src


* Enable syntax checking
** Enable flycheck mode
  #+begin_src emacs-lisp
    (flycheck-mode)
  #+end_src

** Check if phpmd is installed
   #+begin_src emacs-lisp
     (unless (executable-find "phpmd")
       (warn "`phpmd' not found! Install it for better syntax checking"))
   #+end_src
