* Use ipython if available
  #+begin_src emacs-lisp
    (if (not (equal system-type 'windows-nt))
        (when (executable-find "ipython")
          (setq python-shell-interpreter "ipython"
                python-shell-prompt-regexp "In \\[[0-9]+\\]: "
                python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
                python-shell-completion-setup-code
                "from IPython.core.completerlib import module_completion"
                python-shell-completion-module-string-code
                "';'.join(module_completion('''%s'''))\n"
                python-shell-completion-string-code
                "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))
      (unless (zerop (shell-command "python -c \"import readline\""))
        (warn "`pyreadline' not installed, completion in python shell would not work
    do `pip install pyreadline', to install pyreadline")))
  #+end_src


* Setup Jedi for autocompletion
** Check if jedi is installed
   #+begin_src emacs-lisp
     (setq my-jedi-available (locate-library "jedi"))
   #+end_src

** Automatically start completion after inserting a dot
  #+begin_src emacs-lisp
    (setq jedi:complete-on-dot t)
  #+end_src

** Setup jedi for current buffer
   #+begin_src emacs-lisp
     (when my-jedi-available
       (jedi:setup))
   #+end_src


* Use django style comments with fill-column
  #+begin_src emacs-lisp
    (setq python-fill-docstring-style 'django)
  #+end_src


* Setup Rope for refactoring
** Configuration
   1. Prevent rope from setting up keybindings, we'll set our keybindings
   #+begin_src emacs-lisp
     (setq ropemacs-enable-shortcuts nil)
     (setq ropemacs-local-prefix nil)
     (setq ropemacs-global-prefix nil)
   #+end_src

   2. Enable autoimport
   #+begin_src emacs-lisp
     (setq ropemacs-enable-autoimport t)
   #+end_src

** Start ropemacs
   Load pymacs and load rope, if not already loaded
   #+begin_src emacs-lisp
     (when (and (locate-library "pymacs")
                (not (featurep 'pymacs)))
       (load "pymacs")
       (pymacs-load "ropemacs" "rope-"))
   #+end_src

** Generate auto-import cache if not generated already
   #+begin_src emacs-lisp
     (when (featurep 'ropemacs)
       (my-generate-auto-import-cache nil))
   #+end_src


* Setup flycheck for error checking
** Enable flycheck-mode (except if the file is in non-writable folder)
  #+begin_src emacs-lisp
    (when (and (buffer-file-name)
               (file-writable-p (file-name-directory (buffer-file-name))))
      (flycheck-mode))
  #+end_src

** Use pylint (if available) for syntax checking
   #+begin_src emacs-lisp
     (if (executable-find "pylint")
         (flycheck-select-checker 'python-pylint)
       (warn "Install pylint enable syntax checking"))
   #+end_src


* Use nosetests for testing
  #+begin_src emacs-lisp
    (when (locate-library "nose")
      (load "nose"))
  #+end_src


* Use flat imenu index
  #+begin_src emacs-lisp
    (set (make-local-variable 'imenu-create-index-function)
         #'python-imenu-create-flat-index)
  #+end_src


* Create virtualenv directory if it does not already exist
  #+begin_src emacs-lisp
    (when (and (boundp 'venv-location)
               (not (file-exists-p venv-location)))
      (make-directory venv-location t))
  #+end_src


* Add a discover menu for virtualenvwrapper
  #+begin_src emacs-lisp
    (when (locate-library "virtualenvwrapper")
      (discover-add-context-menu
       :context-menu '(venv
                       (description "Virtualenv wrapper in emacs-lisp")
                       (actions
                        ("Managing virtualenvs"
                         ("m" "Create a virtualenv" venv-mkvirtualenv)
                         ("r" "Delete a virtualenv" venv-rmvirtualenv)
                         ("c" "Copy virtualenv" venv-cpvirtualenv))
                        ("Using virtualenvs"
                         ("w" "Work on a virtualenv" venv-workon)
                         ("d" "Deactivate virtualenv" venv-deactivate)
                         ("C" "Change directory to virtualenv" venv-cpvirtualenv))))))
  #+end_src


* Setup code folding
  Enable "hs-minor-mode"
  #+begin_src emacs-lisp
    (hs-minor-mode)
  #+end_src


* Flash current line after a jump to definition
  #+begin_src emacs-lisp
    (when my-jedi-available
      (my-highlight-line-after-func jedi:goto-definition))
  #+end_src
