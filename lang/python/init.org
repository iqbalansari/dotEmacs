* Fix python-mode's send region
** Elpy's send region works well for arbitrary regions use it instead
   #+begin_src emacs-lisp
     (defun elpy--region-without-indentation (beg end)
       "Return the current region as a string, but without indentation."
       (let ((region (buffer-substring beg end))
             (indent-level nil))
         (catch 'return
           (with-temp-buffer
             (insert region)
             (goto-char (point-min))
             (while (< (point) (point-max))
               (cond
                ((and (not indent-level)
                      (not (looking-at "[ \t]*$")))
                 (setq indent-level (current-indentation)))
                ((and indent-level
                      (not (looking-at "[ \t]*$"))
                      (< (current-indentation)
                         indent-level))
                 (error "Can't adjust indentation, consecutive lines indented less than starting line")))
               (forward-line))
             (indent-rigidly (point-min)
                             (point-max)
                             (- indent-level))
             (buffer-string)))))
   #+end_src

** Custom functions for sending regions based on elpy's code
   #+begin_src emacs-lisp
     (defun iqbal-py-send-region (beg end)
       (interactive "r")
       (python-shell-send-string (elpy--region-without-indentation beg end)))

     (defun iqbal-py-send-line ()
       (interactive)
       (python-shell-send-string (elpy--region-without-indentation (line-beginning-position)
                                                                   (line-end-position))))
   #+end_src


* Separate functions for moving to start/end of function and class
** A modified version of python-mode's python-nav-end-of-defun
   #+begin_src emacs-lisp
     (defun iqbal-python-nav-end-of-defun (&optional args)
       "Move point to the end of def or class.
     Returns nil if point is not in a def or class."
       (interactive)
       (let ((beg-defun-indent)
             (beg-pos (point)))
         (when (or (python-info-looking-at-beginning-of-defun)
                   (python-nav-beginning-of-defun -1)
                   (python-nav-beginning-of-defun 1))
           (setq beg-defun-indent (current-indentation))
           (while (progn
                    (python-nav-end-of-statement)
                    (python-util-forward-comment 1)
                    (and (> (current-indentation) beg-defun-indent)
                         (not (eobp)))))
           (python-util-forward-comment -1)
           (forward-line 1)
           ;; Ensure point moves forward.
           (and (> beg-pos (point)) (goto-char beg-pos)))))
   #+end_src

** Macro to define modified navigation commands
   #+begin_src emacs-lisp
     (defmacro iqbal-py-define-nav-command (name bound-regexp nav-func)
       `(defun ,name (&optional args)
          (interactive "p")
          (let ((python-nav-beginning-of-defun-regexp ,bound-regexp))
            (push-mark)
            (,nav-func args))))
   #+end_src

** Function for moving at start of class
  #+begin_src emacs-lisp
    (iqbal-py-define-nav-command iqbal-py-begining-of-class
                              "^[[:space:]]*\\_<\\(?:class\\)\\_>[[:space:]]+\\([_[:alpha:]][_[:word:]]*\\)"
                              python-nav-beginning-of-defun)
  #+end_src

** Function for moving at end of class
   #+begin_src emacs-lisp
     (iqbal-py-define-nav-command iqbal-py-end-of-class
                               "^[[:space:]]*\\_<\\(?:class\\)\\_>[[:space:]]+\\([_[:alpha:]][_[:word:]]*\\)"
                               iqbal-python-nav-end-of-defun)
   #+end_src

** Function for moving at start of function
   #+begin_src emacs-lisp
     (iqbal-py-define-nav-command iqbal-py-begining-of-defun
                               "^[[:space:]]*\\_<\\(?:def\\)\\_>[[:space:]]+\\([_[:alpha:]][_[:word:]]*\\)"
                               python-nav-beginning-of-defun)
   #+end_src

** Function for moving at end of function
   #+begin_src emacs-lisp
     (iqbal-py-define-nav-command iqbal-py-end-of-defun
                               "^[[:space:]]*\\_<\\(?:def\\)\\_>[[:space:]]+\\([_[:alpha:]][_[:word:]]*\\)"
                               iqbal-python-nav-end-of-defun)
   #+end_src


* Function to execute nose tests using the nose library 
  #+begin_src emacs-lisp
    (defun iqbal-execute-nose-tests (options nose-fn)
      (let ((debug (assoc "--pdb" options)))
        (funcall nose-fn debug)))
  #+end_src


* Setting the correct python interpreter
** Function to detect if ipython is available
   If virtualenv is active and ipython is not installed in the virtualenv
   the following will return nil, irrespective of whether ipython is installed
   globally, unless the `check-venv-p` is nil
  #+begin_src emacs-lisp
    (defun iqbal-ipython-available-p (check-venv-p)
      (when (executable-find "ipython")
        ;; If a virtualenv is active also make sure ipython is installed
        ;; in the virtualenv
        (or (not check-venv-p)
            (not pyvenv-virtual-env)
            (string-prefix-p (file-truename pyvenv-virtual-env)
                             (file-truename (executable-find "ipython"))))))
  #+end_src

** Functions to setup python interpreter
   #+begin_src emacs-lisp
     (defun iqbal-set-python-interpreter (venv-activating-p)
       (if (not (equal system-type 'windows-nt))
           ;; Do not check venv for ipython if we are deactivating the
           ;; current venv
           (setq python-shell-interpreter (if (iqbal-ipython-available-p venv-activating-p)
                     "ipython"
                   "python"))
         (unless (zerop (shell-command "python -c \"import readline\""))
           (warn "`pyreadline' not installed, completion in python shell would not work
         do `pip install pyreadline', to install pyreadline"))))

     (defun iqbal-set-python-interpreter-on-venv-act ()
       (iqbal-set-python-interpreter t))

     (defun iqbal-set-python-interpreter-on-venv-deact ()
       (iqbal-set-python-interpreter nil))
   #+end_src

** Setup python interpreter in pyvenv activate and deactivate hooks
   #+begin_src emacs-lisp
     (add-hook 'pyvenv-post-activate-hooks #'iqbal-set-python-interpreter-on-venv-act)
     (add-hook 'pyvenv-post-deactivate-hooks #'iqbal-set-python-interpreter-on-venv-deact)
   #+end_src
