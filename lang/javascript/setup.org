* Configurations for js2-mode
** Underline errors
   #+begin_src emacs-lisp
     (set-face-attribute 'js2-error nil :underline "red" :foreground nil)
   #+end_src

** Indent 'case' on additional level inside 'switch' statements
   #+begin_src emacs-lisp
     (setq js2-indent-switch-body t)
   #+end_src

** Additional globals
   #+begin_src emacs-lisp
     (setq-default js2-global-externs '("module" "require" "setTimeout" "clearTimeout"
                                        "setInterval" "clearInterval" "console" "JSON"))
   #+end_src


* Enhancements for imenu
  #+begin_src emacs-lisp
    (js2-imenu-extras-mode)
  #+end_src


* Setup Tern for autocompletion and some refactoring
** Check ternjs availability
   #+begin_src emacs-lisp
     (defvar my-ternjs-available)
     (setq my-ternjs-available (locate-library "tern"))
   #+end_src

** Enable tern-mode
   #+begin_src emacs-lisp
     (when my-ternjs-available
       (tern-mode t))
   #+end_src

** Enable auto-completion if ternjs is available
   #+begin_src emacs-lisp
     (when my-ternjs-available
       (load "tern-auto-complete")
       (setq tern-ac-dot-complete t)
       (tern-ac-setup))
   #+end_src

** Enable tab completion using tern-ac-complete
   #+begin_src emacs-lisp
     (make-local-variable 'completion-at-point-functions)
     (push #'tern-ac-complete completion-at-point-functions)
   #+end_src

   
* REPL for javascript
** Should we use nodejs-repl
   nodejs-repl is better for node as it provides autocompletion, use it if inside
   a node project
   #+begin_src emacs-lisp
     (defvar-local my-js-use-nodejs-repl nil)
     (setq my-js-use-nodejs-repl (when buffer-file-name 
                                   (locate-dominating-file buffer-file-name "package.json")))
   #+end_src

** Skewer mode configuration
*** Enable skewer mode
  #+begin_src emacs-lisp
    (unless my-js-use-nodejs-repl
      (skewer-mode))
  #+end_src

*** Function for sending region to js repl
   #+begin_src emacs-lisp
     (defun my-js-eval-region (start end)
       (interactive "r")
       (skewer-eval (buffer-substring-no-properties start end)))
   #+end_src

*** Advice skewer-repl so that run-skewer is executed before switching to repl
   #+begin_src emacs-lisp
     (defadvice skewer-repl (before ensure-skewer-clients (&rest args))
       (unless skewer-clients
         (run-skewer)))

     (ad-activate #'skewer-repl)
   #+end_src

** nodejs-repl configuration
*** Function for sending region to node-js repl
    #+begin_src emacs-lisp
      (defun my-nodejs-send-region (start end)
        (interactive "r")
        (nodejs-repl--send-string (concat (buffer-substring-no-properties start end)
                                          "\n")))
    #+end_src


* Setup code folding
  Enable "hs-minor-mode"
  #+begin_src emacs-lisp
    (hs-minor-mode)
  #+end_src


* Flash the current line after jump to definition
  #+begin_src emacs-lisp
    (when my-ternjs-available
      (my-highlight-line-after-func tern-find-definition))
  #+end_src
