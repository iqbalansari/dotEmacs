* Pop documentation for symbol at point in a window
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-tern-get-docs ()
      (interactive)
      (tern-run-query (lambda (data)
                        (let ((url (cdr (assq 'url data))) (doc (cdr (assq 'doc data))))
                          (cond (doc (with-electric-help (lambda () (insert doc)) "*tern-help*"))
                                (url (browse-url url))
                                (t (message "Not found")))))
                      "documentation"
                      (point)))
  #+END_SRC


* Use js-beautify to cleanup messy javascript
  This can be also be used for reformatting JSON files for viewing them
  #+BEGIN_SRC emacs-lisp
    (when (executable-find "js-beautify")
      (autoload 'js-beautify "js-beautify" "Beautify a region of javascript using the code from jsbeautify.org" t))
  #+END_SRC


* Eval region in skewer mode
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-js-eval-region (start end)
      (interactive "r")
      (skewer-eval (buffer-substring-no-properties start end)))
  #+END_SRC


* Eval region in nodejs repl
  #+BEGIN_SRC emacs-lisp
    (defun iqbal-nodejs-send-region (start end)
      (interactive "r")
      (nodejs-repl--send-string (concat (buffer-substring-no-properties start end)
                                        "\n")))
  #+END_SRC


* Advice skewer-repl so that run-skewer is executed before switching to repl
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "skewer"
       (progn (defadvice skewer-repl (before ensure-skewer-clients (&rest args))
                (unless skewer-clients
                  (run-skewer)))

              (ad-activate #'skewer-repl)))
   #+END_SRC


* Flash the current line after jump to definition
  #+BEGIN_SRC emacs-lisp
    (eval-after-load "tern"
      '(iqbal-highlight-line-after-func tern-find-definition))
  #+END_SRC


* Keybindings for nodejs-repl
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-setup-nodejs-repl-keys ()
       (define-key js2-mode-map iqbal-run-shell #'nodejs-repl)
       (define-key js2-mode-map iqbal-send-buffer (iqbal-evaluate-buffer-in-repl iqbal-nodejs-eval-buffer iqbal-nodejs-send-region))
       (define-key js2-mode-map iqbal-send-function (iqbal-evaluate-defun-in-repl iqbal-nodejs-eval-defun iqbal-nodejs-send-region))
       (define-key js2-mode-map iqbal-send-region #'iqbal-nodejs-send-region)
       (define-key js2-mode-map iqbal-send-line (iqbal-evaluate-line-in-repl iqbal-nodejs-eval-line iqbal-nodejs-send-region))
       (define-key js2-mode-map iqbal-send-file (iqbal-evaluate-file-in-repl iqbal-nodejs-eval-file iqbal-nodejs-send-region)))
   #+END_SRC


* Keybindings for skewer-repl
   #+BEGIN_SRC emacs-lisp
     (defun iqbal-setup-skewer-repl-keys ()
       (define-key js2-mode-map iqbal-send-buffer #'skewer-load-buffer)
       (define-key js2-mode-map iqbal-send-function #'skewer-eval-defun)
       (define-key js2-mode-map iqbal-send-region #'iqbal-js-eval-region)
       (define-key js2-mode-map iqbal-send-phrase/sexp/block #'skewer-eval-last-expression)
       (define-key js2-mode-map iqbal-send-line (iqbal-evaluate-line-in-repl iqbal-js-eval-line iqbal-js-eval-region))
       (define-key js2-mode-map iqbal-send-file (iqbal-evaluate-file-in-repl iqbal-js-eval-file iqbal-js-eval-region)))
   #+END_SRC


* Misc variables
  #+BEGIN_SRC emacs-lisp
    (defvar iqbal-ternjs-available)
    (defvar iqbal-js-use-nodejs-repl nil)
    (make-variable-buffer-local 'iqbal-js-use-nodejs-repl)
  #+END_SRC
