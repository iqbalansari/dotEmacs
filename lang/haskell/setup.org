* Configuration for haskell-mode
** Enable interactive haskell mode
   #+begin_src emacs-lisp
     (setq haskell-process-suggest-remove-import-lines t)
     (setq haskell-process-auto-import-loaded-modules t)
     (interactive-haskell-mode)
   #+end_src

** Enable haskell-indentation-mode
   #+begin_src emacs-lisp
     (turn-on-haskell-indentation)
   #+end_src

** Enable declaration scan mode for better navigation
   #+begin_src emacs-lisp
     (turn-on-haskell-decl-scan)
   #+end_src

** Use presentation-mode instead of minibuffer for type info
   #+begin_src emacs-lisp
     (setq haskell-process-use-presentation-mode t)
   #+end_src


* Enable structured-haskell-mode if installed
  Otherwise fallback to haskell-mode's indentation also disable hl-line mode's
  highlighting on nodes, if shm is installed otherwise it interferes with shm's
  highlighting. Set some better colors for solarized light theme
  #+begin_src emacs-lisp
    (when (executable-find "structured-haskell-mode")
      (structured-haskell-mode)

      ;; Do not highlight line if cursor is on node
      (make-variable-buffer-local 'hl-line-range-function)
      (setq hl-line-range-function #'my-shm-do-not-highlight-line-on-nodes)

      (when (custom-theme-enabled-p 'solarized-light)
        (set-face-background 'shm-current-face "#eee8d5")
        (set-face-background 'shm-quarantine-face "lemonchiffon")))
  #+end_src


* Turn on eldoc
   #+begin_src emacs-lisp
     (turn-on-haskell-doc)
   #+end_src


* Setup jump to definition
** If hasktags is installed and file is not in home directory generate tags on save
  #+begin_src emacs-lisp
    (if (executable-find "hasktags")
        (when (and buffer-file-name
                   (not (string= (file-name-directory buffer-file-name)
                                 (expand-file-name "~/"))))
          (setq haskell-tags-on-save t))
      (warn "`hasktags' not installed, jump to definition MAY not work"))
  #+end_src


* Managing imports
** Suggest removal of unused imports
   #+begin_src emacs-lisp
     (setq haskell-process-suggest-remove-import-lines t)
   #+end_src

** Suggest importing required modules
   #+begin_src emacs-lisp
     (if (executable-find "hoogle")
         (setq haskell-process-suggest-hoogle-imports t)
       (when (executable-find "haskell-docs")
         (setq haskell-process-suggest-haskell-docs-imports t)))
   #+end_src


* Initialize ghc-mod
  #+begin_src emacs-lisp
    (when my-ghc-mod-available
      (ghc-init))
  #+end_src


* Setup auto-completion
** Enable company mode and company-ghc
  #+begin_src emacs-lisp
    (when my-ghc-mod-available
      (auto-complete-mode -1)
      (company-mode +1)

      (add-to-list 'company-backends '(company-ghc company-dabbrev-code)))
  #+end_src

** Show type info in the minibuffer
   #+begin_src emacs-lisp
     (setq company-ghc-show-info t)
   #+end_src

** Enable completion using tab
   #+begin_src emacs-lisp
     (when my-ghc-mod-available
       (make-local-variable 'completion-at-point-functions)
       (push (lambda () (call-interactively #'company-ghc)) completion-at-point-functions))
   #+end_src

** Warn if hoogle is not installed
   #+begin_src emacs-lisp
     (if (executable-find "hoogle")
         (unless (zerop (shell-command "hoogle --info t"))
           (warn "`hoogle' data not generated, do `hoogle data' in the shell to generate it"))
       (warn "`hoogle' is not installed documentation popup would not work, install it using cabal"))
   #+end_src


* Flash line after jump
  #+begin_src emacs-lisp
    (my-highlight-line-after-func haskell-mode-jump-to-def-or-tag)
  #+end_src
