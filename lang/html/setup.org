* Indentation settings for web-mode
  #+begin_src emacs-lisp
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-code-indent-offset 4)
  #+end_src


* Enable auto-completion
  #+begin_src emacs-lisp
    (load "ac-html")
    (add-to-list 'ac-sources 'ac-source-html-tag)
    (add-to-list 'ac-sources 'ac-source-html-attribute)

    (add-to-list 'web-mode-ac-sources-alist
                 '("html" . (ac-source-html-tag
                             ac-source-html-attribute)))

    (add-to-list 'web-mode-ac-sources-alist
                 '("css" . (ac-source-css-property)))
  #+end_src


* Enable auto-expansion
  #+begin_src emacs-lisp
    (setq web-mode-enable-auto-expanding t)
  #+end_src


* Highlight column for current tag
  #+begin_src emacs-lisp
    (setq web-mode-enable-current-column-highlight t)
  #+end_src


* Disable web-mode's autopairing
  #+begin_src emacs-lisp
    (setq web-mode-enable-auto-pairing nil)
  #+end_src


* Enable current element highlight
  #+begin_src emacs-lisp
    (setq web-mode-enable-current-element-highlight t)
  #+end_src


* Disable hl-line when current tag is highlighted
  #+begin_src emacs-lisp
    (make-local-variable 'hl-line-range-function)

    (defun my-disable-hl-line-on-tags ()
      (unless (web-mode-element-boundaries)
        (cons (line-beginning-position) (line-end-position))))

    (setq hl-line-range-function #'my-disable-hl-line-on-tags)
  #+end_src


* Color customizations for web-mode
  #+begin_src emacs-lisp
    (set-face-attribute 'web-mode-html-tag-face nil :foreground (face-attribute 'font-lock-keyword-face :foreground))
    (set-face-attribute 'web-mode-html-attr-name-face nil :foreground "#b58900")
    (set-face-attribute 'web-mode-html-attr-value-face nil :foreground "#2aa198")
    (set-face-attribute 'web-mode-current-element-highlight-face nil :background (face-attribute 'highlight :background) 
                        :weight 'bold
                        :foreground nil)

    (set-face-attribute 'web-mode-block-delimiter-face nil :foreground "red" :weight 'ultra-bold)
  #+end_src


* Enable emmet mode
** Enable emmet mode
  #+begin_src emacs-lisp
    (emmet-mode)
  #+end_src

** Disable preview before expanding snippets
   #+begin_src emacs-lisp
     (setq emmet-preview-default nil)
   #+end_src

** Custom function for expanding emmet snippets
   If region is active wrap it with expression otherwise
   expand current line
   #+begin_src emacs-lisp
     (defun my-emmet-wrap-or-expand-snippet ()
       (interactive)
       (if (region-active-p)
           (call-interactively #'emmet-wrap-with-markup)
         (call-interactively #'emmet-expand-line)))
   #+end_src


* Enable skewer mode
  #+begin_src emacs-lisp
    (skewer-html-mode)
  #+end_src


* Function for cleaning up messy markup :IMPROVE:
  #+begin_src emacs-lisp
    4(defun sgml-inspect ()
      "Convert a messy chunk of sgml tags into one you can easily inspect"
      (interactive)
      (let ((beginning (point-min))
            (end (point-max)))
        (goto-char beginning)
        (while (re-search-forward ">[ \t\n]*<" end t)
          (replace-match ">\n<"))
        (goto-char beginning)
        (while (re-search-forward "\\( \\)[^ ]+=" end t)
          (replace-match "\n" nil nil nil 1))
        (indent-region beginning end)))
  #+end_src
