* Variables controlling installation of libraries
  Do not try installing libraries on windows
  #+begin_src emacs-lisp
    (defvar my-install-rtags (not (eq system-type 'windows-nt)))
    (defvar my-install-irony (not (eq system-type 'windows-nt)))
    (defvar my-install-gtags (not (eq system-type 'windows-nt)))
  #+end_src


* Retrieving information about C environment
** Helper functions to retrieve the information
   #+begin_src emacs-lisp
     (defun my--find-llvm-config-executable()
       "Try finding llvm-config executable"
       (or (executable-find "llvm-config")
           (car (sort (remove-if-not #'file-executable-p (loop for path in exec-path when (file-exists-p path)
                                                               append (directory-files path t "^llvm-config")))
                      (lambda (file1 file2)
                        (version< (or (nth 2 (split-string file2 "-")) "0")
                                  (or (nth 2 (split-string file1 "-")) "0")))))))
     
     (defun my--get-gcc-version()
       "Get gcc version"
       (when (executable-find "gcc")
         (nth 3
              (split-string (car (split-string (shell-command-to-string "gcc --version")
                                               "\n"))))))
     
     (defun my--get-clang-version()
       "Get clang compiler version"
       (when (executable-find "clang")
         (car (split-string (nth 3
                                 (split-string (car (split-string (shell-command-to-string "clang --version") "\n"))))
                            "-"))))
     
     (defun my--extract-libclang-version-from-file (file)
       "Extract libclang version from header file"
       (let* ((declarations (split-string (my-read-file file) "\n"))
              (clang-version-dec (car (remove-if-not (lambda (dec)
                                                       (string-match-p "#define[\s]+CLANG_VERSION[\s]+" dec))
                                                     declarations))))
         (when clang-version-dec
           (car (last (split-string clang-version-dec " "))))))
     
     (defun my--get-libclang-version (llvm-config-executable)
       "Get version of libclang version associated with given llvm installation"
       (let* ((llvm-include-dir (substring (shell-command-to-string (concat llvm-config-executable
                                                                            " --includedir"))
                                           0
                                           -1))
              (clang-version-file (concat llvm-include-dir "/clang/Basic/Version.inc")))
         (when (file-exists-p clang-version-file)
           (my--extract-libclang-version-from-file clang-version-file))))
     
     (defun my--get-gnu-global-version ()
       (when (executable-find "global")
         (car (last (split-string (car (split-string (shell-command-to-string "global --version") "\n"))
                                  " ")))))
   #+end_src

** Find and store information about the environment   
   Try retrieving the information only if we need
   to install any of the libraries
   #+begin_src emacs-lisp
     (defvar my-gcc-version)
     (defvar my-clang-version)
     (defvar my-llvm-executable)
     (defvar my-llvm-version)
     (defvar my-libclang-version)
     (defvar my-cmake-version)
     
     (when (or (and my-install-rtags
                    (not (locate-library "rtags")))
               (and my-install-irony
                    (not (locate-library "irony-mode"))))
       (setq my-gcc-version (my--get-gcc-version)
             my-clang-version (my--get-clang-version)
             my-llvm-executable (my--find-llvm-config-executable)
             my-llvm-version  (when my-llvm-executable
                                (substring (shell-command-to-string (concat my-llvm-executable " --version"))
                                           0
                                           -1))
             my-libclang-version (when my-llvm-executable
                                   (my--get-libclang-version my-llvm-executable))
             my-cmake-version (if (executable-find "cmake")
                                  (nth 2 (split-string (shell-command-to-string "cmake --version"))))))
   #+end_src

** Find global's version
   #+begin_src emacs-lisp
     (defvar my-gnu-global-version (my--get-gnu-global-version))
   #+end_src


* Install rtags
  Install rtags for jumping to definition and friends, if requirements are
  satisfied otherwise display the missing requirements
  #+begin_src emacs-lisp
    (defvar my-rtags-available)
    
    (defun my-try-installing-rtags ()
      "Tries installing rtags if requirements are satisfied otherwise displays a warning
    about missing requirements"
      (when my-install-rtags
        (if (and my-llvm-executable
                 (not (version< my-llvm-version "3.1"))
                 (or (not (version< (or my-gcc-version "0") "4.7"))
                     (not (version< (or my-clang-version "0") "3.2")))
                 (not (version< (or my-libclang-version "0") "3.2")))
            (progn (el-get 'sync 'rtags)
                   (setq my-rtags-available t))
          (warn (concat "rtags requirements not satisfied\n"
                        "\t1. llvm " (if my-llvm-executable (concat " [found " my-llvm-version " ]") " [not found]") "\n"
                        "\t2. libclang >= 3.2 " 
                        (if (not (version< (or my-libclang-version "0") "3.2"))
                            " [found]" 
                          " [not found]") "\n"
                          "\t3. gcc >= 4.7 or clang >= 3.2" 
                          (if (or (not (version< (or my-gcc-version "0") "4.7"))
                                  (not (version< (or my-clang-version "0") "3.2")))
                              " [found]" 
                            " [not found]") "\n"
                            "skipping installation")))))
    
    (my-try-installing-rtags)
  #+end_src


* Install irony-mode and company-irony for completion
  Install irony-mode for context sensitive completion, if requirements are
  satisfied otherwise display the missing requirements
  #+begin_src emacs-lisp
    (defun my-try-installing-irony-mode ()
      "Tries installing irony-mode if requirements are satisfied otherwise displays a warning
    about missing requirements"
      (when my-install-irony
        (if (and my-cmake-version
                 (not (version< my-cmake-version "2.8.3"))
                 my-libclang-version)
            (progn (el-get 'sync '(irony-mode company-irony))
                   ;; Install irony server if not yet installed
                   (eval-after-load "irony"
                     '(unless (file-exists-p (concat irony-user-dir "/bin/irony-server"))
                        (irony-install-server))))
          (warn (concat "irony requirements not satisfied, require\n"
                        "\t1. cmake >= 2.8.3" 
                        (if my-cmake-version (concat " [found " my-cmake-version " ]") " [not found]") "\n"
                        "\t2. libclang" (if my-libclang-version (concat " [found " my-libclang-version " ]") " [not found]")
                        "\nskipping installation")))))
    
    (my-try-installing-irony-mode)
  #+end_src


* Install company-c-headers for completing headers
  #+begin_src emacs-lisp
    (el-get 'sync 'company-c-headers)
  #+end_src


* Install gtags if GNU Global is installed
  #+begin_src emacs-lisp
    (defvar my-gtags-available)

    (when my-install-gtags
      (if (and my-gnu-global-version
               (not (version< my-gnu-global-version "6.3")))
          (progn (el-get 'sync 'gtags)
                 (setq my-gtags-available t))
        (cond ((not my-gnu-global-version) (warn "GNU Global not installed, not installing gtags"))
              (t (warn (concat "GNU Global version is " my-gnu-global-version 
                               " install latest version to install gtags"))))))
  #+end_src


* Install malinka for creating C/C++ projects
   The main functionality that malinka provides is to properly populate and
   communicate the compiler commands to the rtags daemons depending on the
   project
  #+begin_src emacs-lisp
    (defvar my-malinka-indexed-projects nil)
    (when (locate-library "rtags")
        (el-get 'sync 'malinka))
  #+end_src

   
* Install prepaint for highlighting preprocessor directives
  #+begin_src emacs-lisp
    (el-get 'sync 'prepaint)
  #+end_src

