* Enable gtags-mode
  #+begin_src emacs-lisp
    (when iqbal-gtags-available
      (gtags-mode))
  #+end_src


* Enable prepaint mode
  #+begin_src emacs-lisp
    (preproc-font-lock-global-mode 1)
  #+end_src


* Load rtags and start rdm
  #+begin_src emacs-lisp
    (when iqbal-rtags-available
      (unless (fboundp 'rtags-start-process-maybe)
        (load "rtags"))
    
      (rtags-start-process-maybe))
  #+end_src


* Check if project is indexed
  #+begin_src emacs-lisp
    (when iqbal-rtags-available
      (let* ((project-root (let ((projectile-require-project-root nil)) (projectile-project-root)))
             (rtags-status (shell-command-to-string (concat (rtags-executable-find "rc")
                                                            " --is-indexed "
                                                            buffer-file-name)))
             (project-indexed (not (string= rtags-status "unknown\n"))))
        (setq iqbal-rtags-project-indexed project-indexed)
        (unless project-indexed
          (let ((compile-commands (locate-dominating-file "compile_commands.json"
                                                          (or buffer-file-name default-directory))))
            (if (and compile-commands
                     (file-in-directory-p compile-commands project-root))
                (shell-command (format "%s -J %s"
                                       (rtags-executable-find "rc")
                                       (shell-quote-argument compile-commands)))
              (warn "compile_commands.json not found for this project"))))))
  #+end_src


* Create GTAGS/TAGS if not created yet and RTags is not available for the project
  #+begin_src emacs-lisp
    (let ((project-root (ignore-errors (projectile-project-root))))
      (when (and project-root (not iqbal-rtags-project-indexed))
        (cond (iqbal-gtags-available (progn
                                       (unless (file-exists-p (concat project-root "GTAGS"))
                                         (shell-command (concat "cd "
                                                                (shell-quote-argument project-root)
                                                                " && gtags")))))
              ((executable-find "etags") (unless  (file-exists-p (concat project-root "TAGS"))
                                           (shell-command (concat "cd "
                                                                  (shell-quote-argument project-root)
                                                                  " && find . -name \"*.[ch]\" -print | xargs etags -a ")))))))
  #+end_src


* Automatically jump to symbol under cursor in *RTags* buffer
  #+begin_src emacs-lisp
    (setq rtags-error-timer-interval 0.1)
    (setq rtags-tracking t)
  #+end_src


* Highlight line after jump to definition
   #+begin_src emacs-lisp
     (iqbal-highlight-line-after-func iqbal-c-find-definition-rtags)
     (iqbal-highlight-line-after-func iqbal-find-definition-rtags-fallback)
     (iqbal-highlight-line-after-func gtags-find-tag)
     (iqbal-highlight-line-after-func find-tag)
   #+end_src


* Setup auto-completion
   Also add company-c-headers to company-backends
   #+begin_src emacs-lisp
     (when iqbal-irony-available
       (irony-mode)
       (add-to-list 'company-backends '(company-irony company-c-headers))
       (company-irony-setup-begin-commands))
   #+end_src


* Setup eldoc
  #+begin_src emacs-lisp
    (when iqbal-irony-available
      (irony-eldoc))
  #+end_src


* Setup syntax checking
** Enable flycheck mode
  #+begin_src emacs-lisp
    (flycheck-mode)
  #+end_src

** Select whichever checker is available
   #+begin_src emacs-lisp
     (flycheck-select-checker (cond ((and iqbal-gcc-version (not (version< iqbal-gcc-version "4.8.1"))) 'c/c++-gcc)
                                    (iqbal-clang-version 'c/c++-clang)))
   #+end_src

  #+begin_src emacs-lisp
    (eval-after-load 'projectile
      '(add-to-list 'projectile-project-root-files "compile_commands.json"))
  #+end_src
