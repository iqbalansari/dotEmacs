* Variables controlling installation of libraries
  Do not try installing libraries on windows
  #+begin_src emacs-lisp
    (defvar iqbal-install-rtags (eq system-type 'gnu/linux))
    (defvar iqbal-install-irony (eq system-type 'gnu/linux))
    (defvar iqbal-c-install-gtags t)
  #+end_src


* Variables to record versions of needed programs
  #+begin_src emacs-lisp
    (defvar iqbal-gcc-version nil)
    (defvar iqbal-g++-version nil)
    (defvar iqbal-clang-version nil)
    (defvar iqbal-llvm-executable nil)
    (defvar iqbal-llvm-version nil)
    (defvar iqbal-libclang-version nil)
    (defvar iqbal-cmake-version nil)
    (defvar iqbal-gnu-global-version "0")
  #+end_src


* Helper functions to retrieve the information
   #+begin_src emacs-lisp
     (defun iqbal--find-llvm-config-executable()
       "Try finding llvm-config executable"
       (or (executable-find "llvm-config")
           (car (sort (cl-remove-if-not #'file-executable-p (loop for path in exec-path when (file-exists-p path)
                                                               append (directory-files path t "^llvm-config")))
                      (lambda (file1 file2)
                        (version< (or (nth 2 (split-string file2 "-")) "0")
                                  (or (nth 2 (split-string file1 "-")) "0")))))))

     (defun iqbal--get-gcc-version()
       "Get gcc version"
       (when (executable-find "gcc")
         (nth 3
              (split-string (car (split-string (shell-command-to-string "gcc --version")
                                               "\n"))))))

     (defun iqbal--get-g++-version()
       "Get g++ version"
       (when (executable-find "g++")
         (nth 3
              (split-string (car (split-string (shell-command-to-string "g++ --version")
                                               "\n"))))))

     (defun iqbal--get-clang-version()
       "Get clang compiler version"
       (when (executable-find "clang")
         (car (split-string (nth 3
                                 (split-string (car (split-string (shell-command-to-string "clang --version") "\n"))))
                            "-"))))

     (defun iqbal--extract-libclang-version-from-file (file)
       "Extract libclang version from header file"
       (let* ((declarations (split-string (iqbal-read-file file) "\n"))
              (clang-version-dec (car (cl-remove-if-not (lambda (dec)
                                                       (string-match-p "#define[\s]+CLANG_VERSION[\s]+" dec))
                                                     declarations))))
         (when clang-version-dec
           (car (last (split-string clang-version-dec " "))))))

     (defun iqbal--get-libclang-version (llvm-config-executable)
       "Get version of libclang version associated with given llvm installation"
       (let* ((llvm-include-dir (substring (shell-command-to-string (concat llvm-config-executable
                                                                            " --includedir"))
                                           0
                                           -1))
              (clang-version-file (concat llvm-include-dir "/clang/Basic/Version.inc")))
         (when (file-exists-p clang-version-file)
           (iqbal--extract-libclang-version-from-file clang-version-file))))

     (defun iqbal--get-gnu-global-version ()
       (when (executable-find "global")
         (car (last (split-string (car (split-string (shell-command-to-string "global --version") "\n"))
                                  " ")))))
   #+end_src


* Variables to record availability of packages
  #+begin_src emacs-lisp
    (defvar iqbal-rtags-available nil)
    (defvar iqbal-irony-available nil)
    (defvar iqbal-gtags-available nil)
  #+end_src


* Is the current project indexed?
  #+begin_src emacs-lisp
    (defvar iqbal-rtags-project-indexed nil)
  #+end_src


* Open man page for symbol at point
  #+begin_src emacs-lisp
    (defun iqbal-get-man-page-at-pt ()
      (interactive)
      (let ((symbol (thing-at-point 'symbol)))
        (with-electric-help (lambda () (woman symbol)) "*c-help*")))
  #+end_src


* Custom jump to definition functions using rtags
  Try to use rtags, if it fails fallback to gtags, if gtags is not available use
  etags
  #+begin_src emacs-lisp
    (defun iqbal-find-definition-rtags-fallback ()
      (with-current-buffer rtags-buffer-name
        (when (= (point-min) (point-max))
          (if rtags-last-request-not-indexed
              (if iqbal-gtags-available (gtags-find-tag) (call-interactively #'find-tag))
            (rtags-find-symbols-by-name-internal "No obvious location found for jump, find symbol"
                                                 "-F")))))
    
    (defun iqbal-c-find-definition-rtags (&optional prefix)
      (interactive "P")
      (rtags-find-symbol-at-point prefix)
      (iqbal-find-definition-rtags-fallback))
    
    (defun iqbal-c-find-definition (&optional prefix)
      (interactive "P")
      (cond (iqbal-rtags-project-indexed (call-interactively #'iqbal-c-find-definition-rtags))
            (iqbal-gtags-available (call-interactively  #'gtags-find-tag))
            (t (call-interactively  #'find-tag))))
    
    (defun iqbal-c-pop-mark ()
      (interactive)
      (cond (iqbal-rtags-project-indexed (call-interactively #'rtags-location-stack-back))
            (iqbal-gtags-available (call-interactively #'gtags-pop-stack))
            (t (call-interactively #'pop-tag-mark))))
  #+end_src


* Function to find references
  Fallback to gtags, if rtags is not present
  #+begin_src emacs-lisp
    (defun iqbal-c-find-references ()
      (interactive)
      (cond (iqbal-rtags-project-indexed (call-interactively #'rtags-find-references))
            (iqbal-gtags-available (call-interactively #'gtags-find-rtag))
            (t (call-interactively #'rgrep))))
  #+end_src


* Helper function to locate compile_commands.json
  #+begin_src emacs-lisp
    (defun iqbal-locate-compile-commands (dir)
      (cond ((file-exists-p (format "%s/compile_commands.json" dir)) (format "%s/compile_commands.json" dir))
            ((file-exists-p (format "%s/build/compile_commands.json" dir)) (format "%s/build/compile_commands.json" dir))))
  #+end_src

